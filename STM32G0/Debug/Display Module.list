
Display Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005648  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057cc  080057cc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080057cc  080057cc  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057cc  080057cc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000000c  080057e0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080057e0  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdd2  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e1  00000000  00000000  00016e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00018ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  00019cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015666  00000000  00000000  0001a796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010aa5  00000000  00000000  0002fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e8f  00000000  00000000  000408a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000ca774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000cd96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080056e8 	.word	0x080056e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080056e8 	.word	0x080056e8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <Set_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	b2d9      	uxtb	r1, r3
 800022a:	4b11      	ldr	r3, [pc, #68]	@ (8000270 <Set_LED+0x58>)
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	0092      	lsls	r2, r2, #2
 8000230:	54d1      	strb	r1, [r2, r3]
	LED_Data[LEDnum][1] = Green;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	b2d9      	uxtb	r1, r3
 8000236:	4a0e      	ldr	r2, [pc, #56]	@ (8000270 <Set_LED+0x58>)
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	18d3      	adds	r3, r2, r3
 800023e:	3301      	adds	r3, #1
 8000240:	1c0a      	adds	r2, r1, #0
 8000242:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	b2d9      	uxtb	r1, r3
 8000248:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <Set_LED+0x58>)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	18d3      	adds	r3, r2, r3
 8000250:	3302      	adds	r3, #2
 8000252:	1c0a      	adds	r2, r1, #0
 8000254:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2d9      	uxtb	r1, r3
 800025a:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <Set_LED+0x58>)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	18d3      	adds	r3, r2, r3
 8000262:	3303      	adds	r3, #3
 8000264:	1c0a      	adds	r2, r1, #0
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	46c0      	nop			@ (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b004      	add	sp, #16
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000028 	.word	0x20000028

08000274 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800027e:	2100      	movs	r1, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f002 f93b 	bl	80024fc <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000288:	2201      	movs	r2, #1
 800028a:	601a      	str	r2, [r3, #0]
}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000054 	.word	0x20000054
 8000298:	20000050 	.word	0x20000050

0800029c <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+40];

void WS2812_Send (void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	e038      	b.n	800031e <WS2812_Send+0x82>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80002ac:	4a2f      	ldr	r2, [pc, #188]	@ (800036c <WS2812_Send+0xd0>)
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	18d3      	adds	r3, r2, r3
 80002b4:	3301      	adds	r3, #1
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	041a      	lsls	r2, r3, #16
 80002ba:	492c      	ldr	r1, [pc, #176]	@ (800036c <WS2812_Send+0xd0>)
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	18cb      	adds	r3, r1, r3
 80002c2:	3302      	adds	r3, #2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	021b      	lsls	r3, r3, #8
 80002c8:	4313      	orrs	r3, r2
 80002ca:	4928      	ldr	r1, [pc, #160]	@ (800036c <WS2812_Send+0xd0>)
 80002cc:	693a      	ldr	r2, [r7, #16]
 80002ce:	0092      	lsls	r2, r2, #2
 80002d0:	188a      	adds	r2, r1, r2
 80002d2:	3203      	adds	r2, #3
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 80002da:	2317      	movs	r3, #23
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e018      	b.n	8000312 <WS2812_Send+0x76>
		{
			if (color&(1<<i))
 80002e0:	2201      	movs	r2, #1
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	409a      	lsls	r2, r3
 80002e6:	0013      	movs	r3, r2
 80002e8:	001a      	movs	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4013      	ands	r3, r2
 80002ee:	d005      	beq.n	80002fc <WS2812_Send+0x60>
			{
				pwmData[indx] =29;  // ~45% of 64
 80002f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000370 <WS2812_Send+0xd4>)
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	211d      	movs	r1, #29
 80002f8:	52d1      	strh	r1, [r2, r3]
 80002fa:	e004      	b.n	8000306 <WS2812_Send+0x6a>
			}

			else pwmData[indx] = 9;  // ~14% of 64
 80002fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000370 <WS2812_Send+0xd4>)
 80002fe:	697a      	ldr	r2, [r7, #20]
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	2109      	movs	r1, #9
 8000304:	52d1      	strh	r1, [r2, r3]

			indx++;
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3b01      	subs	r3, #1
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dae3      	bge.n	80002e0 <WS2812_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	3301      	adds	r3, #1
 800031c:	613b      	str	r3, [r7, #16]
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	2b09      	cmp	r3, #9
 8000322:	ddc3      	ble.n	80002ac <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<40; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	e00a      	b.n	8000340 <WS2812_Send+0xa4>
	{
		pwmData[indx] = 0;
 800032a:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <WS2812_Send+0xd4>)
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	2100      	movs	r1, #0
 8000332:	52d1      	strh	r1, [r2, r3]
		indx++;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	3301      	adds	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
	for (int i=0; i<40; i++)
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	3301      	adds	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b27      	cmp	r3, #39	@ 0x27
 8000344:	ddf1      	ble.n	800032a <WS2812_Send+0x8e>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	b29b      	uxth	r3, r3
 800034a:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <WS2812_Send+0xd4>)
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <WS2812_Send+0xd8>)
 800034e:	2100      	movs	r1, #0
 8000350:	f001 fee6 	bl	8002120 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000354:	46c0      	nop			@ (mov r8, r8)
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <WS2812_Send+0xdc>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0fb      	beq.n	8000356 <WS2812_Send+0xba>
	datasentflag = 0;
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <WS2812_Send+0xdc>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	46c0      	nop			@ (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b006      	add	sp, #24
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000028 	.word	0x20000028
 8000370:	20000168 	.word	0x20000168
 8000374:	20000054 	.word	0x20000054
 8000378:	20000050 	.word	0x20000050

0800037c <toggleLED>:

void toggleLED(int LED, int r, int g, int b)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
 8000388:	603b      	str	r3, [r7, #0]
	for (int var = 0; var < MAX_LED; ++var)
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
 800038e:	e008      	b.n	80003a2 <toggleLED+0x26>
	{
		Set_LED(var, 0,0,0);
 8000390:	6978      	ldr	r0, [r7, #20]
 8000392:	2300      	movs	r3, #0
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	f7ff ff3e 	bl	8000218 <Set_LED>
	for (int var = 0; var < MAX_LED; ++var)
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	3301      	adds	r3, #1
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	2b09      	cmp	r3, #9
 80003a6:	ddf3      	ble.n	8000390 <toggleLED+0x14>
	}

	WS2812_Send();
 80003a8:	f7ff ff78 	bl	800029c <WS2812_Send>
	Set_LED(LED, r,g,b);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	68b9      	ldr	r1, [r7, #8]
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff ff30 	bl	8000218 <Set_LED>
	WS2812_Send();
 80003b8:	f7ff ff70 	bl	800029c <WS2812_Send>
}
 80003bc:	46c0      	nop			@ (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b006      	add	sp, #24
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fc4f 	bl	8000c6c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f85b 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 f9b7 	bl	8000744 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003d6:	f000 f8ad 	bl	8000534 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80003da:	f000 f97f 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, rx_buffer, 2);
 80003de:	4921      	ldr	r1, [pc, #132]	@ (8000464 <main+0xa0>)
 80003e0:	4b21      	ldr	r3, [pc, #132]	@ (8000468 <main+0xa4>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f003 f9ff 	bl	80037e8 <HAL_UART_Receive_IT>

  for (int var = 0; var < MAX_LED; ++var)
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e008      	b.n	8000402 <main+0x3e>
  {
	Set_LED(var, 0,0,0);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	2300      	movs	r3, #0
 80003f4:	2200      	movs	r2, #0
 80003f6:	2100      	movs	r1, #0
 80003f8:	f7ff ff0e 	bl	8000218 <Set_LED>
  for (int var = 0; var < MAX_LED; ++var)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b09      	cmp	r3, #9
 8000406:	ddf3      	ble.n	80003f0 <main+0x2c>
  }

  WS2812_Send();
 8000408:	f7ff ff48 	bl	800029c <WS2812_Send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cfgFlag)
 800040c:	4b17      	ldr	r3, [pc, #92]	@ (800046c <main+0xa8>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00f      	beq.n	8000436 <main+0x72>
	  {
		  toggleLED(address, red, green, blue);
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <main+0xac>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <main+0xb0>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	0019      	movs	r1, r3
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <main+0xb4>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	001a      	movs	r2, r3
 8000428:	4b14      	ldr	r3, [pc, #80]	@ (800047c <main+0xb8>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	f7ff ffa6 	bl	800037c <toggleLED>
		  cfgFlag = 0;
 8000430:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <main+0xa8>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	  }

	  if(readDigit)
 8000436:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <main+0xbc>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0e5      	beq.n	800040c <main+0x48>
	  {
		  toggleLED(digit, red, green, blue);
 8000440:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <main+0xc0>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	0018      	movs	r0, r3
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <main+0xb0>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	0019      	movs	r1, r3
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <main+0xb4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	001a      	movs	r2, r3
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <main+0xb8>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	f7ff ff91 	bl	800037c <toggleLED>
		  readDigit=0;
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <main+0xbc>)
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
	  if(cfgFlag)
 8000460:	e7d4      	b.n	800040c <main+0x48>
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	2000013c 	.word	0x2000013c
 8000468:	200000a0 	.word	0x200000a0
 800046c:	20000134 	.word	0x20000134
 8000470:	20000164 	.word	0x20000164
 8000474:	20000136 	.word	0x20000136
 8000478:	20000137 	.word	0x20000137
 800047c:	20000138 	.word	0x20000138
 8000480:	20000135 	.word	0x20000135
 8000484:	20000165 	.word	0x20000165

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b093      	sub	sp, #76	@ 0x4c
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	2414      	movs	r4, #20
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2334      	movs	r3, #52	@ 0x34
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f005 f8f9 	bl	8005690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	2310      	movs	r3, #16
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f005 f8f2 	bl	8005690 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f877 	bl	80015a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2280      	movs	r2, #128	@ 0x80
 80004c0:	0252      	lsls	r2, r2, #9
 80004c2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c4:	0021      	movs	r1, r4
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2202      	movs	r2, #2
 80004ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2203      	movs	r2, #3
 80004d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2210      	movs	r2, #16
 80004dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2280      	movs	r2, #128	@ 0x80
 80004e2:	0292      	lsls	r2, r2, #10
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0592      	lsls	r2, r2, #22
 80004ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 f8a3 	bl	800163c <HAL_RCC_OscConfig>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x76>
  {
    Error_Handler();
 80004fa:	f000 fa87 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2207      	movs	r2, #7
 8000502:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2202      	movs	r2, #2
 8000508:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2280      	movs	r2, #128	@ 0x80
 8000514:	01d2      	lsls	r2, r2, #7
 8000516:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2102      	movs	r1, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fb9d 	bl	8001c5c <HAL_RCC_ClockConfig>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000526:	f000 fa71 	bl	8000a0c <Error_Handler>
  }
}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b013      	add	sp, #76	@ 0x4c
 8000530:	bd90      	pop	{r4, r7, pc}
	...

08000534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b09c      	sub	sp, #112	@ 0x70
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	2360      	movs	r3, #96	@ 0x60
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2310      	movs	r3, #16
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f005 f8a3 	bl	8005690 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054a:	2354      	movs	r3, #84	@ 0x54
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	230c      	movs	r3, #12
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f005 f89b 	bl	8005690 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055a:	2338      	movs	r3, #56	@ 0x38
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	0018      	movs	r0, r3
 8000560:	231c      	movs	r3, #28
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f005 f893 	bl	8005690 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	0018      	movs	r0, r3
 800056e:	2334      	movs	r3, #52	@ 0x34
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f005 f88c 	bl	8005690 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000578:	4b56      	ldr	r3, [pc, #344]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 800057a:	4a57      	ldr	r2, [pc, #348]	@ (80006d8 <MX_TIM1_Init+0x1a4>)
 800057c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 800057e:	4b55      	ldr	r3, [pc, #340]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 8000580:	2201      	movs	r2, #1
 8000582:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000584:	4b53      	ldr	r3, [pc, #332]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64-1;
 800058a:	4b52      	ldr	r3, [pc, #328]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 800058c:	223f      	movs	r2, #63	@ 0x3f
 800058e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000590:	4b50      	ldr	r3, [pc, #320]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000596:	4b4f      	ldr	r3, [pc, #316]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059c:	4b4d      	ldr	r3, [pc, #308]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005a2:	4b4c      	ldr	r3, [pc, #304]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fd03 	bl	8001fb0 <HAL_TIM_Base_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005ae:	f000 fa2d 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b2:	2160      	movs	r1, #96	@ 0x60
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	0152      	lsls	r2, r2, #5
 80005ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005bc:	187a      	adds	r2, r7, r1
 80005be:	4b45      	ldr	r3, [pc, #276]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 f984 	bl	80028d0 <HAL_TIM_ConfigClockSource>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005cc:	f000 fa1e 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d0:	4b40      	ldr	r3, [pc, #256]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fd44 	bl	8002060 <HAL_TIM_PWM_Init>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005dc:	f000 fa16 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2154      	movs	r1, #84	@ 0x54
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 fef8 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000604:	f000 fa02 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000608:	2138      	movs	r1, #56	@ 0x38
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2260      	movs	r2, #96	@ 0x60
 800060e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000634:	1879      	adds	r1, r7, r1
 8000636:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 8000638:	2200      	movs	r2, #0
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f848 	bl	80026d0 <HAL_TIM_PWM_ConfigChannel>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000644:	f000 f9e2 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000648:	2338      	movs	r3, #56	@ 0x38
 800064a:	18f9      	adds	r1, r7, r3
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 800064e:	2204      	movs	r2, #4
 8000650:	0018      	movs	r0, r3
 8000652:	f002 f83d 	bl	80026d0 <HAL_TIM_PWM_ConfigChannel>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800065a:	f000 f9d7 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2280      	movs	r2, #128	@ 0x80
 8000680:	0192      	lsls	r2, r2, #6
 8000682:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	0492      	lsls	r2, r2, #18
 800069c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b0:	1d3a      	adds	r2, r7, #4
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f002 fefc 	bl	80034b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80006c0:	f000 f9a4 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <MX_TIM1_Init+0x1a0>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 f9ea 	bl	8000aa0 <HAL_TIM_MspPostInit>

}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b01c      	add	sp, #112	@ 0x70
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000054 	.word	0x20000054
 80006d8:	40012c00 	.word	0x40012c00

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_USART2_UART_Init+0x60>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	@ (8000740 <MX_USART2_UART_Init+0x64>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_USART2_UART_Init+0x60>)
 80006e8:	2296      	movs	r2, #150	@ 0x96
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_USART2_UART_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART2_UART_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_USART2_UART_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART2_UART_Init+0x60>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_USART2_UART_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART2_UART_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_USART2_UART_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART2_UART_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_USART2_UART_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <MX_USART2_UART_Init+0x60>)
 8000726:	0018      	movs	r0, r3
 8000728:	f002 ff60 	bl	80035ec <HAL_UART_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f96c 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	200000a0 	.word	0x200000a0
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	240c      	movs	r4, #12
 800074c:	193b      	adds	r3, r7, r4
 800074e:	0018      	movs	r0, r3
 8000750:	2314      	movs	r3, #20
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f004 ff9b 	bl	8005690 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b39      	ldr	r3, [pc, #228]	@ (8000840 <MX_GPIO_Init+0xfc>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	4b38      	ldr	r3, [pc, #224]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000760:	2120      	movs	r1, #32
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	4b36      	ldr	r3, [pc, #216]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	2220      	movs	r2, #32
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b33      	ldr	r3, [pc, #204]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000776:	4b32      	ldr	r3, [pc, #200]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
 800077e:	4b30      	ldr	r3, [pc, #192]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <MX_GPIO_Init+0xfc>)
 800078c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800078e:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000790:	2102      	movs	r1, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
 8000796:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <MX_GPIO_Init+0xfc>)
 8000798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079a:	2202      	movs	r2, #2
 800079c:	4013      	ands	r3, r2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED5_Pin|LED7_Pin, GPIO_PIN_RESET);
 80007a2:	23a0      	movs	r3, #160	@ 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	21f0      	movs	r1, #240	@ 0xf0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fedc 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED9_Pin|LED2_Pin|LED4_Pin|LED6_Pin
 80007b0:	4924      	ldr	r1, [pc, #144]	@ (8000844 <MX_GPIO_Init+0x100>)
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_GPIO_Init+0x104>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fed6 	bl	8001568 <HAL_GPIO_WritePin>
                          |LED8_Pin|LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2284      	movs	r2, #132	@ 0x84
 80007c6:	0392      	lsls	r2, r2, #14
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	193a      	adds	r2, r7, r4
 80007d2:	23a0      	movs	r3, #160	@ 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fd61 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED5_Pin|LED7_Pin;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	22f0      	movs	r2, #240	@ 0xf0
 80007e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2211      	movs	r2, #17
 80007e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	193a      	adds	r2, r7, r4
 80007f8:	23a0      	movs	r3, #160	@ 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fd4e 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED9_Pin LED2_Pin LED4_Pin LED6_Pin
                           LED8_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED2_Pin|LED4_Pin|LED6_Pin
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <MX_GPIO_Init+0x100>)
 800080a:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2211      	movs	r2, #17
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	187b      	adds	r3, r7, r1
 8000820:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <MX_GPIO_Init+0x104>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f000 fd3b 	bl	80012a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800082a:	23a0      	movs	r3, #160	@ 0xa0
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2201      	movs	r2, #1
 8000830:	2102      	movs	r1, #2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fe98 	bl	8001568 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b009      	add	sp, #36	@ 0x24
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	00007c04 	.word	0x00007c04
 8000848:	50000400 	.word	0x50000400

0800084c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a61      	ldr	r2, [pc, #388]	@ (80009e0 <HAL_UART_RxCpltCallback+0x194>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d000      	beq.n	8000860 <HAL_UART_RxCpltCallback+0x14>
 800085e:	e0bb      	b.n	80009d8 <HAL_UART_RxCpltCallback+0x18c>
	{
		if (rx_buffer[0] == 102)
 8000860:	4b60      	ldr	r3, [pc, #384]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b66      	cmp	r3, #102	@ 0x66
 8000866:	d126      	bne.n	80008b6 <HAL_UART_RxCpltCallback+0x6a>
		{
			address = rx_buffer[1];
 8000868:	4b5e      	ldr	r3, [pc, #376]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 800086a:	785a      	ldrb	r2, [r3, #1]
 800086c:	4b5e      	ldr	r3, [pc, #376]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 800086e:	701a      	strb	r2, [r3, #0]
			tx_buffer[0] = 102;
 8000870:	4b5e      	ldr	r3, [pc, #376]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 8000872:	2266      	movs	r2, #102	@ 0x66
 8000874:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = rx_buffer[1]+1;
 8000876:	4b5b      	ldr	r3, [pc, #364]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b5b      	ldr	r3, [pc, #364]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 8000880:	705a      	strb	r2, [r3, #1]
			HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	@ 0x64
 8000884:	f000 fa78 	bl	8000d78 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, 2);
 8000888:	4958      	ldr	r1, [pc, #352]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 800088a:	4b59      	ldr	r3, [pc, #356]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 800088c:	2202      	movs	r2, #2
 800088e:	0018      	movs	r0, r3
 8000890:	f002 ff02 	bl	8003698 <HAL_UART_Transmit_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000894:	23a0      	movs	r3, #160	@ 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2200      	movs	r2, #0
 800089a:	2102      	movs	r1, #2
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fe63 	bl	8001568 <HAL_GPIO_WritePin>
			cfgFlag = 1;
 80008a2:	4b54      	ldr	r3, [pc, #336]	@ (80009f4 <HAL_UART_RxCpltCallback+0x1a8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, 2);
 80008a8:	494e      	ldr	r1, [pc, #312]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 80008aa:	4b51      	ldr	r3, [pc, #324]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 ff9a 	bl	80037e8 <HAL_UART_Receive_IT>
			return;
 80008b4:	e090      	b.n	80009d8 <HAL_UART_RxCpltCallback+0x18c>
		}
		else if (rx_buffer[0] == 103)
 80008b6:	4b4b      	ldr	r3, [pc, #300]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b67      	cmp	r3, #103	@ 0x67
 80008bc:	d11f      	bne.n	80008fe <HAL_UART_RxCpltCallback+0xb2>
		{
			address = rx_buffer[1];
 80008be:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 80008c0:	785a      	ldrb	r2, [r3, #1]
 80008c2:	4b49      	ldr	r3, [pc, #292]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 80008c4:	701a      	strb	r2, [r3, #0]
			tx_buffer[0] = 103;
 80008c6:	4b49      	ldr	r3, [pc, #292]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 80008c8:	2267      	movs	r2, #103	@ 0x67
 80008ca:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = rx_buffer[1]-1;
 80008cc:	4b45      	ldr	r3, [pc, #276]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b45      	ldr	r3, [pc, #276]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 80008d6:	705a      	strb	r2, [r3, #1]
			HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f000 fa4d 	bl	8000d78 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, 2);
 80008de:	4943      	ldr	r1, [pc, #268]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 80008e0:	4b43      	ldr	r3, [pc, #268]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 fed7 	bl	8003698 <HAL_UART_Transmit_IT>
			cfgFlag = 1;
 80008ea:	4b42      	ldr	r3, [pc, #264]	@ (80009f4 <HAL_UART_RxCpltCallback+0x1a8>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, 7);
 80008f0:	493c      	ldr	r1, [pc, #240]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 80008f2:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 ff76 	bl	80037e8 <HAL_UART_Receive_IT>
			return;
 80008fc:	e06c      	b.n	80009d8 <HAL_UART_RxCpltCallback+0x18c>
		}
		else if (rx_buffer[0] == 104)
 80008fe:	4b39      	ldr	r3, [pc, #228]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b68      	cmp	r3, #104	@ 0x68
 8000904:	d130      	bne.n	8000968 <HAL_UART_RxCpltCallback+0x11c>
		{
			red = rx_buffer[2];
 8000906:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000908:	789a      	ldrb	r2, [r3, #2]
 800090a:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <HAL_UART_RxCpltCallback+0x1ac>)
 800090c:	701a      	strb	r2, [r3, #0]
			green = rx_buffer[3];
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000910:	78da      	ldrb	r2, [r3, #3]
 8000912:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <HAL_UART_RxCpltCallback+0x1b0>)
 8000914:	701a      	strb	r2, [r3, #0]
			blue = rx_buffer[4];
 8000916:	4b33      	ldr	r3, [pc, #204]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000918:	791a      	ldrb	r2, [r3, #4]
 800091a:	4b39      	ldr	r3, [pc, #228]	@ (8000a00 <HAL_UART_RxCpltCallback+0x1b4>)
 800091c:	701a      	strb	r2, [r3, #0]

			for (int var = 0; var < 7; ++var)
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e00b      	b.n	800093c <HAL_UART_RxCpltCallback+0xf0>
			{
				tx_buffer[var] = rx_buffer[var];
 8000924:	4a2f      	ldr	r2, [pc, #188]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	7819      	ldrb	r1, [r3, #0]
 800092c:	4a2f      	ldr	r2, [pc, #188]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	1c0a      	adds	r2, r1, #0
 8000934:	701a      	strb	r2, [r3, #0]
			for (int var = 0; var < 7; ++var)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3301      	adds	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b06      	cmp	r3, #6
 8000940:	ddf0      	ble.n	8000924 <HAL_UART_RxCpltCallback+0xd8>
			}

			HAL_UART_Transmit_IT(&huart2, tx_buffer, 7);
 8000942:	492a      	ldr	r1, [pc, #168]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 8000944:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 8000946:	2207      	movs	r2, #7
 8000948:	0018      	movs	r0, r3
 800094a:	f002 fea5 	bl	8003698 <HAL_UART_Transmit_IT>

			cfgFlag = 1;
 800094e:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <HAL_UART_RxCpltCallback+0x1a8>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, address+1);
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b29a      	uxth	r2, r3
 800095c:	4921      	ldr	r1, [pc, #132]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 800095e:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 8000960:	0018      	movs	r0, r3
 8000962:	f002 ff41 	bl	80037e8 <HAL_UART_Receive_IT>
			return;
 8000966:	e037      	b.n	80009d8 <HAL_UART_RxCpltCallback+0x18c>
		}
		else if(rx_buffer[0] == 105)
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b69      	cmp	r3, #105	@ 0x69
 800096e:	d133      	bne.n	80009d8 <HAL_UART_RxCpltCallback+0x18c>
		{
			digit = rx_buffer[address];
 8000970:	4b1d      	ldr	r3, [pc, #116]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	001a      	movs	r2, r3
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000978:	5c9a      	ldrb	r2, [r3, r2]
 800097a:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <HAL_UART_RxCpltCallback+0x1b8>)
 800097c:	701a      	strb	r2, [r3, #0]

			for (int var = 0; var < address; ++var)
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	e00b      	b.n	800099c <HAL_UART_RxCpltCallback+0x150>
			{
				tx_buffer[var] = rx_buffer[var];
 8000984:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	7819      	ldrb	r1, [r3, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	1c0a      	adds	r2, r1, #0
 8000994:	701a      	strb	r2, [r3, #0]
			for (int var = 0; var < address; ++var)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	001a      	movs	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4293      	cmp	r3, r2
 80009a6:	dbed      	blt.n	8000984 <HAL_UART_RxCpltCallback+0x138>
			}

			HAL_Delay(100);
 80009a8:	2064      	movs	r0, #100	@ 0x64
 80009aa:	f000 f9e5 	bl	8000d78 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, address);
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	001a      	movs	r2, r3
 80009b4:	490d      	ldr	r1, [pc, #52]	@ (80009ec <HAL_UART_RxCpltCallback+0x1a0>)
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fe6d 	bl	8003698 <HAL_UART_Transmit_IT>
			readDigit = 1;
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1bc>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, address+1);
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_UART_RxCpltCallback+0x19c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <HAL_UART_RxCpltCallback+0x198>)
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_UART_RxCpltCallback+0x1a4>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 ff09 	bl	80037e8 <HAL_UART_Receive_IT>
			return;
 80009d6:	46c0      	nop			@ (mov r8, r8)
		}

	}
}
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40004400 	.word	0x40004400
 80009e4:	2000013c 	.word	0x2000013c
 80009e8:	20000164 	.word	0x20000164
 80009ec:	20000150 	.word	0x20000150
 80009f0:	200000a0 	.word	0x200000a0
 80009f4:	20000134 	.word	0x20000134
 80009f8:	20000136 	.word	0x20000136
 80009fc:	20000137 	.word	0x20000137
 8000a00:	20000138 	.word	0x20000138
 8000a04:	20000165 	.word	0x20000165
 8000a08:	20000135 	.word	0x20000135

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0549      	lsls	r1, r1, #21
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_MspInit+0x44>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	055b      	lsls	r3, r3, #21
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_TIM_Base_MspInit+0x38>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10d      	bne.n	8000a8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	0109      	lsls	r1, r1, #4
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	40012c00 	.word	0x40012c00
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	240c      	movs	r4, #12
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f004 fdec 	bl	8005690 <memset>
  if(htim->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <HAL_TIM_MspPostInit+0x74>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d123      	bne.n	8000b0a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_TIM_MspPostInit+0x78>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <HAL_TIM_MspPostInit+0x78>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_TIM_MspPostInit+0x78>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	22c0      	movs	r2, #192	@ 0xc0
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	23a0      	movs	r3, #160	@ 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fbcb 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b009      	add	sp, #36	@ 0x24
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	40012c00 	.word	0x40012c00
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b08b      	sub	sp, #44	@ 0x2c
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	2414      	movs	r4, #20
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f004 fdae 	bl	8005690 <memset>
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_UART_MspInit+0x9c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d138      	bne.n	8000bb0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <HAL_UART_MspInit+0xa0>)
 8000b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <HAL_UART_MspInit+0xa0>)
 8000b44:	2180      	movs	r1, #128	@ 0x80
 8000b46:	0289      	lsls	r1, r1, #10
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <HAL_UART_MspInit+0xa0>)
 8000b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_UART_MspInit+0xa0>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_UART_MspInit+0xa0>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_UART_MspInit+0xa0>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b72:	0021      	movs	r1, r4
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2201      	movs	r2, #1
 8000b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	187a      	adds	r2, r7, r1
 8000b94:	23a0      	movs	r3, #160	@ 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fb80 	bl	80012a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	201c      	movs	r0, #28
 8000ba6:	f000 f9b7 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000baa:	201c      	movs	r0, #28
 8000bac:	f000 f9c9 	bl	8000f42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b00b      	add	sp, #44	@ 0x2c
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f8aa 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <USART2_IRQHandler+0x14>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 fe4c 	bl	8003898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	200000a0 	.word	0x200000a0

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fff6 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f004 fd2b 	bl	80056a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c4a:	f7ff fbbb 	bl	80003c4 <main>

08000c4e <LoopForever>:

LoopForever:
  b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	080057d4 	.word	0x080057d4
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	2000039c 	.word	0x2000039c

08000c68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_Init+0x3c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_Init+0x3c>)
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	0049      	lsls	r1, r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2002      	movs	r0, #2
 8000c88:	f000 f810 	bl	8000cac <HAL_InitTick>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff febe 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_InitTick+0x88>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d02b      	beq.n	8000d1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_InitTick+0x8c>)
 8000cc6:	681c      	ldr	r4, [r3, #0]
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_InitTick+0x88>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	0019      	movs	r1, r3
 8000cce:	23fa      	movs	r3, #250	@ 0xfa
 8000cd0:	0098      	lsls	r0, r3, #2
 8000cd2:	f7ff fa15 	bl	8000100 <__udivsi3>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f7ff fa10 	bl	8000100 <__udivsi3>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f93d 	bl	8000f62 <HAL_SYSTICK_Config>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d112      	bne.n	8000d12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80a      	bhi.n	8000d08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f90c 	bl	8000f18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_InitTick+0x90>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e00d      	b.n	8000d24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e008      	b.n	8000d24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d12:	230f      	movs	r3, #15
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e003      	b.n	8000d24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b005      	add	sp, #20
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000398 	.word	0x20000398

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	@ (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	20000398 	.word	0x20000398

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff fff0 	bl	8000d64 <HAL_GetTick>
 8000d84:	0003      	movs	r3, r0
 8000d86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	001a      	movs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	f7ff ffe0 	bl	8000d64 <HAL_GetTick>
 8000da4:	0002      	movs	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dd2:	d809      	bhi.n	8000de8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	401a      	ands	r2, r3
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <__NVIC_EnableIRQ+0x30>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	4091      	lsls	r1, r2
 8000de4:	000a      	movs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e08:	d828      	bhi.n	8000e5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	33c0      	adds	r3, #192	@ 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	589b      	ldr	r3, [r3, r2]
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	0011      	movs	r1, r2
 8000e20:	2203      	movs	r2, #3
 8000e22:	400a      	ands	r2, r1
 8000e24:	00d2      	lsls	r2, r2, #3
 8000e26:	21ff      	movs	r1, #255	@ 0xff
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	22ff      	movs	r2, #255	@ 0xff
 8000e38:	401a      	ands	r2, r3
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2303      	movs	r3, #3
 8000e42:	4003      	ands	r3, r0
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	481f      	ldr	r0, [pc, #124]	@ (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	430a      	orrs	r2, r1
 8000e54:	33c0      	adds	r3, #192	@ 0xc0
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e5a:	e031      	b.n	8000ec0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	0019      	movs	r1, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	400b      	ands	r3, r1
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3306      	adds	r3, #6
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	18d3      	adds	r3, r2, r3
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1dfa      	adds	r2, r7, #7
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	400a      	ands	r2, r1
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	21ff      	movs	r1, #255	@ 0xff
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	22ff      	movs	r2, #255	@ 0xff
 8000e94:	401a      	ands	r2, r3
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea4:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <__NVIC_SetPriority+0xd8>)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	001c      	movs	r4, r3
 8000eac:	230f      	movs	r3, #15
 8000eae:	4023      	ands	r3, r4
 8000eb0:	3b08      	subs	r3, #8
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	3306      	adds	r3, #6
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	18c3      	adds	r3, r0, r3
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	045b      	lsls	r3, r3, #17
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d301      	bcc.n	8000ee8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e010      	b.n	8000f0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <SysTick_Config+0x44>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	3a01      	subs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff7c 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <SysTick_Config+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <SysTick_Config+0x44>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	210f      	movs	r1, #15
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	1c02      	adds	r2, r0, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	0002      	movs	r2, r0
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ffaf 	bl	8000ed0 <SysTick_Config>
 8000f72:	0003      	movs	r3, r0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2317      	movs	r3, #23
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2224      	movs	r2, #36	@ 0x24
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_DMA_Start_IT+0x24>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e06f      	b.n	8001080 <HAL_DMA_Start_IT+0x104>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2224      	movs	r2, #36	@ 0x24
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2225      	movs	r2, #37	@ 0x25
 8000fac:	5c9b      	ldrb	r3, [r3, r2]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d157      	bne.n	8001064 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2225      	movs	r2, #37	@ 0x25
 8000fb8:	2102      	movs	r1, #2
 8000fba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	438a      	bics	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 f921 	bl	8001220 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	210e      	movs	r1, #14
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00f      	b.n	8001018 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2104      	movs	r1, #4
 8001004:	438a      	bics	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	210a      	movs	r1, #10
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	025b      	lsls	r3, r3, #9
 8001022:	4013      	ands	r3, r2
 8001024:	d008      	beq.n	8001038 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001030:	2180      	movs	r1, #128	@ 0x80
 8001032:	0049      	lsls	r1, r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	0049      	lsls	r1, r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e00a      	b.n	800107a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2224      	movs	r2, #36	@ 0x24
 800106e:	2100      	movs	r1, #0
 8001070:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001072:	2317      	movs	r3, #23
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800107a:	2317      	movs	r3, #23
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b006      	add	sp, #24
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e050      	b.n	800113c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2225      	movs	r2, #37	@ 0x25
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d008      	beq.n	80010b8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2224      	movs	r2, #36	@ 0x24
 80010b0:	2100      	movs	r1, #0
 80010b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e041      	b.n	800113c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	210e      	movs	r1, #14
 80010c4:	438a      	bics	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	491c      	ldr	r1, [pc, #112]	@ (8001144 <HAL_DMA_Abort+0xbc>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2101      	movs	r1, #1
 80010e4:	438a      	bics	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_DMA_Abort+0xc0>)
 80010ea:	6859      	ldr	r1, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	221c      	movs	r2, #28
 80010f2:	4013      	ands	r3, r2
 80010f4:	2201      	movs	r2, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_DMA_Abort+0xc0>)
 80010fa:	430a      	orrs	r2, r1
 80010fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001106:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00c      	beq.n	800112a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <HAL_DMA_Abort+0xbc>)
 800111c:	400a      	ands	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001128:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2225      	movs	r2, #37	@ 0x25
 800112e:	2101      	movs	r1, #1
 8001130:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2224      	movs	r2, #36	@ 0x24
 8001136:	2100      	movs	r1, #0
 8001138:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	fffffeff 	.word	0xfffffeff
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001154:	210f      	movs	r1, #15
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2225      	movs	r2, #37	@ 0x25
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d006      	beq.n	8001176 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e049      	b.n	800120a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	210e      	movs	r1, #14
 8001182:	438a      	bics	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	438a      	bics	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a0:	491d      	ldr	r1, [pc, #116]	@ (8001218 <HAL_DMA_Abort_IT+0xcc>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <HAL_DMA_Abort_IT+0xd0>)
 80011a8:	6859      	ldr	r1, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	221c      	movs	r2, #28
 80011b0:	4013      	ands	r3, r2
 80011b2:	2201      	movs	r2, #1
 80011b4:	409a      	lsls	r2, r3
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_DMA_Abort_IT+0xd0>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00c      	beq.n	80011e8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011d8:	490f      	ldr	r1, [pc, #60]	@ (8001218 <HAL_DMA_Abort_IT+0xcc>)
 80011da:	400a      	ands	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2225      	movs	r2, #37	@ 0x25
 80011ec:	2101      	movs	r1, #1
 80011ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2224      	movs	r2, #36	@ 0x24
 80011f4:	2100      	movs	r1, #0
 80011f6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	0010      	movs	r0, r2
 8001208:	4798      	blx	r3
    }
  }
  return status;
 800120a:	230f      	movs	r3, #15
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	781b      	ldrb	r3, [r3, #0]
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}
 8001218:	fffffeff 	.word	0xfffffeff
 800121c:	40020000 	.word	0x40020000

08001220 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001236:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001248:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <DMA_SetConfig+0x7c>)
 800124c:	6859      	ldr	r1, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	221c      	movs	r2, #28
 8001254:	4013      	ands	r3, r2
 8001256:	2201      	movs	r2, #1
 8001258:	409a      	lsls	r2, r3
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <DMA_SetConfig+0x7c>)
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d108      	bne.n	8001282 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001280:	e007      	b.n	8001292 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	e147      	b.n	8001540 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4091      	lsls	r1, r2
 80012ba:	000a      	movs	r2, r1
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d100      	bne.n	80012c8 <HAL_GPIO_Init+0x28>
 80012c6:	e138      	b.n	800153a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x40>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2203      	movs	r2, #3
 80012da:	4013      	ands	r3, r2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	43da      	mvns	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	2201      	movs	r2, #1
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	4013      	ands	r3, r2
 800134a:	2b03      	cmp	r3, #3
 800134c:	d017      	beq.n	800137e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	4013      	ands	r3, r2
 8001386:	2b02      	cmp	r3, #2
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	58d3      	ldr	r3, [r2, r3]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2207      	movs	r2, #7
 800139c:	4013      	ands	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2107      	movs	r1, #7
 80013b6:	400b      	ands	r3, r1
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	401a      	ands	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	23c0      	movs	r3, #192	@ 0xc0
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d100      	bne.n	8001414 <HAL_GPIO_Init+0x174>
 8001412:	e092      	b.n	800153a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001414:	4a50      	ldr	r2, [pc, #320]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3318      	adds	r3, #24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	589b      	ldr	r3, [r3, r2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2203      	movs	r2, #3
 8001426:	4013      	ands	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	220f      	movs	r2, #15
 800142c:	409a      	lsls	r2, r3
 800142e:	0013      	movs	r3, r2
 8001430:	43da      	mvns	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	23a0      	movs	r3, #160	@ 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	429a      	cmp	r2, r3
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1ca>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a45      	ldr	r2, [pc, #276]	@ (800155c <HAL_GPIO_Init+0x2bc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1c6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a44      	ldr	r2, [pc, #272]	@ (8001560 <HAL_GPIO_Init+0x2c0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1c2>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a43      	ldr	r2, [pc, #268]	@ (8001564 <HAL_GPIO_Init+0x2c4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1be>
 800145a:	2303      	movs	r3, #3
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x1cc>
 800145e:	2305      	movs	r3, #5
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x1cc>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x1cc>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x1cc>
 800146a:	2300      	movs	r3, #0
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	2103      	movs	r1, #3
 8001470:	400a      	ands	r2, r1
 8001472:	00d2      	lsls	r2, r2, #3
 8001474:	4093      	lsls	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800147c:	4936      	ldr	r1, [pc, #216]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3318      	adds	r3, #24
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148a:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	035b      	lsls	r3, r3, #13
 80014a2:	4013      	ands	r3, r2
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	039b      	lsls	r3, r3, #14
 80014cc:	4013      	ands	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014de:	4a1e      	ldr	r2, [pc, #120]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 80014e0:	2384      	movs	r3, #132	@ 0x84
 80014e2:	58d3      	ldr	r3, [r2, r3]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001504:	4914      	ldr	r1, [pc, #80]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 8001506:	2284      	movs	r2, #132	@ 0x84
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800150c:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	025b      	lsls	r3, r3, #9
 8001526:	4013      	ands	r3, r2
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001532:	4909      	ldr	r1, [pc, #36]	@ (8001558 <HAL_GPIO_Init+0x2b8>)
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	40da      	lsrs	r2, r3
 8001548:	1e13      	subs	r3, r2, #0
 800154a:	d000      	beq.n	800154e <HAL_GPIO_Init+0x2ae>
 800154c:	e6b0      	b.n	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	46c0      	nop			@ (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b006      	add	sp, #24
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021800 	.word	0x40021800
 800155c:	50000400 	.word	0x50000400
 8001560:	50000800 	.word	0x50000800
 8001564:	50000c00 	.word	0x50000c00

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	0008      	movs	r0, r1
 8001572:	0011      	movs	r1, r2
 8001574:	1cbb      	adds	r3, r7, #2
 8001576:	1c02      	adds	r2, r0, #0
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	1c7b      	adds	r3, r7, #1
 800157c:	1c0a      	adds	r2, r1, #0
 800157e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001580:	1c7b      	adds	r3, r7, #1
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001588:	1cbb      	adds	r3, r7, #2
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d11f      	bne.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	0013      	movs	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	189b      	adds	r3, r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4912      	ldr	r1, [pc, #72]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7fe fd92 	bl	8000100 <__udivsi3>
 80015dc:	0003      	movs	r3, r0
 80015de:	3301      	adds	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e2:	e008      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e001      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e009      	b.n	800160a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	401a      	ands	r2, r3
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	429a      	cmp	r2, r3
 8001606:	d0ed      	beq.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	40007000 	.word	0x40007000
 8001618:	fffff9ff 	.word	0xfffff9ff
 800161c:	20000000 	.word	0x20000000
 8001620:	000f4240 	.word	0x000f4240

08001624 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <LL_RCC_GetAPB1Prescaler+0x14>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	23e0      	movs	r3, #224	@ 0xe0
 800162e:	01db      	lsls	r3, r3, #7
 8001630:	4013      	ands	r3, r2
}
 8001632:	0018      	movs	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e2f3      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x1e>
 8001658:	e07c      	b.n	8001754 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165a:	4bc3      	ldr	r3, [pc, #780]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2238      	movs	r2, #56	@ 0x38
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001664:	4bc0      	ldr	r3, [pc, #768]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b10      	cmp	r3, #16
 8001672:	d102      	bne.n	800167a <HAL_RCC_OscConfig+0x3e>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d002      	beq.n	8001680 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d10b      	bne.n	8001698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	4bb9      	ldr	r3, [pc, #740]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d062      	beq.n	8001752 <HAL_RCC_OscConfig+0x116>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d15e      	bne.n	8001752 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2ce      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x78>
 80016a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4baf      	ldr	r3, [pc, #700]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	2180      	movs	r1, #128	@ 0x80
 80016ac:	0249      	lsls	r1, r1, #9
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e020      	b.n	80016f6 <HAL_RCC_OscConfig+0xba>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	23a0      	movs	r3, #160	@ 0xa0
 80016ba:	02db      	lsls	r3, r3, #11
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10e      	bne.n	80016de <HAL_RCC_OscConfig+0xa2>
 80016c0:	4ba9      	ldr	r3, [pc, #676]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4ba8      	ldr	r3, [pc, #672]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	02c9      	lsls	r1, r1, #11
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4ba6      	ldr	r3, [pc, #664]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4ba5      	ldr	r3, [pc, #660]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0249      	lsls	r1, r1, #9
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0xba>
 80016de:	4ba2      	ldr	r3, [pc, #648]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4ba1      	ldr	r3, [pc, #644]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	49a1      	ldr	r1, [pc, #644]	@ (800196c <HAL_RCC_OscConfig+0x330>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b9f      	ldr	r3, [pc, #636]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	499f      	ldr	r1, [pc, #636]	@ (8001970 <HAL_RCC_OscConfig+0x334>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d014      	beq.n	8001728 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb31 	bl	8000d64 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fb2c 	bl	8000d64 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e28d      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	4b93      	ldr	r3, [pc, #588]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	029b      	lsls	r3, r3, #10
 8001722:	4013      	ands	r3, r2
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xcc>
 8001726:	e015      	b.n	8001754 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fb1c 	bl	8000d64 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001732:	f7ff fb17 	bl	8000d64 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	@ 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e278      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001744:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0xf6>
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d100      	bne.n	8001760 <HAL_RCC_OscConfig+0x124>
 800175e:	e099      	b.n	8001894 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001760:	4b81      	ldr	r3, [pc, #516]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2238      	movs	r2, #56	@ 0x38
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176a:	4b7f      	ldr	r3, [pc, #508]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b10      	cmp	r3, #16
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x144>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d002      	beq.n	8001786 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d135      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001786:	4b78      	ldr	r3, [pc, #480]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4013      	ands	r3, r2
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x162>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e24b      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b72      	ldr	r3, [pc, #456]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a74      	ldr	r2, [pc, #464]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	021a      	lsls	r2, r3, #8
 80017ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d112      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6e      	ldr	r2, [pc, #440]	@ (8001978 <HAL_RCC_OscConfig+0x33c>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017ce:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0adb      	lsrs	r3, r3, #11
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a68      	ldr	r2, [pc, #416]	@ (800197c <HAL_RCC_OscConfig+0x340>)
 80017da:	40da      	lsrs	r2, r3
 80017dc:	4b68      	ldr	r3, [pc, #416]	@ (8001980 <HAL_RCC_OscConfig+0x344>)
 80017de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <HAL_RCC_OscConfig+0x348>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fa61 	bl	8000cac <HAL_InitTick>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d051      	beq.n	8001892 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e221      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d030      	beq.n	800185c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001978 <HAL_RCC_OscConfig+0x33c>)
 8001800:	4013      	ands	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	4b57      	ldr	r3, [pc, #348]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800180e:	4b56      	ldr	r3, [pc, #344]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b55      	ldr	r3, [pc, #340]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0049      	lsls	r1, r1, #1
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff faa2 	bl	8000d64 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fa9d 	bl	8000d64 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1fe      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a4a      	ldr	r2, [pc, #296]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800184a:	4013      	ands	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	021a      	lsls	r2, r3, #8
 8001854:	4b44      	ldr	r3, [pc, #272]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	e01b      	b.n	8001894 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800185c:	4b42      	ldr	r3, [pc, #264]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001862:	4949      	ldr	r1, [pc, #292]	@ (8001988 <HAL_RCC_OscConfig+0x34c>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fa7c 	bl	8000d64 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fa77 	bl	8000d64 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1d8      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001884:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x236>
 8001890:	e000      	b.n	8001894 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001892:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2208      	movs	r2, #8
 800189a:	4013      	ands	r3, r2
 800189c:	d047      	beq.n	800192e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800189e:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2238      	movs	r2, #56	@ 0x38
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b18      	cmp	r3, #24
 80018a8:	d10a      	bne.n	80018c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d03c      	beq.n	800192e <HAL_RCC_OscConfig+0x2f2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d138      	bne.n	800192e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e1ba      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d019      	beq.n	80018fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa46 	bl	8000d64 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff fa41 	bl	8000d64 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1a2      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d0f1      	beq.n	80018de <HAL_RCC_OscConfig+0x2a2>
 80018fa:	e018      	b.n	800192e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fa2c 	bl	8000d64 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff fa27 	bl	8000d64 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e188      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2204      	movs	r2, #4
 8001934:	4013      	ands	r3, r2
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x2fe>
 8001938:	e0c6      	b.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	231f      	movs	r3, #31
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2238      	movs	r2, #56	@ 0x38
 8001948:	4013      	ands	r3, r2
 800194a:	2b20      	cmp	r3, #32
 800194c:	d11e      	bne.n	800198c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d100      	bne.n	800195a <HAL_RCC_OscConfig+0x31e>
 8001958:	e0b6      	b.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d000      	beq.n	8001964 <HAL_RCC_OscConfig+0x328>
 8001962:	e0b1      	b.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e166      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
 8001968:	40021000 	.word	0x40021000
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	fffbffff 	.word	0xfffbffff
 8001974:	ffff80ff 	.word	0xffff80ff
 8001978:	ffffc7ff 	.word	0xffffc7ff
 800197c:	00f42400 	.word	0x00f42400
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004
 8001988:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800198c:	4bac      	ldr	r3, [pc, #688]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 800198e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x360>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x362>
 800199c:	2300      	movs	r3, #0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d011      	beq.n	80019c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4ba7      	ldr	r3, [pc, #668]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 80019a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	0549      	lsls	r1, r1, #21
 80019ac:	430a      	orrs	r2, r1
 80019ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 80019b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	055b      	lsls	r3, r3, #21
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019be:	231f      	movs	r3, #31
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	4b9f      	ldr	r3, [pc, #636]	@ (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d2:	4b9c      	ldr	r3, [pc, #624]	@ (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b9b      	ldr	r3, [pc, #620]	@ (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019d8:	2180      	movs	r1, #128	@ 0x80
 80019da:	0049      	lsls	r1, r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f9c0 	bl	8000d64 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff f9bb 	bl	8000d64 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e11c      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	4b91      	ldr	r3, [pc, #580]	@ (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3e2>
 8001a10:	4b8b      	ldr	r3, [pc, #556]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a14:	4b8a      	ldr	r3, [pc, #552]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x41c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x404>
 8001a26:	4b86      	ldr	r3, [pc, #536]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a2a:	4b85      	ldr	r3, [pc, #532]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a32:	4b83      	ldr	r3, [pc, #524]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a36:	4b82      	ldr	r3, [pc, #520]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0x41c>
 8001a40:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a44:	4b7e      	ldr	r3, [pc, #504]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a50:	4b7b      	ldr	r3, [pc, #492]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a52:	2104      	movs	r1, #4
 8001a54:	438a      	bics	r2, r1
 8001a56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d014      	beq.n	8001a8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f980 	bl	8000d64 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a68:	e009      	b.n	8001a7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f97b 	bl	8000d64 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4a74      	ldr	r2, [pc, #464]	@ (8001c48 <HAL_RCC_OscConfig+0x60c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0db      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	4b70      	ldr	r3, [pc, #448]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x42e>
 8001a88:	e013      	b.n	8001ab2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f96b 	bl	8000d64 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff f966 	bl	8000d64 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8001c48 <HAL_RCC_OscConfig+0x60c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0c6      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ab2:	231f      	movs	r3, #31
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001ac2:	4962      	ldr	r1, [pc, #392]	@ (8001c4c <HAL_RCC_OscConfig+0x610>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x496>
 8001ad0:	e0b0      	b.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	@ 0x38
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4a4>
 8001ade:	e078      	b.n	8001bd2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d153      	bne.n	8001b90 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b55      	ldr	r3, [pc, #340]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b54      	ldr	r3, [pc, #336]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001aee:	4958      	ldr	r1, [pc, #352]	@ (8001c50 <HAL_RCC_OscConfig+0x614>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f936 	bl	8000d64 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f931 	bl	8000d64 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e092      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	4b4b      	ldr	r3, [pc, #300]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	049b      	lsls	r3, r3, #18
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b48      	ldr	r3, [pc, #288]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	@ (8001c54 <HAL_RCC_OscConfig+0x618>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	431a      	orrs	r2, r3
 8001b44:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b50:	2180      	movs	r1, #128	@ 0x80
 8001b52:	0449      	lsls	r1, r1, #17
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b5e:	2180      	movs	r1, #128	@ 0x80
 8001b60:	0549      	lsls	r1, r1, #21
 8001b62:	430a      	orrs	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff f8fd 	bl	8000d64 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f8f8 	bl	8000d64 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e059      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	049b      	lsls	r3, r3, #18
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x534>
 8001b8e:	e051      	b.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b96:	492e      	ldr	r1, [pc, #184]	@ (8001c50 <HAL_RCC_OscConfig+0x614>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f8e2 	bl	8000d64 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f8dd 	bl	8000d64 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e03e      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	049b      	lsls	r3, r3, #18
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001bca:	4923      	ldr	r1, [pc, #140]	@ (8001c58 <HAL_RCC_OscConfig+0x61c>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	e030      	b.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e02b      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2203      	movs	r2, #3
 8001be8:	401a      	ands	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2270      	movs	r2, #112	@ 0x70
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d117      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	23fe      	movs	r3, #254	@ 0xfe
 8001c04:	01db      	lsls	r3, r3, #7
 8001c06:	401a      	ands	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	23f8      	movs	r3, #248	@ 0xf8
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	0f5b      	lsrs	r3, r3, #29
 8001c26:	075a      	lsls	r2, r3, #29
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b008      	add	sp, #32
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	00001388 	.word	0x00001388
 8001c4c:	efffffff 	.word	0xefffffff
 8001c50:	feffffff 	.word	0xfeffffff
 8001c54:	1fc1808c 	.word	0x1fc1808c
 8001c58:	effefffc 	.word	0xeffefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e9      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b76      	ldr	r3, [pc, #472]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d91e      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2207      	movs	r2, #7
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b70      	ldr	r3, [pc, #448]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f868 	bl	8000d64 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7ff f863 	bl	8000d64 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0ca      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cae:	4b67      	ldr	r3, [pc, #412]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1ee      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d006      	beq.n	8001cde <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cd0:	4b60      	ldr	r3, [pc, #384]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	21e0      	movs	r1, #224	@ 0xe0
 8001cd8:	01c9      	lsls	r1, r1, #7
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cde:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d057      	beq.n	8001dac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d04:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d12b      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e097      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	049b      	lsls	r3, r3, #18
 8001d24:	4013      	ands	r3, r2
 8001d26:	d11f      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e08b      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07f      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4c:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e074      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e06d      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d68:	4b3a      	ldr	r3, [pc, #232]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7c:	f7fe fff2 	bl	8000d64 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7fe ffed 	bl	8000d64 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a2f      	ldr	r2, [pc, #188]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e054      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2238      	movs	r2, #56	@ 0x38
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1ec      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d21e      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dcc:	f7fe ffca 	bl	8000d64 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd6:	f7fe ffc5 	bl	8000d64 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e02c      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4a15      	ldr	r2, [pc, #84]	@ (8001e5c <HAL_RCC_ClockConfig+0x200>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e16:	f000 f829 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e1a:	0001      	movs	r1, r0
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	220f      	movs	r2, #15
 8001e24:	401a      	ands	r2, r3
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <HAL_RCC_ClockConfig+0x204>)
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	58d3      	ldr	r3, [r2, r3]
 8001e2c:	221f      	movs	r2, #31
 8001e2e:	4013      	ands	r3, r2
 8001e30:	000a      	movs	r2, r1
 8001e32:	40da      	lsrs	r2, r3
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_RCC_ClockConfig+0x208>)
 8001e36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_ClockConfig+0x20c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7fe ff35 	bl	8000cac <HAL_InitTick>
 8001e42:	0003      	movs	r3, r0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	00001388 	.word	0x00001388
 8001e54:	40021000 	.word	0x40021000
 8001e58:	fffff0ff 	.word	0xfffff0ff
 8001e5c:	ffff8fff 	.word	0xffff8fff
 8001e60:	08005700 	.word	0x08005700
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2238      	movs	r2, #56	@ 0x38
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d10f      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e7c:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0adb      	lsrs	r3, r3, #11
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	4835      	ldr	r0, [pc, #212]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e92:	f7fe f935 	bl	8000100 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e05d      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	@ 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea8:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e054      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eae:	4b2d      	ldr	r3, [pc, #180]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2238      	movs	r2, #56	@ 0x38
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d138      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	2207      	movs	r2, #7
 8001ecc:	4013      	ands	r3, r2
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	4824      	ldr	r0, [pc, #144]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x100>)
 8001edc:	f7fe f910 	bl	8000100 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	227f      	movs	r2, #127	@ 0x7f
 8001eec:	4013      	ands	r3, r2
 8001eee:	434b      	muls	r3, r1
 8001ef0:	617b      	str	r3, [r7, #20]
        break;
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	481c      	ldr	r0, [pc, #112]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ef8:	f7fe f902 	bl	8000100 <__udivsi3>
 8001efc:	0003      	movs	r3, r0
 8001efe:	0019      	movs	r1, r3
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	227f      	movs	r2, #127	@ 0x7f
 8001f08:	4013      	ands	r3, r2
 8001f0a:	434b      	muls	r3, r1
 8001f0c:	617b      	str	r3, [r7, #20]
        break;
 8001f0e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0f5b      	lsrs	r3, r3, #29
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	f7fe f8ed 	bl	8000100 <__udivsi3>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2238      	movs	r2, #56	@ 0x38
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d103      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2238      	movs	r2, #56	@ 0x38
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b18      	cmp	r3, #24
 8001f4a:	d103      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f4c:	23fa      	movs	r3, #250	@ 0xfa
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e001      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f58:	693b      	ldr	r3, [r7, #16]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200

08001f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b02      	ldr	r3, [pc, #8]	@ (8001f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	20000000 	.word	0x20000000

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f88:	f7ff fff2 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f8c:	0004      	movs	r4, r0
 8001f8e:	f7ff fb49 	bl	8001624 <LL_RCC_GetAPB1Prescaler>
 8001f92:	0003      	movs	r3, r0
 8001f94:	0b1a      	lsrs	r2, r3, #12
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	58d3      	ldr	r3, [r2, r3]
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	40dc      	lsrs	r4, r3
 8001fa2:	0023      	movs	r3, r4
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	08005740 	.word	0x08005740

08001fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e04a      	b.n	8002058 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223d      	movs	r2, #61	@ 0x3d
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223c      	movs	r2, #60	@ 0x3c
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7fe fd41 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	223d      	movs	r2, #61	@ 0x3d
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f000 fe27 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2248      	movs	r2, #72	@ 0x48
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223e      	movs	r2, #62	@ 0x3e
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223f      	movs	r2, #63	@ 0x3f
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2240      	movs	r2, #64	@ 0x40
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	@ 0x41
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2242      	movs	r2, #66	@ 0x42
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2243      	movs	r2, #67	@ 0x43
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2244      	movs	r2, #68	@ 0x44
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2245      	movs	r2, #69	@ 0x45
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2246      	movs	r2, #70	@ 0x46
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2247      	movs	r2, #71	@ 0x47
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223d      	movs	r2, #61	@ 0x3d
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e04a      	b.n	8002108 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223d      	movs	r2, #61	@ 0x3d
 8002076:	5c9b      	ldrb	r3, [r3, r2]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223c      	movs	r2, #60	@ 0x3c
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f841 	bl	8002110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223d      	movs	r2, #61	@ 0x3d
 8002092:	2102      	movs	r1, #2
 8002094:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	0019      	movs	r1, r3
 80020a0:	0010      	movs	r0, r2
 80020a2:	f000 fdcf 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2248      	movs	r2, #72	@ 0x48
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223e      	movs	r2, #62	@ 0x3e
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	223f      	movs	r2, #63	@ 0x3f
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2240      	movs	r2, #64	@ 0x40
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	@ 0x41
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2242      	movs	r2, #66	@ 0x42
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2243      	movs	r2, #67	@ 0x43
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2244      	movs	r2, #68	@ 0x44
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2245      	movs	r2, #69	@ 0x45
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2246      	movs	r2, #70	@ 0x46
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2247      	movs	r2, #71	@ 0x47
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223d      	movs	r2, #61	@ 0x3d
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002118:	46c0      	nop			@ (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	001a      	movs	r2, r3
 800212e:	1cbb      	adds	r3, r7, #2
 8002130:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	2317      	movs	r3, #23
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_TIM_PWM_Start_DMA+0x32>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	223e      	movs	r2, #62	@ 0x3e
 8002144:	5c9b      	ldrb	r3, [r3, r2]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3b02      	subs	r3, #2
 800214a:	425a      	negs	r2, r3
 800214c:	4153      	adcs	r3, r2
 800214e:	b2db      	uxtb	r3, r3
 8002150:	e037      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d108      	bne.n	800216a <HAL_TIM_PWM_Start_DMA+0x4a>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	223f      	movs	r2, #63	@ 0x3f
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3b02      	subs	r3, #2
 8002162:	425a      	negs	r2, r3
 8002164:	4153      	adcs	r3, r2
 8002166:	b2db      	uxtb	r3, r3
 8002168:	e02b      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d108      	bne.n	8002182 <HAL_TIM_PWM_Start_DMA+0x62>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3b02      	subs	r3, #2
 800217a:	425a      	negs	r2, r3
 800217c:	4153      	adcs	r3, r2
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e01f      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d108      	bne.n	800219a <HAL_TIM_PWM_Start_DMA+0x7a>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2241      	movs	r2, #65	@ 0x41
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3b02      	subs	r3, #2
 8002192:	425a      	negs	r2, r3
 8002194:	4153      	adcs	r3, r2
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e013      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b10      	cmp	r3, #16
 800219e:	d108      	bne.n	80021b2 <HAL_TIM_PWM_Start_DMA+0x92>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2242      	movs	r2, #66	@ 0x42
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3b02      	subs	r3, #2
 80021aa:	425a      	negs	r2, r3
 80021ac:	4153      	adcs	r3, r2
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e007      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2243      	movs	r2, #67	@ 0x43
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3b02      	subs	r3, #2
 80021bc:	425a      	negs	r2, r3
 80021be:	4153      	adcs	r3, r2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	e183      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_TIM_PWM_Start_DMA+0xc2>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	223e      	movs	r2, #62	@ 0x3e
 80021d4:	5c9b      	ldrb	r3, [r3, r2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	425a      	negs	r2, r3
 80021dc:	4153      	adcs	r3, r2
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e037      	b.n	8002252 <HAL_TIM_PWM_Start_DMA+0x132>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d108      	bne.n	80021fa <HAL_TIM_PWM_Start_DMA+0xda>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	223f      	movs	r2, #63	@ 0x3f
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	425a      	negs	r2, r3
 80021f4:	4153      	adcs	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e02b      	b.n	8002252 <HAL_TIM_PWM_Start_DMA+0x132>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d108      	bne.n	8002212 <HAL_TIM_PWM_Start_DMA+0xf2>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	@ 0x40
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	425a      	negs	r2, r3
 800220c:	4153      	adcs	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	e01f      	b.n	8002252 <HAL_TIM_PWM_Start_DMA+0x132>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d108      	bne.n	800222a <HAL_TIM_PWM_Start_DMA+0x10a>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2241      	movs	r2, #65	@ 0x41
 800221c:	5c9b      	ldrb	r3, [r3, r2]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	425a      	negs	r2, r3
 8002224:	4153      	adcs	r3, r2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	e013      	b.n	8002252 <HAL_TIM_PWM_Start_DMA+0x132>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b10      	cmp	r3, #16
 800222e:	d108      	bne.n	8002242 <HAL_TIM_PWM_Start_DMA+0x122>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2242      	movs	r2, #66	@ 0x42
 8002234:	5c9b      	ldrb	r3, [r3, r2]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	425a      	negs	r2, r3
 800223c:	4153      	adcs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	e007      	b.n	8002252 <HAL_TIM_PWM_Start_DMA+0x132>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2243      	movs	r2, #67	@ 0x43
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	425a      	negs	r2, r3
 800224e:	4153      	adcs	r3, r2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d035      	beq.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_TIM_PWM_Start_DMA+0x144>
 800225c:	1cbb      	adds	r3, r7, #2
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e134      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <HAL_TIM_PWM_Start_DMA+0x158>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	223e      	movs	r2, #62	@ 0x3e
 8002272:	2102      	movs	r1, #2
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	e026      	b.n	80022c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d104      	bne.n	8002288 <HAL_TIM_PWM_Start_DMA+0x168>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	223f      	movs	r2, #63	@ 0x3f
 8002282:	2102      	movs	r1, #2
 8002284:	5499      	strb	r1, [r3, r2]
 8002286:	e01e      	b.n	80022c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d104      	bne.n	8002298 <HAL_TIM_PWM_Start_DMA+0x178>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2240      	movs	r2, #64	@ 0x40
 8002292:	2102      	movs	r1, #2
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	e016      	b.n	80022c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d104      	bne.n	80022a8 <HAL_TIM_PWM_Start_DMA+0x188>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2241      	movs	r2, #65	@ 0x41
 80022a2:	2102      	movs	r1, #2
 80022a4:	5499      	strb	r1, [r3, r2]
 80022a6:	e00e      	b.n	80022c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d104      	bne.n	80022b8 <HAL_TIM_PWM_Start_DMA+0x198>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2242      	movs	r2, #66	@ 0x42
 80022b2:	2102      	movs	r1, #2
 80022b4:	5499      	strb	r1, [r3, r2]
 80022b6:	e006      	b.n	80022c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2243      	movs	r2, #67	@ 0x43
 80022bc:	2102      	movs	r1, #2
 80022be:	5499      	strb	r1, [r3, r2]
 80022c0:	e001      	b.n	80022c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e105      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	d100      	bne.n	80022ce <HAL_TIM_PWM_Start_DMA+0x1ae>
 80022cc:	e080      	b.n	80023d0 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d900      	bls.n	80022d6 <HAL_TIM_PWM_Start_DMA+0x1b6>
 80022d4:	e0a1      	b.n	800241a <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d054      	beq.n	8002386 <HAL_TIM_PWM_Start_DMA+0x266>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d900      	bls.n	80022e4 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80022e2:	e09a      	b.n	800241a <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d025      	beq.n	800233c <HAL_TIM_PWM_Start_DMA+0x21c>
 80022f0:	e093      	b.n	800241a <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	4a79      	ldr	r2, [pc, #484]	@ (80024dc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80022f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	4a78      	ldr	r2, [pc, #480]	@ (80024e0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	4a77      	ldr	r2, [pc, #476]	@ (80024e4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002308:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3334      	adds	r3, #52	@ 0x34
 8002316:	001a      	movs	r2, r3
 8002318:	1cbb      	adds	r3, r7, #2
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	f7fe fe2e 	bl	8000f7c <HAL_DMA_Start_IT>
 8002320:	1e03      	subs	r3, r0, #0
 8002322:	d001      	beq.n	8002328 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0d4      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0089      	lsls	r1, r1, #2
 8002336:	430a      	orrs	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
      break;
 800233a:	e073      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	4a66      	ldr	r2, [pc, #408]	@ (80024dc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	4a65      	ldr	r2, [pc, #404]	@ (80024e0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	4a64      	ldr	r2, [pc, #400]	@ (80024e4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002352:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3338      	adds	r3, #56	@ 0x38
 8002360:	001a      	movs	r2, r3
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	f7fe fe09 	bl	8000f7c <HAL_DMA_Start_IT>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0af      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	00c9      	lsls	r1, r1, #3
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]
      break;
 8002384:	e04e      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	4a53      	ldr	r2, [pc, #332]	@ (80024e0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	333c      	adds	r3, #60	@ 0x3c
 80023aa:	001a      	movs	r2, r3
 80023ac:	1cbb      	adds	r3, r7, #2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f7fe fde4 	bl	8000f7c <HAL_DMA_Start_IT>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d001      	beq.n	80023bc <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e08a      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	0109      	lsls	r1, r1, #4
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
      break;
 80023ce:	e029      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	4a41      	ldr	r2, [pc, #260]	@ (80024dc <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	4a40      	ldr	r2, [pc, #256]	@ (80024e0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	4a3f      	ldr	r2, [pc, #252]	@ (80024e4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80023e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3340      	adds	r3, #64	@ 0x40
 80023f4:	001a      	movs	r2, r3
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	f7fe fdbf 	bl	8000f7c <HAL_DMA_Start_IT>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d001      	beq.n	8002406 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e065      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2180      	movs	r1, #128	@ 0x80
 8002412:	0149      	lsls	r1, r1, #5
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]
      break;
 8002418:	e004      	b.n	8002424 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800241a:	2317      	movs	r3, #23
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
      break;
 8002422:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d14e      	bne.n	80024cc <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	2201      	movs	r2, #1
 8002436:	0018      	movs	r0, r3
 8002438:	f000 ffb6 	bl	80033a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a29      	ldr	r2, [pc, #164]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_TIM_PWM_Start_DMA+0x33a>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_TIM_PWM_Start_DMA+0x33a>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a26      	ldr	r2, [pc, #152]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_TIM_PWM_Start_DMA+0x33e>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_TIM_PWM_Start_DMA+0x340>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	0209      	lsls	r1, r1, #8
 8002472:	430a      	orrs	r2, r1
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_TIM_PWM_Start_DMA+0x36a>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1b      	ldr	r2, [pc, #108]	@ (80024f4 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d116      	bne.n	80024b8 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d016      	beq.n	80024ca <HAL_TIM_PWM_Start_DMA+0x3aa>
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d011      	beq.n	80024ca <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	e008      	b.n	80024ca <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2101      	movs	r1, #1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e000      	b.n	80024cc <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80024cc:	2317      	movs	r3, #23
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b006      	add	sp, #24
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	08002b31 	.word	0x08002b31
 80024e0:	08002bdb 	.word	0x08002bdb
 80024e4:	08002a9d 	.word	0x08002a9d
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800
 80024f4:	40000400 	.word	0x40000400
 80024f8:	00010007 	.word	0x00010007

080024fc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	230f      	movs	r3, #15
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d039      	beq.n	8002588 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d844      	bhi.n	80025a4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d025      	beq.n	800256c <HAL_TIM_PWM_Stop_DMA+0x70>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d83e      	bhi.n	80025a4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_TIM_PWM_Stop_DMA+0x38>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d00e      	beq.n	8002550 <HAL_TIM_PWM_Stop_DMA+0x54>
 8002532:	e037      	b.n	80025a4 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	495a      	ldr	r1, [pc, #360]	@ (80026a8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8002540:	400a      	ands	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	0018      	movs	r0, r3
 800254a:	f7fe fdff 	bl	800114c <HAL_DMA_Abort_IT>
      break;
 800254e:	e02e      	b.n	80025ae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4954      	ldr	r1, [pc, #336]	@ (80026ac <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 800255c:	400a      	ands	r2, r1
 800255e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	0018      	movs	r0, r3
 8002566:	f7fe fdf1 	bl	800114c <HAL_DMA_Abort_IT>
      break;
 800256a:	e020      	b.n	80025ae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	494e      	ldr	r1, [pc, #312]	@ (80026b0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002578:	400a      	ands	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe fde3 	bl	800114c <HAL_DMA_Abort_IT>
      break;
 8002586:	e012      	b.n	80025ae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4948      	ldr	r1, [pc, #288]	@ (80026b4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002594:	400a      	ands	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe fdd5 	bl	800114c <HAL_DMA_Abort_IT>
      break;
 80025a2:	e004      	b.n	80025ae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80025a4:	230f      	movs	r3, #15
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80025ae:	230f      	movs	r3, #15
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d000      	beq.n	80025ba <HAL_TIM_PWM_Stop_DMA+0xbe>
 80025b8:	e06e      	b.n	8002698 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6839      	ldr	r1, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fef0 	bl	80033a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3a      	ldr	r2, [pc, #232]	@ (80026b8 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_TIM_PWM_Stop_DMA+0xea>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a39      	ldr	r2, [pc, #228]	@ (80026bc <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_PWM_Stop_DMA+0xea>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a37      	ldr	r2, [pc, #220]	@ (80026c0 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_PWM_Stop_DMA+0xee>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_TIM_PWM_Stop_DMA+0xf0>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a33      	ldr	r2, [pc, #204]	@ (80026c4 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	d10d      	bne.n	8002618 <HAL_TIM_PWM_Stop_DMA+0x11c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a31      	ldr	r2, [pc, #196]	@ (80026c8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002604:	4013      	ands	r3, r2
 8002606:	d107      	bne.n	8002618 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	492e      	ldr	r1, [pc, #184]	@ (80026cc <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002614:	400a      	ands	r2, r1
 8002616:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a29      	ldr	r2, [pc, #164]	@ (80026c4 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002620:	4013      	ands	r3, r2
 8002622:	d10d      	bne.n	8002640 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800262c:	4013      	ands	r3, r2
 800262e:	d107      	bne.n	8002640 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	438a      	bics	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	223e      	movs	r2, #62	@ 0x3e
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]
 800264e:	e023      	b.n	8002698 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d104      	bne.n	8002660 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223f      	movs	r2, #63	@ 0x3f
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]
 800265e:	e01b      	b.n	8002698 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b08      	cmp	r3, #8
 8002664:	d104      	bne.n	8002670 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2240      	movs	r2, #64	@ 0x40
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]
 800266e:	e013      	b.n	8002698 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d104      	bne.n	8002680 <HAL_TIM_PWM_Stop_DMA+0x184>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2241      	movs	r2, #65	@ 0x41
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]
 800267e:	e00b      	b.n	8002698 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d104      	bne.n	8002690 <HAL_TIM_PWM_Stop_DMA+0x194>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2242      	movs	r2, #66	@ 0x42
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]
 800268e:	e003      	b.n	8002698 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2243      	movs	r2, #67	@ 0x43
 8002694:	2101      	movs	r1, #1
 8002696:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002698:	230f      	movs	r3, #15
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	fffffdff 	.word	0xfffffdff
 80026ac:	fffffbff 	.word	0xfffffbff
 80026b0:	fffff7ff 	.word	0xfffff7ff
 80026b4:	ffffefff 	.word	0xffffefff
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40014400 	.word	0x40014400
 80026c0:	40014800 	.word	0x40014800
 80026c4:	00001111 	.word	0x00001111
 80026c8:	00000444 	.word	0x00000444
 80026cc:	ffff7fff 	.word	0xffff7fff

080026d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026dc:	2317      	movs	r3, #23
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	223c      	movs	r2, #60	@ 0x3c
 80026e8:	5c9b      	ldrb	r3, [r3, r2]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e0e5      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	223c      	movs	r2, #60	@ 0x3c
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b14      	cmp	r3, #20
 80026fe:	d900      	bls.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002700:	e0d1      	b.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	4b70      	ldr	r3, [pc, #448]	@ (80028c8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002708:	18d3      	adds	r3, r2, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fb0e 	bl	8002d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2108      	movs	r1, #8
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2104      	movs	r1, #4
 8002738:	438a      	bics	r2, r1
 800273a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	619a      	str	r2, [r3, #24]
      break;
 800274e:	e0af      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fb6d 	bl	8002e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2180      	movs	r1, #128	@ 0x80
 800276a:	0109      	lsls	r1, r1, #4
 800276c:	430a      	orrs	r2, r1
 800276e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4954      	ldr	r1, [pc, #336]	@ (80028cc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800277c:	400a      	ands	r2, r1
 800277e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6999      	ldr	r1, [r3, #24]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	021a      	lsls	r2, r3, #8
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	619a      	str	r2, [r3, #24]
      break;
 8002794:	e08c      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 fbc8 	bl	8002f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2108      	movs	r1, #8
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2104      	movs	r1, #4
 80027c0:	438a      	bics	r2, r1
 80027c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69d9      	ldr	r1, [r3, #28]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	61da      	str	r2, [r3, #28]
      break;
 80027d6:	e06b      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fc29 	bl	8003038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0109      	lsls	r1, r1, #4
 80027f4:	430a      	orrs	r2, r1
 80027f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4932      	ldr	r1, [pc, #200]	@ (80028cc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002804:	400a      	ands	r2, r1
 8002806:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69d9      	ldr	r1, [r3, #28]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	021a      	lsls	r2, r3, #8
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	61da      	str	r2, [r3, #28]
      break;
 800281c:	e048      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	0011      	movs	r1, r2
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fc6a 	bl	8003100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2108      	movs	r1, #8
 8002838:	430a      	orrs	r2, r1
 800283a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2104      	movs	r1, #4
 8002848:	438a      	bics	r2, r1
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800285e:	e027      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fca3 	bl	80031b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2180      	movs	r1, #128	@ 0x80
 800287a:	0109      	lsls	r1, r1, #4
 800287c:	430a      	orrs	r2, r1
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4910      	ldr	r1, [pc, #64]	@ (80028cc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800288c:	400a      	ands	r2, r1
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	021a      	lsls	r2, r3, #8
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80028a4:	e004      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80028a6:	2317      	movs	r3, #23
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
      break;
 80028ae:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	223c      	movs	r2, #60	@ 0x3c
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]

  return status;
 80028b8:	2317      	movs	r3, #23
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b006      	add	sp, #24
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	08005760 	.word	0x08005760
 80028cc:	fffffbff 	.word	0xfffffbff

080028d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	230f      	movs	r3, #15
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223c      	movs	r2, #60	@ 0x3c
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x20>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e0bc      	b.n	8002a6a <HAL_TIM_ConfigClockSource+0x19a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	223c      	movs	r2, #60	@ 0x3c
 80028f4:	2101      	movs	r1, #1
 80028f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	223d      	movs	r2, #61	@ 0x3d
 80028fc:	2102      	movs	r1, #2
 80028fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4a5a      	ldr	r2, [pc, #360]	@ (8002a74 <HAL_TIM_ConfigClockSource+0x1a4>)
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4a59      	ldr	r2, [pc, #356]	@ (8002a78 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2280      	movs	r2, #128	@ 0x80
 8002926:	0192      	lsls	r2, r2, #6
 8002928:	4293      	cmp	r3, r2
 800292a:	d040      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xde>
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	0192      	lsls	r2, r2, #6
 8002930:	4293      	cmp	r3, r2
 8002932:	d900      	bls.n	8002936 <HAL_TIM_ConfigClockSource+0x66>
 8002934:	e088      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002936:	2280      	movs	r2, #128	@ 0x80
 8002938:	0152      	lsls	r2, r2, #5
 800293a:	4293      	cmp	r3, r2
 800293c:	d100      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x70>
 800293e:	e088      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x182>
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	0152      	lsls	r2, r2, #5
 8002944:	4293      	cmp	r3, r2
 8002946:	d900      	bls.n	800294a <HAL_TIM_ConfigClockSource+0x7a>
 8002948:	e07e      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800294a:	2b70      	cmp	r3, #112	@ 0x70
 800294c:	d018      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0xb0>
 800294e:	d900      	bls.n	8002952 <HAL_TIM_ConfigClockSource+0x82>
 8002950:	e07a      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002952:	2b60      	cmp	r3, #96	@ 0x60
 8002954:	d04f      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x126>
 8002956:	d900      	bls.n	800295a <HAL_TIM_ConfigClockSource+0x8a>
 8002958:	e076      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800295a:	2b50      	cmp	r3, #80	@ 0x50
 800295c:	d03b      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x106>
 800295e:	d900      	bls.n	8002962 <HAL_TIM_ConfigClockSource+0x92>
 8002960:	e072      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d057      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x146>
 8002966:	d900      	bls.n	800296a <HAL_TIM_ConfigClockSource+0x9a>
 8002968:	e06e      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 800296a:	2b30      	cmp	r3, #48	@ 0x30
 800296c:	d063      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800296e:	d86b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d060      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 8002974:	d868      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d05d      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800297a:	2b10      	cmp	r3, #16
 800297c:	d05b      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x166>
 800297e:	e063      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002990:	f000 fcea 	bl	8003368 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2277      	movs	r2, #119	@ 0x77
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e052      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029be:	f000 fcd3 	bl	8003368 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2180      	movs	r1, #128	@ 0x80
 80029ce:	01c9      	lsls	r1, r1, #7
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
      break;
 80029d4:	e03e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	001a      	movs	r2, r3
 80029e4:	f000 fc44 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2150      	movs	r1, #80	@ 0x50
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fc9e 	bl	8003330 <TIM_ITRx_SetConfig>
      break;
 80029f4:	e02e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	001a      	movs	r2, r3
 8002a04:	f000 fc62 	bl	80032cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2160      	movs	r1, #96	@ 0x60
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fc8e 	bl	8003330 <TIM_ITRx_SetConfig>
      break;
 8002a14:	e01e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	001a      	movs	r2, r3
 8002a24:	f000 fc24 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2140      	movs	r1, #64	@ 0x40
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fc7e 	bl	8003330 <TIM_ITRx_SetConfig>
      break;
 8002a34:	e00e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f000 fc75 	bl	8003330 <TIM_ITRx_SetConfig>
      break;
 8002a46:	e005      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a48:	230f      	movs	r3, #15
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
      break;
 8002a50:	e000      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a52:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	223d      	movs	r2, #61	@ 0x3d
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	223c      	movs	r2, #60	@ 0x3c
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]

  return status;
 8002a64:	230f      	movs	r3, #15
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	ffceff88 	.word	0xffceff88
 8002a78:	ffff00ff 	.word	0xffff00ff

08002a7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	223e      	movs	r2, #62	@ 0x3e
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]
 8002ac2:	e02a      	b.n	8002b1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d107      	bne.n	8002ade <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	223f      	movs	r2, #63	@ 0x3f
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]
 8002adc:	e01d      	b.n	8002b1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2204      	movs	r2, #4
 8002aec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2240      	movs	r2, #64	@ 0x40
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
 8002af6:	e010      	b.n	8002b1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d107      	bne.n	8002b12 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2208      	movs	r2, #8
 8002b06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2241      	movs	r2, #65	@ 0x41
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	5499      	strb	r1, [r3, r2]
 8002b10:	e003      	b.n	8002b1a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	223d      	movs	r2, #61	@ 0x3d
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7ff ffb5 	bl	8002a8c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b004      	add	sp, #16
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d10b      	bne.n	8002b60 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d136      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	223e      	movs	r2, #62	@ 0x3e
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]
 8002b5e:	e031      	b.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10b      	bne.n	8002b82 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d125      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	223f      	movs	r2, #63	@ 0x3f
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	5499      	strb	r1, [r3, r2]
 8002b80:	e020      	b.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d10b      	bne.n	8002ba4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d114      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2240      	movs	r2, #64	@ 0x40
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
 8002ba2:	e00f      	b.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10a      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2241      	movs	r2, #65	@ 0x41
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fd fb54 	bl	8000274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	771a      	strb	r2, [r3, #28]
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d103      	bne.n	8002bfa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	771a      	strb	r2, [r3, #28]
 8002bf8:	e019      	b.n	8002c2e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d103      	bne.n	8002c0c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	771a      	strb	r2, [r3, #28]
 8002c0a:	e010      	b.n	8002c2e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d103      	bne.n	8002c1e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	771a      	strb	r2, [r3, #28]
 8002c1c:	e007      	b.n	8002c2e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d102      	bne.n	8002c2e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff ff23 	bl	8002a7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a32      	ldr	r2, [pc, #200]	@ (8002d20 <TIM_Base_SetConfig+0xdc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x20>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	@ (8002d24 <TIM_Base_SetConfig+0xe0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2270      	movs	r2, #112	@ 0x70
 8002c68:	4393      	bics	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a29      	ldr	r2, [pc, #164]	@ (8002d20 <TIM_Base_SetConfig+0xdc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00f      	beq.n	8002c9e <TIM_Base_SetConfig+0x5a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a28      	ldr	r2, [pc, #160]	@ (8002d24 <TIM_Base_SetConfig+0xe0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_Base_SetConfig+0x5a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <TIM_Base_SetConfig+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_Base_SetConfig+0x5a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a26      	ldr	r2, [pc, #152]	@ (8002d2c <TIM_Base_SetConfig+0xe8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_Base_SetConfig+0x5a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a25      	ldr	r2, [pc, #148]	@ (8002d30 <TIM_Base_SetConfig+0xec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <TIM_Base_SetConfig+0xf0>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <TIM_Base_SetConfig+0xdc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <TIM_Base_SetConfig+0xaa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <TIM_Base_SetConfig+0xe8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0xaa>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <TIM_Base_SetConfig+0xec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d103      	bne.n	8002cf6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4393      	bics	r3, r2
 8002d10:	001a      	movs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
  }
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40002000 	.word	0x40002000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800
 8002d34:	fffffcff 	.word	0xfffffcff

08002d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4393      	bics	r3, r2
 8002d50:	001a      	movs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	@ (8002e20 <TIM_OC1_SetConfig+0xe8>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	4393      	bics	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4393      	bics	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a24      	ldr	r2, [pc, #144]	@ (8002e24 <TIM_OC1_SetConfig+0xec>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <TIM_OC1_SetConfig+0x6e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <TIM_OC1_SetConfig+0xf0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_OC1_SetConfig+0x6e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a22      	ldr	r2, [pc, #136]	@ (8002e2c <TIM_OC1_SetConfig+0xf4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10c      	bne.n	8002dc0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2208      	movs	r2, #8
 8002daa:	4393      	bics	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <TIM_OC1_SetConfig+0xec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_OC1_SetConfig+0xa0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a17      	ldr	r2, [pc, #92]	@ (8002e28 <TIM_OC1_SetConfig+0xf0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_OC1_SetConfig+0xa0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <TIM_OC1_SetConfig+0xf4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d111      	bne.n	8002dfc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <TIM_OC1_SetConfig+0xf8>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <TIM_OC1_SetConfig+0xfc>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	fffeff8f 	.word	0xfffeff8f
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	fffffeff 	.word	0xfffffeff
 8002e34:	fffffdff 	.word	0xfffffdff

08002e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4393      	bics	r3, r2
 8002e50:	001a      	movs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <TIM_OC2_SetConfig+0xe0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <TIM_OC2_SetConfig+0xe4>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2220      	movs	r2, #32
 8002e82:	4393      	bics	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a22      	ldr	r2, [pc, #136]	@ (8002f20 <TIM_OC2_SetConfig+0xe8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2240      	movs	r2, #64	@ 0x40
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <TIM_OC2_SetConfig+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_OC2_SetConfig+0x96>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <TIM_OC2_SetConfig+0xec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_OC2_SetConfig+0x96>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <TIM_OC2_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4a16      	ldr	r2, [pc, #88]	@ (8002f2c <TIM_OC2_SetConfig+0xf4>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	@ (8002f30 <TIM_OC2_SetConfig+0xf8>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b006      	add	sp, #24
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	feff8fff 	.word	0xfeff8fff
 8002f1c:	fffffcff 	.word	0xfffffcff
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800
 8002f2c:	fffffbff 	.word	0xfffffbff
 8002f30:	fffff7ff 	.word	0xfffff7ff

08002f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a31      	ldr	r2, [pc, #196]	@ (8003010 <TIM_OC3_SetConfig+0xdc>)
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <TIM_OC3_SetConfig+0xe0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2203      	movs	r2, #3
 8002f68:	4393      	bics	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <TIM_OC3_SetConfig+0xe4>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	@ (800301c <TIM_OC3_SetConfig+0xe8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10d      	bne.n	8002fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4a22      	ldr	r2, [pc, #136]	@ (8003020 <TIM_OC3_SetConfig+0xec>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <TIM_OC3_SetConfig+0xf0>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800301c <TIM_OC3_SetConfig+0xe8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_OC3_SetConfig+0x92>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <TIM_OC3_SetConfig+0xf4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_OC3_SetConfig+0x92>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <TIM_OC3_SetConfig+0xf8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d113      	bne.n	8002fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	@ (8003030 <TIM_OC3_SetConfig+0xfc>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <TIM_OC3_SetConfig+0x100>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	621a      	str	r2, [r3, #32]
}
 8003008:	46c0      	nop			@ (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b006      	add	sp, #24
 800300e:	bd80      	pop	{r7, pc}
 8003010:	fffffeff 	.word	0xfffffeff
 8003014:	fffeff8f 	.word	0xfffeff8f
 8003018:	fffffdff 	.word	0xfffffdff
 800301c:	40012c00 	.word	0x40012c00
 8003020:	fffff7ff 	.word	0xfffff7ff
 8003024:	fffffbff 	.word	0xfffffbff
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800
 8003030:	ffffefff 	.word	0xffffefff
 8003034:	ffffdfff 	.word	0xffffdfff

08003038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <TIM_OC4_SetConfig+0xa8>)
 800304e:	401a      	ands	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <TIM_OC4_SetConfig+0xac>)
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a1f      	ldr	r2, [pc, #124]	@ (80030e8 <TIM_OC4_SetConfig+0xb0>)
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ec <TIM_OC4_SetConfig+0xb4>)
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	031b      	lsls	r3, r3, #12
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a17      	ldr	r2, [pc, #92]	@ (80030f0 <TIM_OC4_SetConfig+0xb8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <TIM_OC4_SetConfig+0x70>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a16      	ldr	r2, [pc, #88]	@ (80030f4 <TIM_OC4_SetConfig+0xbc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_OC4_SetConfig+0x70>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <TIM_OC4_SetConfig+0xc0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d109      	bne.n	80030bc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <TIM_OC4_SetConfig+0xc4>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b006      	add	sp, #24
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	ffffefff 	.word	0xffffefff
 80030e4:	feff8fff 	.word	0xfeff8fff
 80030e8:	fffffcff 	.word	0xfffffcff
 80030ec:	ffffdfff 	.word	0xffffdfff
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800
 80030fc:	ffffbfff 	.word	0xffffbfff

08003100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a21      	ldr	r2, [pc, #132]	@ (800319c <TIM_OC5_SetConfig+0x9c>)
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <TIM_OC5_SetConfig+0xa0>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <TIM_OC5_SetConfig+0xa4>)
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <TIM_OC5_SetConfig+0xa8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_OC5_SetConfig+0x66>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a14      	ldr	r2, [pc, #80]	@ (80031ac <TIM_OC5_SetConfig+0xac>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_OC5_SetConfig+0x66>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <TIM_OC5_SetConfig+0xb0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d109      	bne.n	800317a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4a0c      	ldr	r2, [pc, #48]	@ (800319c <TIM_OC5_SetConfig+0x9c>)
 800316a:	4013      	ands	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	fffeffff 	.word	0xfffeffff
 80031a0:	fffeff8f 	.word	0xfffeff8f
 80031a4:	fffdffff 	.word	0xfffdffff
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800

080031b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <TIM_OC6_SetConfig+0xa0>)
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <TIM_OC6_SetConfig+0xa4>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4a1a      	ldr	r2, [pc, #104]	@ (800325c <TIM_OC6_SetConfig+0xa8>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	051b      	lsls	r3, r3, #20
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	@ (8003260 <TIM_OC6_SetConfig+0xac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_OC6_SetConfig+0x68>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a15      	ldr	r2, [pc, #84]	@ (8003264 <TIM_OC6_SetConfig+0xb0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC6_SetConfig+0x68>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a14      	ldr	r2, [pc, #80]	@ (8003268 <TIM_OC6_SetConfig+0xb4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d109      	bne.n	8003230 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4a13      	ldr	r2, [pc, #76]	@ (800326c <TIM_OC6_SetConfig+0xb8>)
 8003220:	4013      	ands	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b006      	add	sp, #24
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	ffefffff 	.word	0xffefffff
 8003258:	feff8fff 	.word	0xfeff8fff
 800325c:	ffdfffff 	.word	0xffdfffff
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800
 800326c:	fffbffff 	.word	0xfffbffff

08003270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	2201      	movs	r2, #1
 8003288:	4393      	bics	r3, r2
 800328a:	001a      	movs	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	22f0      	movs	r2, #240	@ 0xf0
 800329a:	4393      	bics	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	220a      	movs	r2, #10
 80032ac:	4393      	bics	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b006      	add	sp, #24
 80032ca:	bd80      	pop	{r7, pc}

080032cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	2210      	movs	r2, #16
 80032e4:	4393      	bics	r3, r2
 80032e6:	001a      	movs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4a0d      	ldr	r2, [pc, #52]	@ (800332c <TIM_TI2_ConfigInputStage+0x60>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	22a0      	movs	r2, #160	@ 0xa0
 8003308:	4393      	bics	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b006      	add	sp, #24
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	ffff0fff 	.word	0xffff0fff

08003330 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <TIM_ITRx_SetConfig+0x34>)
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	2207      	movs	r2, #7
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	ffcfff8f 	.word	0xffcfff8f

08003368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <TIM_ETR_SetConfig+0x3c>)
 8003380:	4013      	ands	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	021a      	lsls	r2, r3, #8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	431a      	orrs	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4313      	orrs	r3, r2
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b006      	add	sp, #24
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	ffff00ff 	.word	0xffff00ff

080033a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	221f      	movs	r2, #31
 80033b8:	4013      	ands	r3, r2
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	0013      	movs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	43d2      	mvns	r2, r2
 80033ca:	401a      	ands	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	211f      	movs	r1, #31
 80033d8:	400b      	ands	r3, r1
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4099      	lsls	r1, r3
 80033de:	000b      	movs	r3, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b006      	add	sp, #24
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223c      	movs	r2, #60	@ 0x3c
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e04a      	b.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	223c      	movs	r2, #60	@ 0x3c
 800340c:	2101      	movs	r1, #1
 800340e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	223d      	movs	r2, #61	@ 0x3d
 8003414:	2102      	movs	r1, #2
 8003416:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a1d      	ldr	r2, [pc, #116]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2270      	movs	r2, #112	@ 0x70
 8003448:	4393      	bics	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10c      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2280      	movs	r2, #128	@ 0x80
 8003476:	4393      	bics	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4313      	orrs	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223d      	movs	r2, #61	@ 0x3d
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	223c      	movs	r2, #60	@ 0x3c
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	ff0fffff 	.word	0xff0fffff
 80034b0:	40000400 	.word	0x40000400

080034b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223c      	movs	r2, #60	@ 0x3c
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e06f      	b.n	80035b0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223c      	movs	r2, #60	@ 0x3c
 80034d4:	2101      	movs	r1, #1
 80034d6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22ff      	movs	r2, #255	@ 0xff
 80034dc:	4393      	bics	r3, r2
 80034de:	001a      	movs	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80034ec:	401a      	ands	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a30      	ldr	r2, [pc, #192]	@ (80035bc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80034fa:	401a      	ands	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a2e      	ldr	r2, [pc, #184]	@ (80035c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003508:	401a      	ands	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a2b      	ldr	r2, [pc, #172]	@ (80035c4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003516:	401a      	ands	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a29      	ldr	r2, [pc, #164]	@ (80035c8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003524:	401a      	ands	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a26      	ldr	r2, [pc, #152]	@ (80035cc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003532:	401a      	ands	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003540:	401a      	ands	r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a21      	ldr	r2, [pc, #132]	@ (80035d4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003550:	401a      	ands	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d11c      	bne.n	800359e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003568:	401a      	ands	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	051b      	lsls	r3, r3, #20
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003578:	401a      	ands	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a17      	ldr	r2, [pc, #92]	@ (80035e4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003586:	401a      	ands	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003594:	401a      	ands	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223c      	movs	r2, #60	@ 0x3c
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b004      	add	sp, #16
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	fffffcff 	.word	0xfffffcff
 80035bc:	fffffbff 	.word	0xfffffbff
 80035c0:	fffff7ff 	.word	0xfffff7ff
 80035c4:	ffffefff 	.word	0xffffefff
 80035c8:	ffffdfff 	.word	0xffffdfff
 80035cc:	ffffbfff 	.word	0xffffbfff
 80035d0:	fff0ffff 	.word	0xfff0ffff
 80035d4:	efffffff 	.word	0xefffffff
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	ff0fffff 	.word	0xff0fffff
 80035e0:	feffffff 	.word	0xfeffffff
 80035e4:	fdffffff 	.word	0xfdffffff
 80035e8:	dfffffff 	.word	0xdfffffff

080035ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e046      	b.n	800368c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2288      	movs	r2, #136	@ 0x88
 8003602:	589b      	ldr	r3, [r3, r2]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2284      	movs	r2, #132	@ 0x84
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f7fd fa82 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2288      	movs	r2, #136	@ 0x88
 800361c:	2124      	movs	r1, #36	@ 0x24
 800361e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fdd8 	bl	80041f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f000 fc6a 	bl	8003f1c <UART_SetConfig>
 8003648:	0003      	movs	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e01c      	b.n	800368c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	490d      	ldr	r1, [pc, #52]	@ (8003694 <HAL_UART_Init+0xa8>)
 800365e:	400a      	ands	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	212a      	movs	r1, #42	@ 0x2a
 800366e:	438a      	bics	r2, r1
 8003670:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 fe67 	bl	8004358 <UART_CheckIdleState>
 800368a:	0003      	movs	r3, r0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b002      	add	sp, #8
 8003692:	bd80      	pop	{r7, pc}
 8003694:	ffffb7ff 	.word	0xffffb7ff

08003698 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2288      	movs	r2, #136	@ 0x88
 80036aa:	589b      	ldr	r3, [r3, r2]
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d000      	beq.n	80036b2 <HAL_UART_Transmit_IT+0x1a>
 80036b0:	e08d      	b.n	80037ce <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_UART_Transmit_IT+0x28>
 80036b8:	1dbb      	adds	r3, r7, #6
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e085      	b.n	80037d0 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	015b      	lsls	r3, r3, #5
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d109      	bne.n	80036e4 <HAL_UART_Transmit_IT+0x4c>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2201      	movs	r2, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e075      	b.n	80037d0 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1dba      	adds	r2, r7, #6
 80036ee:	2154      	movs	r1, #84	@ 0x54
 80036f0:	8812      	ldrh	r2, [r2, #0]
 80036f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1dba      	adds	r2, r7, #6
 80036f8:	2156      	movs	r1, #86	@ 0x56
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2290      	movs	r2, #144	@ 0x90
 8003708:	2100      	movs	r1, #0
 800370a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2288      	movs	r2, #136	@ 0x88
 8003710:	2121      	movs	r1, #33	@ 0x21
 8003712:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003718:	2380      	movs	r3, #128	@ 0x80
 800371a:	059b      	lsls	r3, r3, #22
 800371c:	429a      	cmp	r2, r3
 800371e:	d12a      	bne.n	8003776 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	429a      	cmp	r2, r3
 800372a:	d107      	bne.n	800373c <HAL_UART_Transmit_IT+0xa4>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a28      	ldr	r2, [pc, #160]	@ (80037d8 <HAL_UART_Transmit_IT+0x140>)
 8003738:	679a      	str	r2, [r3, #120]	@ 0x78
 800373a:	e002      	b.n	8003742 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <HAL_UART_Transmit_IT+0x144>)
 8003740:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	61fb      	str	r3, [r7, #28]
  return(result);
 8003748:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374c:	2301      	movs	r3, #1
 800374e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2180      	movs	r1, #128	@ 0x80
 8003764:	0409      	lsls	r1, r1, #16
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	e029      	b.n	80037ca <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	015b      	lsls	r3, r3, #5
 800377e:	429a      	cmp	r2, r3
 8003780:	d107      	bne.n	8003792 <HAL_UART_Transmit_IT+0xfa>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <HAL_UART_Transmit_IT+0x148>)
 800378e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003790:	e002      	b.n	8003798 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a13      	ldr	r2, [pc, #76]	@ (80037e4 <HAL_UART_Transmit_IT+0x14c>)
 8003796:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8310 	mrs	r3, PRIMASK
 800379c:	613b      	str	r3, [r7, #16]
  return(result);
 800379e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f383 8810 	msr	PRIMASK, r3
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f383 8810 	msr	PRIMASK, r3
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
  }
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b00c      	add	sp, #48	@ 0x30
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	08004b2d 	.word	0x08004b2d
 80037dc:	08004a41 	.word	0x08004a41
 80037e0:	08004983 	.word	0x08004983
 80037e4:	080048cf 	.word	0x080048cf

080037e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	1dbb      	adds	r3, r7, #6
 80037f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	228c      	movs	r2, #140	@ 0x8c
 80037fa:	589b      	ldr	r3, [r3, r2]
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d145      	bne.n	800388c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_Receive_IT+0x26>
 8003806:	1dbb      	adds	r3, r7, #6
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e03d      	b.n	800388e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	015b      	lsls	r3, r3, #5
 800381a:	429a      	cmp	r2, r3
 800381c:	d109      	bne.n	8003832 <HAL_UART_Receive_IT+0x4a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2201      	movs	r2, #1
 800382a:	4013      	ands	r3, r2
 800382c:	d001      	beq.n	8003832 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e02d      	b.n	800388e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	4013      	ands	r3, r2
 8003844:	d019      	beq.n	800387a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003846:	f3ef 8310 	mrs	r3, PRIMASK
 800384a:	613b      	str	r3, [r7, #16]
  return(result);
 800384c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f383 8810 	msr	PRIMASK, r3
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2180      	movs	r1, #128	@ 0x80
 8003868:	04c9      	lsls	r1, r1, #19
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800387a:	1dbb      	adds	r3, r7, #6
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fe82 	bl	800458c <UART_Start_Receive_IT>
 8003888:	0003      	movs	r3, r0
 800388a:	e000      	b.n	800388e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b008      	add	sp, #32
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b0aa      	sub	sp, #168	@ 0xa8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	22a4      	movs	r2, #164	@ 0xa4
 80038a8:	18b9      	adds	r1, r7, r2
 80038aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	20a0      	movs	r0, #160	@ 0xa0
 80038b4:	1839      	adds	r1, r7, r0
 80038b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	249c      	movs	r4, #156	@ 0x9c
 80038c0:	1939      	adds	r1, r7, r4
 80038c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038c4:	0011      	movs	r1, r2
 80038c6:	18bb      	adds	r3, r7, r2
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4aa2      	ldr	r2, [pc, #648]	@ (8003b54 <HAL_UART_IRQHandler+0x2bc>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	2298      	movs	r2, #152	@ 0x98
 80038d0:	18bd      	adds	r5, r7, r2
 80038d2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80038d4:	18bb      	adds	r3, r7, r2
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11a      	bne.n	8003912 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2220      	movs	r2, #32
 80038e2:	4013      	ands	r3, r2
 80038e4:	d015      	beq.n	8003912 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038e6:	183b      	adds	r3, r7, r0
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2220      	movs	r2, #32
 80038ec:	4013      	ands	r3, r2
 80038ee:	d105      	bne.n	80038fc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038f0:	193b      	adds	r3, r7, r4
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	055b      	lsls	r3, r3, #21
 80038f8:	4013      	ands	r3, r2
 80038fa:	d00a      	beq.n	8003912 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003900:	2b00      	cmp	r3, #0
 8003902:	d100      	bne.n	8003906 <HAL_UART_IRQHandler+0x6e>
 8003904:	e2dc      	b.n	8003ec0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	0010      	movs	r0, r2
 800390e:	4798      	blx	r3
      }
      return;
 8003910:	e2d6      	b.n	8003ec0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003912:	2398      	movs	r3, #152	@ 0x98
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d100      	bne.n	800391e <HAL_UART_IRQHandler+0x86>
 800391c:	e122      	b.n	8003b64 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800391e:	239c      	movs	r3, #156	@ 0x9c
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a8c      	ldr	r2, [pc, #560]	@ (8003b58 <HAL_UART_IRQHandler+0x2c0>)
 8003926:	4013      	ands	r3, r2
 8003928:	d106      	bne.n	8003938 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800392a:	23a0      	movs	r3, #160	@ 0xa0
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a8a      	ldr	r2, [pc, #552]	@ (8003b5c <HAL_UART_IRQHandler+0x2c4>)
 8003932:	4013      	ands	r3, r2
 8003934:	d100      	bne.n	8003938 <HAL_UART_IRQHandler+0xa0>
 8003936:	e115      	b.n	8003b64 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003938:	23a4      	movs	r3, #164	@ 0xa4
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	4013      	ands	r3, r2
 8003942:	d012      	beq.n	800396a <HAL_UART_IRQHandler+0xd2>
 8003944:	23a0      	movs	r3, #160	@ 0xa0
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	@ 0x80
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4013      	ands	r3, r2
 8003950:	d00b      	beq.n	800396a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2290      	movs	r2, #144	@ 0x90
 800395e:	589b      	ldr	r3, [r3, r2]
 8003960:	2201      	movs	r2, #1
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2190      	movs	r1, #144	@ 0x90
 8003968:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800396a:	23a4      	movs	r3, #164	@ 0xa4
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2202      	movs	r2, #2
 8003972:	4013      	ands	r3, r2
 8003974:	d011      	beq.n	800399a <HAL_UART_IRQHandler+0x102>
 8003976:	239c      	movs	r3, #156	@ 0x9c
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d00b      	beq.n	800399a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2202      	movs	r2, #2
 8003988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2290      	movs	r2, #144	@ 0x90
 800398e:	589b      	ldr	r3, [r3, r2]
 8003990:	2204      	movs	r2, #4
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2190      	movs	r1, #144	@ 0x90
 8003998:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800399a:	23a4      	movs	r3, #164	@ 0xa4
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d011      	beq.n	80039ca <HAL_UART_IRQHandler+0x132>
 80039a6:	239c      	movs	r3, #156	@ 0x9c
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2204      	movs	r2, #4
 80039b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2290      	movs	r2, #144	@ 0x90
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	2202      	movs	r2, #2
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2190      	movs	r1, #144	@ 0x90
 80039c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039ca:	23a4      	movs	r3, #164	@ 0xa4
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2208      	movs	r2, #8
 80039d2:	4013      	ands	r3, r2
 80039d4:	d017      	beq.n	8003a06 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039d6:	23a0      	movs	r3, #160	@ 0xa0
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2220      	movs	r2, #32
 80039de:	4013      	ands	r3, r2
 80039e0:	d105      	bne.n	80039ee <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039e2:	239c      	movs	r3, #156	@ 0x9c
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a5b      	ldr	r2, [pc, #364]	@ (8003b58 <HAL_UART_IRQHandler+0x2c0>)
 80039ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039ec:	d00b      	beq.n	8003a06 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2208      	movs	r2, #8
 80039f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2290      	movs	r2, #144	@ 0x90
 80039fa:	589b      	ldr	r3, [r3, r2]
 80039fc:	2208      	movs	r2, #8
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2190      	movs	r1, #144	@ 0x90
 8003a04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a06:	23a4      	movs	r3, #164	@ 0xa4
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_UART_IRQHandler+0x1a4>
 8003a14:	23a0      	movs	r3, #160	@ 0xa0
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	04db      	lsls	r3, r3, #19
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d00c      	beq.n	8003a3c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2280      	movs	r2, #128	@ 0x80
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2290      	movs	r2, #144	@ 0x90
 8003a30:	589b      	ldr	r3, [r3, r2]
 8003a32:	2220      	movs	r2, #32
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2190      	movs	r1, #144	@ 0x90
 8003a3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2290      	movs	r2, #144	@ 0x90
 8003a40:	589b      	ldr	r3, [r3, r2]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d100      	bne.n	8003a48 <HAL_UART_IRQHandler+0x1b0>
 8003a46:	e23d      	b.n	8003ec4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a48:	23a4      	movs	r3, #164	@ 0xa4
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	4013      	ands	r3, r2
 8003a52:	d015      	beq.n	8003a80 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a54:	23a0      	movs	r3, #160	@ 0xa0
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d106      	bne.n	8003a6e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a60:	239c      	movs	r3, #156	@ 0x9c
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	055b      	lsls	r3, r3, #21
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d008      	beq.n	8003a80 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2290      	movs	r2, #144	@ 0x90
 8003a84:	589b      	ldr	r3, [r3, r2]
 8003a86:	2194      	movs	r1, #148	@ 0x94
 8003a88:	187a      	adds	r2, r7, r1
 8003a8a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2240      	movs	r2, #64	@ 0x40
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d004      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2228      	movs	r2, #40	@ 0x28
 8003aa0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aa2:	d04c      	beq.n	8003b3e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fe94 	bl	80047d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2240      	movs	r2, #64	@ 0x40
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b40      	cmp	r3, #64	@ 0x40
 8003ab8:	d13c      	bne.n	8003b34 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aba:	f3ef 8310 	mrs	r3, PRIMASK
 8003abe:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	2090      	movs	r0, #144	@ 0x90
 8003ac4:	183a      	adds	r2, r7, r0
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2140      	movs	r1, #64	@ 0x40
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	183b      	adds	r3, r7, r0
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	589b      	ldr	r3, [r3, r2]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	@ 0x80
 8003b00:	589b      	ldr	r3, [r3, r2]
 8003b02:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <HAL_UART_IRQHandler+0x2c8>)
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2280      	movs	r2, #128	@ 0x80
 8003b0a:	589b      	ldr	r3, [r3, r2]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fd fb1d 	bl	800114c <HAL_DMA_Abort_IT>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d01c      	beq.n	8003b50 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	5852      	ldr	r2, [r2, r1]
 8003b24:	0010      	movs	r0, r2
 8003b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e012      	b.n	8003b50 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 f9e1 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b32:	e00d      	b.n	8003b50 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f9dc 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e008      	b.n	8003b50 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 f9d7 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2290      	movs	r2, #144	@ 0x90
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b4e:	e1b9      	b.n	8003ec4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b52:	e1b7      	b.n	8003ec4 <HAL_UART_IRQHandler+0x62c>
 8003b54:	0000080f 	.word	0x0000080f
 8003b58:	10000001 	.word	0x10000001
 8003b5c:	04000120 	.word	0x04000120
 8003b60:	080048a1 	.word	0x080048a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d000      	beq.n	8003b6e <HAL_UART_IRQHandler+0x2d6>
 8003b6c:	e13e      	b.n	8003dec <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6e:	23a4      	movs	r3, #164	@ 0xa4
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	4013      	ands	r3, r2
 8003b78:	d100      	bne.n	8003b7c <HAL_UART_IRQHandler+0x2e4>
 8003b7a:	e137      	b.n	8003dec <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b7c:	23a0      	movs	r3, #160	@ 0xa0
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	4013      	ands	r3, r2
 8003b86:	d100      	bne.n	8003b8a <HAL_UART_IRQHandler+0x2f2>
 8003b88:	e130      	b.n	8003dec <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2210      	movs	r2, #16
 8003b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2240      	movs	r2, #64	@ 0x40
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d000      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x30a>
 8003ba0:	e0a4      	b.n	8003cec <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2280      	movs	r2, #128	@ 0x80
 8003ba6:	589b      	ldr	r3, [r3, r2]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	217e      	movs	r1, #126	@ 0x7e
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d100      	bne.n	8003bbc <HAL_UART_IRQHandler+0x324>
 8003bba:	e185      	b.n	8003ec8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	225c      	movs	r2, #92	@ 0x5c
 8003bc0:	5a9b      	ldrh	r3, [r3, r2]
 8003bc2:	187a      	adds	r2, r7, r1
 8003bc4:	8812      	ldrh	r2, [r2, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d300      	bcc.n	8003bcc <HAL_UART_IRQHandler+0x334>
 8003bca:	e17d      	b.n	8003ec8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	187a      	adds	r2, r7, r1
 8003bd0:	215e      	movs	r1, #94	@ 0x5e
 8003bd2:	8812      	ldrh	r2, [r2, #0]
 8003bd4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2280      	movs	r2, #128	@ 0x80
 8003bda:	589b      	ldr	r3, [r3, r2]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2220      	movs	r2, #32
 8003be2:	4013      	ands	r3, r2
 8003be4:	d170      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	49b4      	ldr	r1, [pc, #720]	@ (8003ed8 <HAL_UART_IRQHandler+0x640>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c22:	2301      	movs	r3, #1
 8003c24:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c28:	f383 8810 	msr	PRIMASK, r3
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	438a      	bics	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c40:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c52:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c54:	2301      	movs	r3, #1
 8003c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2140      	movs	r1, #64	@ 0x40
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c72:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	228c      	movs	r2, #140	@ 0x8c
 8003c80:	2120      	movs	r1, #32
 8003c82:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c94:	2301      	movs	r3, #1
 8003c96:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2110      	movs	r1, #16
 8003cac:	438a      	bics	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	589b      	ldr	r3, [r3, r2]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fd f9e0 	bl	8001088 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	225c      	movs	r2, #92	@ 0x5c
 8003cd2:	5a9a      	ldrh	r2, [r3, r2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	215e      	movs	r1, #94	@ 0x5e
 8003cd8:	5a5b      	ldrh	r3, [r3, r1]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f90d 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cea:	e0ed      	b.n	8003ec8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	225c      	movs	r2, #92	@ 0x5c
 8003cf0:	5a99      	ldrh	r1, [r3, r2]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	225e      	movs	r2, #94	@ 0x5e
 8003cf6:	5a9b      	ldrh	r3, [r3, r2]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	208e      	movs	r0, #142	@ 0x8e
 8003cfc:	183b      	adds	r3, r7, r0
 8003cfe:	1a8a      	subs	r2, r1, r2
 8003d00:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	225e      	movs	r2, #94	@ 0x5e
 8003d06:	5a9b      	ldrh	r3, [r3, r2]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d100      	bne.n	8003d10 <HAL_UART_IRQHandler+0x478>
 8003d0e:	e0dd      	b.n	8003ecc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003d10:	183b      	adds	r3, r7, r0
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d100      	bne.n	8003d1a <HAL_UART_IRQHandler+0x482>
 8003d18:	e0d8      	b.n	8003ecc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d20:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d22:	2488      	movs	r4, #136	@ 0x88
 8003d24:	193a      	adds	r2, r7, r4
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4967      	ldr	r1, [pc, #412]	@ (8003edc <HAL_UART_IRQHandler+0x644>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8310 	mrs	r3, PRIMASK
 8003d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d58:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d5a:	2484      	movs	r4, #132	@ 0x84
 8003d5c:	193a      	adds	r2, r7, r4
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	2301      	movs	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	495a      	ldr	r1, [pc, #360]	@ (8003ee0 <HAL_UART_IRQHandler+0x648>)
 8003d78:	400a      	ands	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	193b      	adds	r3, r7, r4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f383 8810 	msr	PRIMASK, r3
}
 8003d88:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	228c      	movs	r2, #140	@ 0x8c
 8003d8e:	2120      	movs	r1, #32
 8003d90:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da6:	2480      	movs	r4, #128	@ 0x80
 8003da8:	193a      	adds	r2, r7, r4
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	2301      	movs	r3, #1
 8003dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2110      	movs	r1, #16
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	193b      	adds	r3, r7, r4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ddc:	183b      	adds	r3, r7, r0
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 f88d 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dea:	e06f      	b.n	8003ecc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dec:	23a4      	movs	r3, #164	@ 0xa4
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	035b      	lsls	r3, r3, #13
 8003df6:	4013      	ands	r3, r2
 8003df8:	d010      	beq.n	8003e1c <HAL_UART_IRQHandler+0x584>
 8003dfa:	239c      	movs	r3, #156	@ 0x9c
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	@ 0x80
 8003e02:	03db      	lsls	r3, r3, #15
 8003e04:	4013      	ands	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2280      	movs	r2, #128	@ 0x80
 8003e0e:	0352      	lsls	r2, r2, #13
 8003e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f001 fc23 	bl	8005660 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e1a:	e05a      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e1c:	23a4      	movs	r3, #164	@ 0xa4
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	4013      	ands	r3, r2
 8003e26:	d016      	beq.n	8003e56 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e28:	23a0      	movs	r3, #160	@ 0xa0
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2280      	movs	r2, #128	@ 0x80
 8003e30:	4013      	ands	r3, r2
 8003e32:	d106      	bne.n	8003e42 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e34:	239c      	movs	r3, #156	@ 0x9c
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d042      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	0010      	movs	r0, r2
 8003e52:	4798      	blx	r3
    }
    return;
 8003e54:	e03c      	b.n	8003ed0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e56:	23a4      	movs	r3, #164	@ 0xa4
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2240      	movs	r2, #64	@ 0x40
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d00a      	beq.n	8003e78 <HAL_UART_IRQHandler+0x5e0>
 8003e62:	23a0      	movs	r3, #160	@ 0xa0
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 fed5 	bl	8004c20 <UART_EndTransmit_IT>
    return;
 8003e76:	e02c      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e78:	23a4      	movs	r3, #164	@ 0xa4
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	4013      	ands	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <HAL_UART_IRQHandler+0x606>
 8003e86:	23a0      	movs	r3, #160	@ 0xa0
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	4013      	ands	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f001 fbf2 	bl	8005680 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e9c:	e019      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e9e:	23a4      	movs	r3, #164	@ 0xa4
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	045b      	lsls	r3, r3, #17
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d012      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
 8003eac:	23a0      	movs	r3, #160	@ 0xa0
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da0d      	bge.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f001 fbd9 	bl	8005670 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ebe:	e008      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	e006      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	e004      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	e002      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	e000      	b.n	8003ed2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003ed0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b02a      	add	sp, #168	@ 0xa8
 8003ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed8:	fffffeff 	.word	0xfffffeff
 8003edc:	fffffedf 	.word	0xfffffedf
 8003ee0:	effffffe 	.word	0xeffffffe

08003ee4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	000a      	movs	r2, r1
 8003f0e:	1cbb      	adds	r3, r7, #2
 8003f10:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b002      	add	sp, #8
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	231a      	movs	r3, #26
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4aa1      	ldr	r2, [pc, #644]	@ (80041d0 <UART_SetConfig+0x2b4>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a9c      	ldr	r2, [pc, #624]	@ (80041d4 <UART_SetConfig+0x2b8>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a93      	ldr	r2, [pc, #588]	@ (80041d8 <UART_SetConfig+0x2bc>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a89      	ldr	r2, [pc, #548]	@ (80041dc <UART_SetConfig+0x2c0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d127      	bne.n	800400a <UART_SetConfig+0xee>
 8003fba:	4b89      	ldr	r3, [pc, #548]	@ (80041e0 <UART_SetConfig+0x2c4>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d017      	beq.n	8003ff6 <UART_SetConfig+0xda>
 8003fc6:	d81b      	bhi.n	8004000 <UART_SetConfig+0xe4>
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d00a      	beq.n	8003fe2 <UART_SetConfig+0xc6>
 8003fcc:	d818      	bhi.n	8004000 <UART_SetConfig+0xe4>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <UART_SetConfig+0xbc>
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d00a      	beq.n	8003fec <UART_SetConfig+0xd0>
 8003fd6:	e013      	b.n	8004000 <UART_SetConfig+0xe4>
 8003fd8:	231b      	movs	r3, #27
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e021      	b.n	8004026 <UART_SetConfig+0x10a>
 8003fe2:	231b      	movs	r3, #27
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e01c      	b.n	8004026 <UART_SetConfig+0x10a>
 8003fec:	231b      	movs	r3, #27
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e017      	b.n	8004026 <UART_SetConfig+0x10a>
 8003ff6:	231b      	movs	r3, #27
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e012      	b.n	8004026 <UART_SetConfig+0x10a>
 8004000:	231b      	movs	r3, #27
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2210      	movs	r2, #16
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e00d      	b.n	8004026 <UART_SetConfig+0x10a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	@ (80041e4 <UART_SetConfig+0x2c8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d104      	bne.n	800401e <UART_SetConfig+0x102>
 8004014:	231b      	movs	r3, #27
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e003      	b.n	8004026 <UART_SetConfig+0x10a>
 800401e:	231b      	movs	r3, #27
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	2210      	movs	r2, #16
 8004024:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	429a      	cmp	r2, r3
 8004030:	d000      	beq.n	8004034 <UART_SetConfig+0x118>
 8004032:	e065      	b.n	8004100 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004034:	231b      	movs	r3, #27
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d015      	beq.n	800406a <UART_SetConfig+0x14e>
 800403e:	dc18      	bgt.n	8004072 <UART_SetConfig+0x156>
 8004040:	2b04      	cmp	r3, #4
 8004042:	d00d      	beq.n	8004060 <UART_SetConfig+0x144>
 8004044:	dc15      	bgt.n	8004072 <UART_SetConfig+0x156>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <UART_SetConfig+0x134>
 800404a:	2b02      	cmp	r3, #2
 800404c:	d005      	beq.n	800405a <UART_SetConfig+0x13e>
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fd ff98 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8004054:	0003      	movs	r3, r0
 8004056:	617b      	str	r3, [r7, #20]
        break;
 8004058:	e012      	b.n	8004080 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800405a:	4b63      	ldr	r3, [pc, #396]	@ (80041e8 <UART_SetConfig+0x2cc>)
 800405c:	617b      	str	r3, [r7, #20]
        break;
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004060:	f7fd ff04 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8004064:	0003      	movs	r3, r0
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	e00a      	b.n	8004080 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	617b      	str	r3, [r7, #20]
        break;
 8004070:	e006      	b.n	8004080 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004076:	231a      	movs	r3, #26
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
        break;
 800407e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d100      	bne.n	8004088 <UART_SetConfig+0x16c>
 8004086:	e08d      	b.n	80041a4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800408c:	4b57      	ldr	r3, [pc, #348]	@ (80041ec <UART_SetConfig+0x2d0>)
 800408e:	0052      	lsls	r2, r2, #1
 8004090:	5ad3      	ldrh	r3, [r2, r3]
 8004092:	0019      	movs	r1, r3
 8004094:	6978      	ldr	r0, [r7, #20]
 8004096:	f7fc f833 	bl	8000100 <__udivsi3>
 800409a:	0003      	movs	r3, r0
 800409c:	005a      	lsls	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	18d2      	adds	r2, r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	0019      	movs	r1, r3
 80040ac:	0010      	movs	r0, r2
 80040ae:	f7fc f827 	bl	8000100 <__udivsi3>
 80040b2:	0003      	movs	r3, r0
 80040b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b0f      	cmp	r3, #15
 80040ba:	d91c      	bls.n	80040f6 <UART_SetConfig+0x1da>
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	2380      	movs	r3, #128	@ 0x80
 80040c0:	025b      	lsls	r3, r3, #9
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d217      	bcs.n	80040f6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	200e      	movs	r0, #14
 80040cc:	183b      	adds	r3, r7, r0
 80040ce:	210f      	movs	r1, #15
 80040d0:	438a      	bics	r2, r1
 80040d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2207      	movs	r2, #7
 80040dc:	4013      	ands	r3, r2
 80040de:	b299      	uxth	r1, r3
 80040e0:	183b      	adds	r3, r7, r0
 80040e2:	183a      	adds	r2, r7, r0
 80040e4:	8812      	ldrh	r2, [r2, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	183a      	adds	r2, r7, r0
 80040f0:	8812      	ldrh	r2, [r2, #0]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e056      	b.n	80041a4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80040f6:	231a      	movs	r3, #26
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e051      	b.n	80041a4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004100:	231b      	movs	r3, #27
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d015      	beq.n	8004136 <UART_SetConfig+0x21a>
 800410a:	dc18      	bgt.n	800413e <UART_SetConfig+0x222>
 800410c:	2b04      	cmp	r3, #4
 800410e:	d00d      	beq.n	800412c <UART_SetConfig+0x210>
 8004110:	dc15      	bgt.n	800413e <UART_SetConfig+0x222>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <UART_SetConfig+0x200>
 8004116:	2b02      	cmp	r3, #2
 8004118:	d005      	beq.n	8004126 <UART_SetConfig+0x20a>
 800411a:	e010      	b.n	800413e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7fd ff32 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8004120:	0003      	movs	r3, r0
 8004122:	617b      	str	r3, [r7, #20]
        break;
 8004124:	e012      	b.n	800414c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004126:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <UART_SetConfig+0x2cc>)
 8004128:	617b      	str	r3, [r7, #20]
        break;
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412c:	f7fd fe9e 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8004130:	0003      	movs	r3, r0
 8004132:	617b      	str	r3, [r7, #20]
        break;
 8004134:	e00a      	b.n	800414c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	617b      	str	r3, [r7, #20]
        break;
 800413c:	e006      	b.n	800414c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004142:	231a      	movs	r3, #26
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
        break;
 800414a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <UART_SetConfig+0x2d0>)
 8004158:	0052      	lsls	r2, r2, #1
 800415a:	5ad3      	ldrh	r3, [r2, r3]
 800415c:	0019      	movs	r1, r3
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7fb ffce 	bl	8000100 <__udivsi3>
 8004164:	0003      	movs	r3, r0
 8004166:	001a      	movs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	18d2      	adds	r2, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0019      	movs	r1, r3
 8004176:	0010      	movs	r0, r2
 8004178:	f7fb ffc2 	bl	8000100 <__udivsi3>
 800417c:	0003      	movs	r3, r0
 800417e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	d90a      	bls.n	800419c <UART_SetConfig+0x280>
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	025b      	lsls	r3, r3, #9
 800418c:	429a      	cmp	r2, r3
 800418e:	d205      	bcs.n	800419c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e003      	b.n	80041a4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	231a      	movs	r3, #26
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	226a      	movs	r2, #106	@ 0x6a
 80041a8:	2101      	movs	r1, #1
 80041aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2268      	movs	r2, #104	@ 0x68
 80041b0:	2101      	movs	r1, #1
 80041b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041c0:	231a      	movs	r3, #26
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b008      	add	sp, #32
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	cfff69f3 	.word	0xcfff69f3
 80041d4:	ffffcfff 	.word	0xffffcfff
 80041d8:	11fff4ff 	.word	0x11fff4ff
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40004400 	.word	0x40004400
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	080057b4 	.word	0x080057b4

080041f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	2208      	movs	r2, #8
 80041fe:	4013      	ands	r3, r2
 8004200:	d00b      	beq.n	800421a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a4a      	ldr	r2, [pc, #296]	@ (8004334 <UART_AdvFeatureConfig+0x144>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4a43      	ldr	r2, [pc, #268]	@ (8004338 <UART_AdvFeatureConfig+0x148>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	2202      	movs	r2, #2
 8004242:	4013      	ands	r3, r2
 8004244:	d00b      	beq.n	800425e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a3b      	ldr	r2, [pc, #236]	@ (800433c <UART_AdvFeatureConfig+0x14c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	2204      	movs	r2, #4
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a34      	ldr	r2, [pc, #208]	@ (8004340 <UART_AdvFeatureConfig+0x150>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	2210      	movs	r2, #16
 8004286:	4013      	ands	r3, r2
 8004288:	d00b      	beq.n	80042a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a2c      	ldr	r2, [pc, #176]	@ (8004344 <UART_AdvFeatureConfig+0x154>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	2220      	movs	r2, #32
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4a25      	ldr	r2, [pc, #148]	@ (8004348 <UART_AdvFeatureConfig+0x158>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	2240      	movs	r2, #64	@ 0x40
 80042ca:	4013      	ands	r3, r2
 80042cc:	d01d      	beq.n	800430a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	@ (800434c <UART_AdvFeatureConfig+0x15c>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ea:	2380      	movs	r3, #128	@ 0x80
 80042ec:	035b      	lsls	r3, r3, #13
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10b      	bne.n	800430a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <UART_AdvFeatureConfig+0x160>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	4013      	ands	r3, r2
 8004312:	d00b      	beq.n	800432c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a0e      	ldr	r2, [pc, #56]	@ (8004354 <UART_AdvFeatureConfig+0x164>)
 800431c:	4013      	ands	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }
}
 800432c:	46c0      	nop			@ (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}
 8004334:	ffff7fff 	.word	0xffff7fff
 8004338:	fffdffff 	.word	0xfffdffff
 800433c:	fffeffff 	.word	0xfffeffff
 8004340:	fffbffff 	.word	0xfffbffff
 8004344:	ffffefff 	.word	0xffffefff
 8004348:	ffffdfff 	.word	0xffffdfff
 800434c:	ffefffff 	.word	0xffefffff
 8004350:	ff9fffff 	.word	0xff9fffff
 8004354:	fff7ffff 	.word	0xfff7ffff

08004358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b092      	sub	sp, #72	@ 0x48
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2290      	movs	r2, #144	@ 0x90
 8004364:	2100      	movs	r1, #0
 8004366:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004368:	f7fc fcfc 	bl	8000d64 <HAL_GetTick>
 800436c:	0003      	movs	r3, r0
 800436e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2208      	movs	r2, #8
 8004378:	4013      	ands	r3, r2
 800437a:	2b08      	cmp	r3, #8
 800437c:	d12d      	bne.n	80043da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004380:	2280      	movs	r2, #128	@ 0x80
 8004382:	0391      	lsls	r1, r2, #14
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4a47      	ldr	r2, [pc, #284]	@ (80044a4 <UART_CheckIdleState+0x14c>)
 8004388:	9200      	str	r2, [sp, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	f000 f88e 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8004390:	1e03      	subs	r3, r0, #0
 8004392:	d022      	beq.n	80043da <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800439c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800439e:	2301      	movs	r3, #1
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2180      	movs	r1, #128	@ 0x80
 80043b6:	438a      	bics	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2288      	movs	r2, #136	@ 0x88
 80043ca:	2120      	movs	r1, #32
 80043cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2284      	movs	r2, #132	@ 0x84
 80043d2:	2100      	movs	r1, #0
 80043d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e060      	b.n	800449c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2204      	movs	r2, #4
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d146      	bne.n	8004476 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ea:	2280      	movs	r2, #128	@ 0x80
 80043ec:	03d1      	lsls	r1, r2, #15
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	@ (80044a4 <UART_CheckIdleState+0x14c>)
 80043f2:	9200      	str	r2, [sp, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f000 f859 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 80043fa:	1e03      	subs	r3, r0, #0
 80043fc:	d03b      	beq.n	8004476 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	60fb      	str	r3, [r7, #12]
  return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <UART_CheckIdleState+0x150>)
 8004420:	400a      	ands	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004430:	f3ef 8310 	mrs	r3, PRIMASK
 8004434:	61bb      	str	r3, [r7, #24]
  return(result);
 8004436:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f383 8810 	msr	PRIMASK, r3
}
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	438a      	bics	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	228c      	movs	r2, #140	@ 0x8c
 8004466:	2120      	movs	r1, #32
 8004468:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2284      	movs	r2, #132	@ 0x84
 800446e:	2100      	movs	r1, #0
 8004470:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e012      	b.n	800449c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2288      	movs	r2, #136	@ 0x88
 800447a:	2120      	movs	r1, #32
 800447c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	228c      	movs	r2, #140	@ 0x8c
 8004482:	2120      	movs	r1, #32
 8004484:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2284      	movs	r2, #132	@ 0x84
 8004496:	2100      	movs	r1, #0
 8004498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b010      	add	sp, #64	@ 0x40
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	01ffffff 	.word	0x01ffffff
 80044a8:	fffffedf 	.word	0xfffffedf

080044ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	1dfb      	adds	r3, r7, #7
 80044ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	e051      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3301      	adds	r3, #1
 80044c2:	d04e      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c4:	f7fc fc4e 	bl	8000d64 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <UART_WaitOnFlagUntilTimeout+0x2e>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e051      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2204      	movs	r2, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	d03b      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb6>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b80      	cmp	r3, #128	@ 0x80
 80044ee:	d038      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb6>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b40      	cmp	r3, #64	@ 0x40
 80044f4:	d035      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2208      	movs	r2, #8
 80044fe:	4013      	ands	r3, r2
 8004500:	2b08      	cmp	r3, #8
 8004502:	d111      	bne.n	8004528 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2208      	movs	r2, #8
 800450a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 f960 	bl	80047d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2290      	movs	r2, #144	@ 0x90
 8004518:	2108      	movs	r1, #8
 800451a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2284      	movs	r2, #132	@ 0x84
 8004520:	2100      	movs	r1, #0
 8004522:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e02c      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	401a      	ands	r2, r3
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	429a      	cmp	r2, r3
 800453a:	d112      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2280      	movs	r2, #128	@ 0x80
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f943 	bl	80047d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2290      	movs	r2, #144	@ 0x90
 8004552:	2120      	movs	r1, #32
 8004554:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2284      	movs	r2, #132	@ 0x84
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e00f      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	425a      	negs	r2, r3
 8004572:	4153      	adcs	r3, r2
 8004574:	b2db      	uxtb	r3, r3
 8004576:	001a      	movs	r2, r3
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d09e      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b004      	add	sp, #16
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b098      	sub	sp, #96	@ 0x60
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	1dbb      	adds	r3, r7, #6
 8004598:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1dba      	adds	r2, r7, #6
 80045a4:	215c      	movs	r1, #92	@ 0x5c
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1dba      	adds	r2, r7, #6
 80045ae:	215e      	movs	r1, #94	@ 0x5e
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	2380      	movs	r3, #128	@ 0x80
 80045c0:	015b      	lsls	r3, r3, #5
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10d      	bne.n	80045e2 <UART_Start_Receive_IT+0x56>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d104      	bne.n	80045d8 <UART_Start_Receive_IT+0x4c>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2260      	movs	r2, #96	@ 0x60
 80045d2:	497b      	ldr	r1, [pc, #492]	@ (80047c0 <UART_Start_Receive_IT+0x234>)
 80045d4:	5299      	strh	r1, [r3, r2]
 80045d6:	e02e      	b.n	8004636 <UART_Start_Receive_IT+0xaa>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2260      	movs	r2, #96	@ 0x60
 80045dc:	21ff      	movs	r1, #255	@ 0xff
 80045de:	5299      	strh	r1, [r3, r2]
 80045e0:	e029      	b.n	8004636 <UART_Start_Receive_IT+0xaa>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10d      	bne.n	8004606 <UART_Start_Receive_IT+0x7a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <UART_Start_Receive_IT+0x70>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2260      	movs	r2, #96	@ 0x60
 80045f6:	21ff      	movs	r1, #255	@ 0xff
 80045f8:	5299      	strh	r1, [r3, r2]
 80045fa:	e01c      	b.n	8004636 <UART_Start_Receive_IT+0xaa>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2260      	movs	r2, #96	@ 0x60
 8004600:	217f      	movs	r1, #127	@ 0x7f
 8004602:	5299      	strh	r1, [r3, r2]
 8004604:	e017      	b.n	8004636 <UART_Start_Receive_IT+0xaa>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	2380      	movs	r3, #128	@ 0x80
 800460c:	055b      	lsls	r3, r3, #21
 800460e:	429a      	cmp	r2, r3
 8004610:	d10d      	bne.n	800462e <UART_Start_Receive_IT+0xa2>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <UART_Start_Receive_IT+0x98>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2260      	movs	r2, #96	@ 0x60
 800461e:	217f      	movs	r1, #127	@ 0x7f
 8004620:	5299      	strh	r1, [r3, r2]
 8004622:	e008      	b.n	8004636 <UART_Start_Receive_IT+0xaa>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2260      	movs	r2, #96	@ 0x60
 8004628:	213f      	movs	r1, #63	@ 0x3f
 800462a:	5299      	strh	r1, [r3, r2]
 800462c:	e003      	b.n	8004636 <UART_Start_Receive_IT+0xaa>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2260      	movs	r2, #96	@ 0x60
 8004632:	2100      	movs	r1, #0
 8004634:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2290      	movs	r2, #144	@ 0x90
 800463a:	2100      	movs	r1, #0
 800463c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	228c      	movs	r2, #140	@ 0x8c
 8004642:	2122      	movs	r1, #34	@ 0x22
 8004644:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800464c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004650:	2301      	movs	r3, #1
 8004652:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2101      	movs	r1, #1
 8004668:	430a      	orrs	r2, r1
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	059b      	lsls	r3, r3, #22
 8004680:	429a      	cmp	r2, r3
 8004682:	d150      	bne.n	8004726 <UART_Start_Receive_IT+0x19a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2268      	movs	r2, #104	@ 0x68
 8004688:	5a9b      	ldrh	r3, [r3, r2]
 800468a:	1dba      	adds	r2, r7, #6
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d349      	bcc.n	8004726 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	015b      	lsls	r3, r3, #5
 800469a:	429a      	cmp	r2, r3
 800469c:	d107      	bne.n	80046ae <UART_Start_Receive_IT+0x122>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a46      	ldr	r2, [pc, #280]	@ (80047c4 <UART_Start_Receive_IT+0x238>)
 80046aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80046ac:	e002      	b.n	80046b4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a45      	ldr	r2, [pc, #276]	@ (80047c8 <UART_Start_Receive_IT+0x23c>)
 80046b2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d019      	beq.n	80046f0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046bc:	f3ef 8310 	mrs	r3, PRIMASK
 80046c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80046c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c6:	2301      	movs	r3, #1
 80046c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2180      	movs	r1, #128	@ 0x80
 80046de:	0049      	lsls	r1, r1, #1
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80046fa:	2301      	movs	r3, #1
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2180      	movs	r1, #128	@ 0x80
 8004712:	0549      	lsls	r1, r1, #21
 8004714:	430a      	orrs	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	e047      	b.n	80047b6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	2380      	movs	r3, #128	@ 0x80
 800472c:	015b      	lsls	r3, r3, #5
 800472e:	429a      	cmp	r2, r3
 8004730:	d107      	bne.n	8004742 <UART_Start_Receive_IT+0x1b6>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a23      	ldr	r2, [pc, #140]	@ (80047cc <UART_Start_Receive_IT+0x240>)
 800473e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004740:	e002      	b.n	8004748 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a22      	ldr	r2, [pc, #136]	@ (80047d0 <UART_Start_Receive_IT+0x244>)
 8004746:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d019      	beq.n	8004784 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004750:	f3ef 8310 	mrs	r3, PRIMASK
 8004754:	61fb      	str	r3, [r7, #28]
  return(result);
 8004756:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800475a:	2301      	movs	r3, #1
 800475c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2190      	movs	r1, #144	@ 0x90
 8004772:	0049      	lsls	r1, r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	e018      	b.n	80047b6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004784:	f3ef 8310 	mrs	r3, PRIMASK
 8004788:	613b      	str	r3, [r7, #16]
  return(result);
 800478a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800478c:	653b      	str	r3, [r7, #80]	@ 0x50
 800478e:	2301      	movs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			@ (mov r8, r8)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2120      	movs	r1, #32
 80047a6:	430a      	orrs	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f383 8810 	msr	PRIMASK, r3
}
 80047b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b018      	add	sp, #96	@ 0x60
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	000001ff 	.word	0x000001ff
 80047c4:	08005319 	.word	0x08005319
 80047c8:	08004fe9 	.word	0x08004fe9
 80047cc:	08004e31 	.word	0x08004e31
 80047d0:	08004c79 	.word	0x08004c79

080047d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08e      	sub	sp, #56	@ 0x38
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047dc:	f3ef 8310 	mrs	r3, PRIMASK
 80047e0:	617b      	str	r3, [r7, #20]
  return(result);
 80047e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e6:	2301      	movs	r3, #1
 80047e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4926      	ldr	r1, [pc, #152]	@ (8004898 <UART_EndRxTransfer+0xc4>)
 80047fe:	400a      	ands	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f383 8810 	msr	PRIMASK, r3
}
 800480c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480e:	f3ef 8310 	mrs	r3, PRIMASK
 8004812:	623b      	str	r3, [r7, #32]
  return(result);
 8004814:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004816:	633b      	str	r3, [r7, #48]	@ 0x30
 8004818:	2301      	movs	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	491b      	ldr	r1, [pc, #108]	@ (800489c <UART_EndRxTransfer+0xc8>)
 8004830:	400a      	ands	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483a:	f383 8810 	msr	PRIMASK, r3
}
 800483e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d118      	bne.n	800487a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004848:	f3ef 8310 	mrs	r3, PRIMASK
 800484c:	60bb      	str	r3, [r7, #8]
  return(result);
 800484e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004852:	2301      	movs	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f383 8810 	msr	PRIMASK, r3
}
 800485c:	46c0      	nop			@ (mov r8, r8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2110      	movs	r1, #16
 800486a:	438a      	bics	r2, r1
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	228c      	movs	r2, #140	@ 0x8c
 800487e:	2120      	movs	r1, #32
 8004880:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	46bd      	mov	sp, r7
 8004892:	b00e      	add	sp, #56	@ 0x38
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	fffffedf 	.word	0xfffffedf
 800489c:	effffffe 	.word	0xeffffffe

080048a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	225e      	movs	r2, #94	@ 0x5e
 80048b2:	2100      	movs	r1, #0
 80048b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2256      	movs	r2, #86	@ 0x56
 80048ba:	2100      	movs	r1, #0
 80048bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff fb17 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b004      	add	sp, #16
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b08a      	sub	sp, #40	@ 0x28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2288      	movs	r2, #136	@ 0x88
 80048da:	589b      	ldr	r3, [r3, r2]
 80048dc:	2b21      	cmp	r3, #33	@ 0x21
 80048de:	d14c      	bne.n	800497a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2256      	movs	r2, #86	@ 0x56
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d132      	bne.n	8004952 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ec:	f3ef 8310 	mrs	r3, PRIMASK
 80048f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048f2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f6:	2301      	movs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2180      	movs	r1, #128	@ 0x80
 800490e:	438a      	bics	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f383 8810 	msr	PRIMASK, r3
}
 800491c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8310 	mrs	r3, PRIMASK
 8004922:	617b      	str	r3, [r7, #20]
  return(result);
 8004924:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	2301      	movs	r3, #1
 800492a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2140      	movs	r1, #64	@ 0x40
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004950:	e013      	b.n	800497a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2256      	movs	r2, #86	@ 0x56
 800496c:	5a9b      	ldrh	r3, [r3, r2]
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b299      	uxth	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2256      	movs	r2, #86	@ 0x56
 8004978:	5299      	strh	r1, [r3, r2]
}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b00a      	add	sp, #40	@ 0x28
 8004980:	bd80      	pop	{r7, pc}

08004982 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08c      	sub	sp, #48	@ 0x30
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2288      	movs	r2, #136	@ 0x88
 800498e:	589b      	ldr	r3, [r3, r2]
 8004990:	2b21      	cmp	r3, #33	@ 0x21
 8004992:	d151      	bne.n	8004a38 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2256      	movs	r2, #86	@ 0x56
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d132      	bne.n	8004a06 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a0:	f3ef 8310 	mrs	r3, PRIMASK
 80049a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049aa:	2301      	movs	r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f383 8810 	msr	PRIMASK, r3
}
 80049b4:	46c0      	nop			@ (mov r8, r8)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2180      	movs	r1, #128	@ 0x80
 80049c2:	438a      	bics	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d2:	f3ef 8310 	mrs	r3, PRIMASK
 80049d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80049d8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
 80049dc:	2301      	movs	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f383 8810 	msr	PRIMASK, r3
}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2140      	movs	r1, #64	@ 0x40
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a04:	e018      	b.n	8004a38 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	001a      	movs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	05d2      	lsls	r2, r2, #23
 8004a18:	0dd2      	lsrs	r2, r2, #23
 8004a1a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2256      	movs	r2, #86	@ 0x56
 8004a2a:	5a9b      	ldrh	r3, [r3, r2]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b299      	uxth	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2256      	movs	r2, #86	@ 0x56
 8004a36:	5299      	strh	r1, [r3, r2]
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b00c      	add	sp, #48	@ 0x30
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	@ 0x30
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2288      	movs	r2, #136	@ 0x88
 8004a4c:	589b      	ldr	r3, [r3, r2]
 8004a4e:	2b21      	cmp	r3, #33	@ 0x21
 8004a50:	d165      	bne.n	8004b1e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a52:	232e      	movs	r3, #46	@ 0x2e
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	216a      	movs	r1, #106	@ 0x6a
 8004a5a:	5a52      	ldrh	r2, [r2, r1]
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	e059      	b.n	8004b14 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2256      	movs	r2, #86	@ 0x56
 8004a64:	5a9b      	ldrh	r3, [r3, r2]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d133      	bne.n	8004ad4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a72:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a76:	2301      	movs	r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f383 8810 	msr	PRIMASK, r3
}
 8004a80:	46c0      	nop			@ (mov r8, r8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4926      	ldr	r1, [pc, #152]	@ (8004b28 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f383 8810 	msr	PRIMASK, r3
}
 8004a9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aa4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f383 8810 	msr	PRIMASK, r3
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2140      	movs	r1, #64	@ 0x40
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f383 8810 	msr	PRIMASK, r3
}
 8004ace:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004ad0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004ad2:	e024      	b.n	8004b1e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	4013      	ands	r3, r2
 8004ade:	d013      	beq.n	8004b08 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2256      	movs	r2, #86	@ 0x56
 8004afa:	5a9b      	ldrh	r3, [r3, r2]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b299      	uxth	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2256      	movs	r2, #86	@ 0x56
 8004b06:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b08:	212e      	movs	r1, #46	@ 0x2e
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	3a01      	subs	r2, #1
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	232e      	movs	r3, #46	@ 0x2e
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1a0      	bne.n	8004a60 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b00c      	add	sp, #48	@ 0x30
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	ff7fffff 	.word	0xff7fffff

08004b2c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08c      	sub	sp, #48	@ 0x30
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2288      	movs	r2, #136	@ 0x88
 8004b38:	589b      	ldr	r3, [r3, r2]
 8004b3a:	2b21      	cmp	r3, #33	@ 0x21
 8004b3c:	d16a      	bne.n	8004c14 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b3e:	232e      	movs	r3, #46	@ 0x2e
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	216a      	movs	r1, #106	@ 0x6a
 8004b46:	5a52      	ldrh	r2, [r2, r1]
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e05e      	b.n	8004c0a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2256      	movs	r2, #86	@ 0x56
 8004b50:	5a9b      	ldrh	r3, [r3, r2]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d133      	bne.n	8004bc0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b62:	2301      	movs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4928      	ldr	r1, [pc, #160]	@ (8004c1c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b90:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	2301      	movs	r3, #1
 8004b96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2140      	movs	r1, #64	@ 0x40
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004bbc:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004bbe:	e029      	b.n	8004c14 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2280      	movs	r2, #128	@ 0x80
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d018      	beq.n	8004bfe <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	05d2      	lsls	r2, r2, #23
 8004bde:	0dd2      	lsrs	r2, r2, #23
 8004be0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2256      	movs	r2, #86	@ 0x56
 8004bf0:	5a9b      	ldrh	r3, [r3, r2]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b299      	uxth	r1, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2256      	movs	r2, #86	@ 0x56
 8004bfc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004bfe:	212e      	movs	r1, #46	@ 0x2e
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	881a      	ldrh	r2, [r3, #0]
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	3a01      	subs	r2, #1
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	232e      	movs	r3, #46	@ 0x2e
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d19b      	bne.n	8004b4c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b00c      	add	sp, #48	@ 0x30
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	ff7fffff 	.word	0xff7fffff

08004c20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	2301      	movs	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			@ (mov r8, r8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2140      	movs	r1, #64	@ 0x40
 8004c4a:	438a      	bics	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2288      	movs	r2, #136	@ 0x88
 8004c5e:	2120      	movs	r1, #32
 8004c60:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7ff f93a 	bl	8003ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c70:	46c0      	nop			@ (mov r8, r8)
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b006      	add	sp, #24
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b094      	sub	sp, #80	@ 0x50
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c80:	204e      	movs	r0, #78	@ 0x4e
 8004c82:	183b      	adds	r3, r7, r0
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	2160      	movs	r1, #96	@ 0x60
 8004c88:	5a52      	ldrh	r2, [r2, r1]
 8004c8a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	228c      	movs	r2, #140	@ 0x8c
 8004c90:	589b      	ldr	r3, [r3, r2]
 8004c92:	2b22      	cmp	r3, #34	@ 0x22
 8004c94:	d000      	beq.n	8004c98 <UART_RxISR_8BIT+0x20>
 8004c96:	e0ba      	b.n	8004e0e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c9e:	214c      	movs	r1, #76	@ 0x4c
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	225e      	movs	r2, #94	@ 0x5e
 8004cc8:	5a9b      	ldrh	r3, [r3, r2]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b299      	uxth	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	225e      	movs	r2, #94	@ 0x5e
 8004cd4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	225e      	movs	r2, #94	@ 0x5e
 8004cda:	5a9b      	ldrh	r3, [r3, r2]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d000      	beq.n	8004ce4 <UART_RxISR_8BIT+0x6c>
 8004ce2:	e09c      	b.n	8004e1e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cee:	2301      	movs	r3, #1
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4948      	ldr	r1, [pc, #288]	@ (8004e28 <UART_RxISR_8BIT+0x1b0>)
 8004d06:	400a      	ands	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d16:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d20:	2301      	movs	r3, #1
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d26:	f383 8810 	msr	PRIMASK, r3
}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	438a      	bics	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d42:	f383 8810 	msr	PRIMASK, r3
}
 8004d46:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	228c      	movs	r2, #140	@ 0x8c
 8004d4c:	2120      	movs	r1, #32
 8004d4e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	2380      	movs	r3, #128	@ 0x80
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	4013      	ands	r3, r2
 8004d68:	d018      	beq.n	8004d9c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d70:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d74:	2301      	movs	r3, #1
 8004d76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4928      	ldr	r1, [pc, #160]	@ (8004e2c <UART_RxISR_8BIT+0x1b4>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d12f      	bne.n	8004e04 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004daa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dae:	60fb      	str	r3, [r7, #12]
  return(result);
 8004db0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db4:	2301      	movs	r3, #1
 8004db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f383 8810 	msr	PRIMASK, r3
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2110      	movs	r1, #16
 8004dcc:	438a      	bics	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f383 8810 	msr	PRIMASK, r3
}
 8004dda:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2210      	movs	r2, #16
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d103      	bne.n	8004df2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2210      	movs	r2, #16
 8004df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	225c      	movs	r2, #92	@ 0x5c
 8004df6:	5a9a      	ldrh	r2, [r3, r2]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff f881 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e02:	e00c      	b.n	8004e1e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7fb fd20 	bl	800084c <HAL_UART_RxCpltCallback>
}
 8004e0c:	e007      	b.n	8004e1e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2108      	movs	r1, #8
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	619a      	str	r2, [r3, #24]
}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b014      	add	sp, #80	@ 0x50
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	fffffedf 	.word	0xfffffedf
 8004e2c:	fbffffff 	.word	0xfbffffff

08004e30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b094      	sub	sp, #80	@ 0x50
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e38:	204e      	movs	r0, #78	@ 0x4e
 8004e3a:	183b      	adds	r3, r7, r0
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	2160      	movs	r1, #96	@ 0x60
 8004e40:	5a52      	ldrh	r2, [r2, r1]
 8004e42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	228c      	movs	r2, #140	@ 0x8c
 8004e48:	589b      	ldr	r3, [r3, r2]
 8004e4a:	2b22      	cmp	r3, #34	@ 0x22
 8004e4c:	d000      	beq.n	8004e50 <UART_RxISR_16BIT+0x20>
 8004e4e:	e0ba      	b.n	8004fc6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e56:	214c      	movs	r1, #76	@ 0x4c
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	183a      	adds	r2, r7, r0
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	225e      	movs	r2, #94	@ 0x5e
 8004e80:	5a9b      	ldrh	r3, [r3, r2]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b299      	uxth	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	225e      	movs	r2, #94	@ 0x5e
 8004e8c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	225e      	movs	r2, #94	@ 0x5e
 8004e92:	5a9b      	ldrh	r3, [r3, r2]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d000      	beq.n	8004e9c <UART_RxISR_16BIT+0x6c>
 8004e9a:	e09c      	b.n	8004fd6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	623b      	str	r3, [r7, #32]
  return(result);
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4948      	ldr	r1, [pc, #288]	@ (8004fe0 <UART_RxISR_16BIT+0x1b0>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ece:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed8:	2301      	movs	r3, #1
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2101      	movs	r1, #1
 8004ef0:	438a      	bics	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	228c      	movs	r2, #140	@ 0x8c
 8004f04:	2120      	movs	r1, #32
 8004f06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	2380      	movs	r3, #128	@ 0x80
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d018      	beq.n	8004f54 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f22:	f3ef 8310 	mrs	r3, PRIMASK
 8004f26:	617b      	str	r3, [r7, #20]
  return(result);
 8004f28:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4928      	ldr	r1, [pc, #160]	@ (8004fe4 <UART_RxISR_16BIT+0x1b4>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f383 8810 	msr	PRIMASK, r3
}
 8004f52:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d12f      	bne.n	8004fbc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f62:	f3ef 8310 	mrs	r3, PRIMASK
 8004f66:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f68:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2110      	movs	r1, #16
 8004f84:	438a      	bics	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d103      	bne.n	8004faa <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	225c      	movs	r2, #92	@ 0x5c
 8004fae:	5a9a      	ldrh	r2, [r3, r2]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7fe ffa5 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fba:	e00c      	b.n	8004fd6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7fb fc44 	bl	800084c <HAL_UART_RxCpltCallback>
}
 8004fc4:	e007      	b.n	8004fd6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2108      	movs	r1, #8
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]
}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b014      	add	sp, #80	@ 0x50
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	fffffedf 	.word	0xfffffedf
 8004fe4:	fbffffff 	.word	0xfbffffff

08004fe8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b0a0      	sub	sp, #128	@ 0x80
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ff0:	237a      	movs	r3, #122	@ 0x7a
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	2160      	movs	r1, #96	@ 0x60
 8004ff8:	5a52      	ldrh	r2, [r2, r1]
 8004ffa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	228c      	movs	r2, #140	@ 0x8c
 8005018:	589b      	ldr	r3, [r3, r2]
 800501a:	2b22      	cmp	r3, #34	@ 0x22
 800501c:	d000      	beq.n	8005020 <UART_RxISR_8BIT_FIFOEN+0x38>
 800501e:	e165      	b.n	80052ec <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005020:	236e      	movs	r3, #110	@ 0x6e
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	2168      	movs	r1, #104	@ 0x68
 8005028:	5a52      	ldrh	r2, [r2, r1]
 800502a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800502c:	e10c      	b.n	8005248 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005034:	216c      	movs	r1, #108	@ 0x6c
 8005036:	187b      	adds	r3, r7, r1
 8005038:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800503a:	187b      	adds	r3, r7, r1
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	237a      	movs	r3, #122	@ 0x7a
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b2d9      	uxtb	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504c:	400a      	ands	r2, r1
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	225e      	movs	r2, #94	@ 0x5e
 8005060:	5a9b      	ldrh	r3, [r3, r2]
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b299      	uxth	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	225e      	movs	r2, #94	@ 0x5e
 800506c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005078:	2207      	movs	r2, #7
 800507a:	4013      	ands	r3, r2
 800507c:	d049      	beq.n	8005112 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800507e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005080:	2201      	movs	r2, #1
 8005082:	4013      	ands	r3, r2
 8005084:	d010      	beq.n	80050a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005086:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	4013      	ands	r3, r2
 800508e:	d00b      	beq.n	80050a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2290      	movs	r2, #144	@ 0x90
 800509c:	589b      	ldr	r3, [r3, r2]
 800509e:	2201      	movs	r2, #1
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2190      	movs	r1, #144	@ 0x90
 80050a6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050aa:	2202      	movs	r2, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	d00f      	beq.n	80050d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80050b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050b2:	2201      	movs	r2, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2202      	movs	r2, #2
 80050be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2290      	movs	r2, #144	@ 0x90
 80050c4:	589b      	ldr	r3, [r3, r2]
 80050c6:	2204      	movs	r2, #4
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2190      	movs	r1, #144	@ 0x90
 80050ce:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050d2:	2204      	movs	r2, #4
 80050d4:	4013      	ands	r3, r2
 80050d6:	d00f      	beq.n	80050f8 <UART_RxISR_8BIT_FIFOEN+0x110>
 80050d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	d00b      	beq.n	80050f8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2204      	movs	r2, #4
 80050e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2290      	movs	r2, #144	@ 0x90
 80050ec:	589b      	ldr	r3, [r3, r2]
 80050ee:	2202      	movs	r2, #2
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2190      	movs	r1, #144	@ 0x90
 80050f6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2290      	movs	r2, #144	@ 0x90
 80050fc:	589b      	ldr	r3, [r3, r2]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0018      	movs	r0, r3
 8005106:	f7fe fef5 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2290      	movs	r2, #144	@ 0x90
 800510e:	2100      	movs	r1, #0
 8005110:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	225e      	movs	r2, #94	@ 0x5e
 8005116:	5a9b      	ldrh	r3, [r3, r2]
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d000      	beq.n	8005120 <UART_RxISR_8BIT_FIFOEN+0x138>
 800511e:	e093      	b.n	8005248 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005120:	f3ef 8310 	mrs	r3, PRIMASK
 8005124:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800512a:	2301      	movs	r3, #1
 800512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005130:	f383 8810 	msr	PRIMASK, r3
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4970      	ldr	r1, [pc, #448]	@ (8005304 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8005142:	400a      	ands	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005148:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005152:	f3ef 8310 	mrs	r3, PRIMASK
 8005156:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800515a:	667b      	str	r3, [r7, #100]	@ 0x64
 800515c:	2301      	movs	r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4965      	ldr	r1, [pc, #404]	@ (8005308 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005174:	400a      	ands	r2, r1
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800517e:	f383 8810 	msr	PRIMASK, r3
}
 8005182:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	228c      	movs	r2, #140	@ 0x8c
 8005188:	2120      	movs	r1, #32
 800518a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	2380      	movs	r3, #128	@ 0x80
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	4013      	ands	r3, r2
 80051a4:	d018      	beq.n	80051d8 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a6:	f3ef 8310 	mrs	r3, PRIMASK
 80051aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80051b0:	2301      	movs	r3, #1
 80051b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	f383 8810 	msr	PRIMASK, r3
}
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4951      	ldr	r1, [pc, #324]	@ (800530c <UART_RxISR_8BIT_FIFOEN+0x324>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d2:	f383 8810 	msr	PRIMASK, r3
}
 80051d6:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d12f      	bne.n	8005240 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ea:	623b      	str	r3, [r7, #32]
  return(result);
 80051ec:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051f0:	2301      	movs	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2110      	movs	r1, #16
 8005208:	438a      	bics	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	f383 8810 	msr	PRIMASK, r3
}
 8005216:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	2210      	movs	r2, #16
 8005220:	4013      	ands	r3, r2
 8005222:	2b10      	cmp	r3, #16
 8005224:	d103      	bne.n	800522e <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2210      	movs	r2, #16
 800522c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	225c      	movs	r2, #92	@ 0x5c
 8005232:	5a9a      	ldrh	r2, [r3, r2]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0011      	movs	r1, r2
 8005238:	0018      	movs	r0, r3
 800523a:	f7fe fe63 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
 800523e:	e003      	b.n	8005248 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	0018      	movs	r0, r3
 8005244:	f7fb fb02 	bl	800084c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005248:	236e      	movs	r3, #110	@ 0x6e
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <UART_RxISR_8BIT_FIFOEN+0x274>
 8005252:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005254:	2220      	movs	r2, #32
 8005256:	4013      	ands	r3, r2
 8005258:	d000      	beq.n	800525c <UART_RxISR_8BIT_FIFOEN+0x274>
 800525a:	e6e8      	b.n	800502e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800525c:	205a      	movs	r0, #90	@ 0x5a
 800525e:	183b      	adds	r3, r7, r0
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	215e      	movs	r1, #94	@ 0x5e
 8005264:	5a52      	ldrh	r2, [r2, r1]
 8005266:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005268:	0001      	movs	r1, r0
 800526a:	187b      	adds	r3, r7, r1
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d044      	beq.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x314>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2268      	movs	r2, #104	@ 0x68
 8005276:	5a9b      	ldrh	r3, [r3, r2]
 8005278:	187a      	adds	r2, r7, r1
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d23d      	bcs.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	60bb      	str	r3, [r7, #8]
  return(result);
 8005286:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005288:	657b      	str	r3, [r7, #84]	@ 0x54
 800528a:	2301      	movs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			@ (mov r8, r8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	491b      	ldr	r1, [pc, #108]	@ (8005310 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a17      	ldr	r2, [pc, #92]	@ (8005314 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80052b6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	617b      	str	r3, [r7, #20]
  return(result);
 80052be:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80052c2:	2301      	movs	r3, #1
 80052c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			@ (mov r8, r8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2120      	movs	r1, #32
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ea:	e007      	b.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2108      	movs	r1, #8
 80052f8:	430a      	orrs	r2, r1
 80052fa:	619a      	str	r2, [r3, #24]
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b020      	add	sp, #128	@ 0x80
 8005302:	bd80      	pop	{r7, pc}
 8005304:	fffffeff 	.word	0xfffffeff
 8005308:	effffffe 	.word	0xeffffffe
 800530c:	fbffffff 	.word	0xfbffffff
 8005310:	efffffff 	.word	0xefffffff
 8005314:	08004c79 	.word	0x08004c79

08005318 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b0a2      	sub	sp, #136	@ 0x88
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005320:	2382      	movs	r3, #130	@ 0x82
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	2160      	movs	r1, #96	@ 0x60
 8005328:	5a52      	ldrh	r2, [r2, r1]
 800532a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	2284      	movs	r2, #132	@ 0x84
 8005334:	18ba      	adds	r2, r7, r2
 8005336:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	228c      	movs	r2, #140	@ 0x8c
 800534c:	589b      	ldr	r3, [r3, r2]
 800534e:	2b22      	cmp	r3, #34	@ 0x22
 8005350:	d000      	beq.n	8005354 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005352:	e16f      	b.n	8005634 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005354:	2376      	movs	r3, #118	@ 0x76
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	2168      	movs	r1, #104	@ 0x68
 800535c:	5a52      	ldrh	r2, [r2, r1]
 800535e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005360:	e114      	b.n	800558c <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005368:	2174      	movs	r1, #116	@ 0x74
 800536a:	187b      	adds	r3, r7, r1
 800536c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005372:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005374:	187b      	adds	r3, r7, r1
 8005376:	2282      	movs	r2, #130	@ 0x82
 8005378:	18ba      	adds	r2, r7, r2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	4013      	ands	r3, r2
 8005380:	b29a      	uxth	r2, r3
 8005382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005384:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	225e      	movs	r2, #94	@ 0x5e
 8005394:	5a9b      	ldrh	r3, [r3, r2]
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b299      	uxth	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	225e      	movs	r2, #94	@ 0x5e
 80053a0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2184      	movs	r1, #132	@ 0x84
 80053aa:	187a      	adds	r2, r7, r1
 80053ac:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2207      	movs	r2, #7
 80053b4:	4013      	ands	r3, r2
 80053b6:	d04e      	beq.n	8005456 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	4013      	ands	r3, r2
 80053c0:	d010      	beq.n	80053e4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80053c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	4013      	ands	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2290      	movs	r2, #144	@ 0x90
 80053d8:	589b      	ldr	r3, [r3, r2]
 80053da:	2201      	movs	r2, #1
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2190      	movs	r1, #144	@ 0x90
 80053e2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053e4:	2384      	movs	r3, #132	@ 0x84
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2202      	movs	r2, #2
 80053ec:	4013      	ands	r3, r2
 80053ee:	d00f      	beq.n	8005410 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80053f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f2:	2201      	movs	r2, #1
 80053f4:	4013      	ands	r3, r2
 80053f6:	d00b      	beq.n	8005410 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2202      	movs	r2, #2
 80053fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2290      	movs	r2, #144	@ 0x90
 8005404:	589b      	ldr	r3, [r3, r2]
 8005406:	2204      	movs	r2, #4
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2190      	movs	r1, #144	@ 0x90
 800540e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005410:	2384      	movs	r3, #132	@ 0x84
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2204      	movs	r2, #4
 8005418:	4013      	ands	r3, r2
 800541a:	d00f      	beq.n	800543c <UART_RxISR_16BIT_FIFOEN+0x124>
 800541c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800541e:	2201      	movs	r2, #1
 8005420:	4013      	ands	r3, r2
 8005422:	d00b      	beq.n	800543c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2204      	movs	r2, #4
 800542a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2290      	movs	r2, #144	@ 0x90
 8005430:	589b      	ldr	r3, [r3, r2]
 8005432:	2202      	movs	r2, #2
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2190      	movs	r1, #144	@ 0x90
 800543a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2290      	movs	r2, #144	@ 0x90
 8005440:	589b      	ldr	r3, [r3, r2]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f7fe fd53 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2290      	movs	r2, #144	@ 0x90
 8005452:	2100      	movs	r1, #0
 8005454:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	225e      	movs	r2, #94	@ 0x5e
 800545a:	5a9b      	ldrh	r3, [r3, r2]
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d000      	beq.n	8005464 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005462:	e093      	b.n	800558c <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005464:	f3ef 8310 	mrs	r3, PRIMASK
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800546a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800546e:	2301      	movs	r3, #1
 8005470:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005474:	f383 8810 	msr	PRIMASK, r3
}
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4971      	ldr	r1, [pc, #452]	@ (800564c <UART_RxISR_16BIT_FIFOEN+0x334>)
 8005486:	400a      	ands	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005490:	f383 8810 	msr	PRIMASK, r3
}
 8005494:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800549c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800549e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054a0:	2301      	movs	r3, #1
 80054a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4966      	ldr	r1, [pc, #408]	@ (8005650 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80054b8:	400a      	ands	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054be:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	228c      	movs	r2, #140	@ 0x8c
 80054cc:	2120      	movs	r1, #32
 80054ce:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	4013      	ands	r3, r2
 80054e8:	d018      	beq.n	800551c <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ea:	f3ef 8310 	mrs	r3, PRIMASK
 80054ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80054f4:	2301      	movs	r3, #1
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4952      	ldr	r1, [pc, #328]	@ (8005654 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 800550c:	400a      	ands	r2, r1
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005512:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	f383 8810 	msr	PRIMASK, r3
}
 800551a:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d12f      	bne.n	8005584 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552a:	f3ef 8310 	mrs	r3, PRIMASK
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	663b      	str	r3, [r7, #96]	@ 0x60
 8005534:	2301      	movs	r3, #1
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	46c0      	nop			@ (mov r8, r8)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2110      	movs	r1, #16
 800554c:	438a      	bics	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005556:	f383 8810 	msr	PRIMASK, r3
}
 800555a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2210      	movs	r2, #16
 8005564:	4013      	ands	r3, r2
 8005566:	2b10      	cmp	r3, #16
 8005568:	d103      	bne.n	8005572 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	225c      	movs	r2, #92	@ 0x5c
 8005576:	5a9a      	ldrh	r2, [r3, r2]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f7fe fcc1 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
 8005582:	e003      	b.n	800558c <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	0018      	movs	r0, r3
 8005588:	f7fb f960 	bl	800084c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800558c:	2376      	movs	r3, #118	@ 0x76
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005596:	2384      	movs	r3, #132	@ 0x84
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2220      	movs	r2, #32
 800559e:	4013      	ands	r3, r2
 80055a0:	d000      	beq.n	80055a4 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80055a2:	e6de      	b.n	8005362 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80055a4:	205e      	movs	r0, #94	@ 0x5e
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	215e      	movs	r1, #94	@ 0x5e
 80055ac:	5a52      	ldrh	r2, [r2, r1]
 80055ae:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80055b0:	0001      	movs	r1, r0
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d044      	beq.n	8005644 <UART_RxISR_16BIT_FIFOEN+0x32c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2268      	movs	r2, #104	@ 0x68
 80055be:	5a9b      	ldrh	r3, [r3, r2]
 80055c0:	187a      	adds	r2, r7, r1
 80055c2:	8812      	ldrh	r2, [r2, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d23d      	bcs.n	8005644 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c8:	f3ef 8310 	mrs	r3, PRIMASK
 80055cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055d2:	2301      	movs	r3, #1
 80055d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f383 8810 	msr	PRIMASK, r3
}
 80055dc:	46c0      	nop			@ (mov r8, r8)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	491b      	ldr	r1, [pc, #108]	@ (8005658 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80055ea:	400a      	ands	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]
 80055ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f383 8810 	msr	PRIMASK, r3
}
 80055f8:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a17      	ldr	r2, [pc, #92]	@ (800565c <UART_RxISR_16BIT_FIFOEN+0x344>)
 80055fe:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	61bb      	str	r3, [r7, #24]
  return(result);
 8005606:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005608:	657b      	str	r3, [r7, #84]	@ 0x54
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2120      	movs	r1, #32
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005632:	e007      	b.n	8005644 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2108      	movs	r1, #8
 8005640:	430a      	orrs	r2, r1
 8005642:	619a      	str	r2, [r3, #24]
}
 8005644:	46c0      	nop			@ (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b022      	add	sp, #136	@ 0x88
 800564a:	bd80      	pop	{r7, pc}
 800564c:	fffffeff 	.word	0xfffffeff
 8005650:	effffffe 	.word	0xeffffffe
 8005654:	fbffffff 	.word	0xfbffffff
 8005658:	efffffff 	.word	0xefffffff
 800565c:	08004e31 	.word	0x08004e31

08005660 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b002      	add	sp, #8
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005678:	46c0      	nop			@ (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005688:	46c0      	nop			@ (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b002      	add	sp, #8
 800568e:	bd80      	pop	{r7, pc}

08005690 <memset>:
 8005690:	0003      	movs	r3, r0
 8005692:	1882      	adds	r2, r0, r2
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	7019      	strb	r1, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2600      	movs	r6, #0
 80056a4:	4c0c      	ldr	r4, [pc, #48]	@ (80056d8 <__libc_init_array+0x38>)
 80056a6:	4d0d      	ldr	r5, [pc, #52]	@ (80056dc <__libc_init_array+0x3c>)
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	42a6      	cmp	r6, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	2600      	movs	r6, #0
 80056b2:	f000 f819 	bl	80056e8 <_init>
 80056b6:	4c0a      	ldr	r4, [pc, #40]	@ (80056e0 <__libc_init_array+0x40>)
 80056b8:	4d0a      	ldr	r5, [pc, #40]	@ (80056e4 <__libc_init_array+0x44>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	42a6      	cmp	r6, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	00b3      	lsls	r3, r6, #2
 80056c6:	58eb      	ldr	r3, [r5, r3]
 80056c8:	4798      	blx	r3
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	00b3      	lsls	r3, r6, #2
 80056d0:	58eb      	ldr	r3, [r5, r3]
 80056d2:	4798      	blx	r3
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	080057cc 	.word	0x080057cc
 80056dc:	080057cc 	.word	0x080057cc
 80056e0:	080057d0 	.word	0x080057d0
 80056e4:	080057cc 	.word	0x080057cc

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	46c0      	nop			@ (mov r8, r8)
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
