
Display Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800573c  0800573c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  0800573c  0800573c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800573c  0800573c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800573c  0800573c  0000673c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005740  08005740  00006740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005744  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000000c  08005750  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005750  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd84  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cc  00000000  00000000  00016db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00018e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  00019c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015666  00000000  00000000  0001a736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a61  00000000  00000000  0002fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e84  00000000  00000000  000407fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000ca6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000cd8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005658 	.word	0x08005658

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005658 	.word	0x08005658

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <Set_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	b2d9      	uxtb	r1, r3
 800022a:	4b11      	ldr	r3, [pc, #68]	@ (8000270 <Set_LED+0x58>)
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	0092      	lsls	r2, r2, #2
 8000230:	54d1      	strb	r1, [r2, r3]
	LED_Data[LEDnum][1] = Green;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	b2d9      	uxtb	r1, r3
 8000236:	4a0e      	ldr	r2, [pc, #56]	@ (8000270 <Set_LED+0x58>)
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	18d3      	adds	r3, r2, r3
 800023e:	3301      	adds	r3, #1
 8000240:	1c0a      	adds	r2, r1, #0
 8000242:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	b2d9      	uxtb	r1, r3
 8000248:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <Set_LED+0x58>)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	18d3      	adds	r3, r2, r3
 8000250:	3302      	adds	r3, #2
 8000252:	1c0a      	adds	r2, r1, #0
 8000254:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2d9      	uxtb	r1, r3
 800025a:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <Set_LED+0x58>)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	18d3      	adds	r3, r2, r3
 8000262:	3303      	adds	r3, #3
 8000264:	1c0a      	adds	r2, r1, #0
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	46c0      	nop			@ (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b004      	add	sp, #16
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000028 	.word	0x20000028

08000274 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800027e:	2100      	movs	r1, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f002 f8f3 	bl	800246c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000288:	2201      	movs	r2, #1
 800028a:	601a      	str	r2, [r3, #0]
}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000054 	.word	0x20000054
 8000298:	20000050 	.word	0x20000050

0800029c <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+40];

void WS2812_Send (void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	e038      	b.n	800031e <WS2812_Send+0x82>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80002ac:	4a2f      	ldr	r2, [pc, #188]	@ (800036c <WS2812_Send+0xd0>)
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	18d3      	adds	r3, r2, r3
 80002b4:	3301      	adds	r3, #1
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	041a      	lsls	r2, r3, #16
 80002ba:	492c      	ldr	r1, [pc, #176]	@ (800036c <WS2812_Send+0xd0>)
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	18cb      	adds	r3, r1, r3
 80002c2:	3302      	adds	r3, #2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	021b      	lsls	r3, r3, #8
 80002c8:	4313      	orrs	r3, r2
 80002ca:	4928      	ldr	r1, [pc, #160]	@ (800036c <WS2812_Send+0xd0>)
 80002cc:	693a      	ldr	r2, [r7, #16]
 80002ce:	0092      	lsls	r2, r2, #2
 80002d0:	188a      	adds	r2, r1, r2
 80002d2:	3203      	adds	r2, #3
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 80002da:	2317      	movs	r3, #23
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e018      	b.n	8000312 <WS2812_Send+0x76>
		{
			if (color&(1<<i))
 80002e0:	2201      	movs	r2, #1
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	409a      	lsls	r2, r3
 80002e6:	0013      	movs	r3, r2
 80002e8:	001a      	movs	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4013      	ands	r3, r2
 80002ee:	d005      	beq.n	80002fc <WS2812_Send+0x60>
			{
				pwmData[indx] = 30;  // 2/3 of 90
 80002f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000370 <WS2812_Send+0xd4>)
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	211e      	movs	r1, #30
 80002f8:	52d1      	strh	r1, [r2, r3]
 80002fa:	e004      	b.n	8000306 <WS2812_Send+0x6a>
			}

			else pwmData[indx] = 10;  // 1/3 of 90
 80002fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000370 <WS2812_Send+0xd4>)
 80002fe:	697a      	ldr	r2, [r7, #20]
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	210a      	movs	r1, #10
 8000304:	52d1      	strh	r1, [r2, r3]

			indx++;
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3b01      	subs	r3, #1
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dae3      	bge.n	80002e0 <WS2812_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	3301      	adds	r3, #1
 800031c:	613b      	str	r3, [r7, #16]
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	2b09      	cmp	r3, #9
 8000322:	ddc3      	ble.n	80002ac <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<40; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	e00a      	b.n	8000340 <WS2812_Send+0xa4>
	{
		pwmData[indx] = 0;
 800032a:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <WS2812_Send+0xd4>)
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	2100      	movs	r1, #0
 8000332:	52d1      	strh	r1, [r2, r3]
		indx++;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	3301      	adds	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
	for (int i=0; i<40; i++)
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	3301      	adds	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b27      	cmp	r3, #39	@ 0x27
 8000344:	ddf1      	ble.n	800032a <WS2812_Send+0x8e>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	b29b      	uxth	r3, r3
 800034a:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <WS2812_Send+0xd4>)
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <WS2812_Send+0xd8>)
 800034e:	2100      	movs	r1, #0
 8000350:	f001 fe9e 	bl	8002090 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000354:	46c0      	nop			@ (mov r8, r8)
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <WS2812_Send+0xdc>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0fb      	beq.n	8000356 <WS2812_Send+0xba>
	datasentflag = 0;
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <WS2812_Send+0xdc>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	46c0      	nop			@ (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b006      	add	sp, #24
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000028 	.word	0x20000028
 8000370:	20000164 	.word	0x20000164
 8000374:	20000054 	.word	0x20000054
 8000378:	20000050 	.word	0x20000050

0800037c <toggleLED>:

void toggleLED(int LED, int r, int g, int b)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
 8000388:	603b      	str	r3, [r7, #0]
	for (int var = 0; var < MAX_LED; ++var)
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
 800038e:	e008      	b.n	80003a2 <toggleLED+0x26>
	{
		Set_LED(var, 0,0,0);
 8000390:	6978      	ldr	r0, [r7, #20]
 8000392:	2300      	movs	r3, #0
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	f7ff ff3e 	bl	8000218 <Set_LED>
	for (int var = 0; var < MAX_LED; ++var)
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	3301      	adds	r3, #1
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	2b09      	cmp	r3, #9
 80003a6:	ddf3      	ble.n	8000390 <toggleLED+0x14>
	}

	WS2812_Send();
 80003a8:	f7ff ff78 	bl	800029c <WS2812_Send>
	Set_LED(LED, r,g,b);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	68b9      	ldr	r1, [r7, #8]
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff ff30 	bl	8000218 <Set_LED>
	WS2812_Send();
 80003b8:	f7ff ff70 	bl	800029c <WS2812_Send>
}
 80003bc:	46c0      	nop			@ (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b006      	add	sp, #24
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ca:	f000 fc07 	bl	8000bdc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f84b 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 f9a7 	bl	8000724 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003d6:	f000 f89d 	bl	8000514 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80003da:	f000 f96f 	bl	80006bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, rx_buffer, 2);
 80003de:	491c      	ldr	r1, [pc, #112]	@ (8000450 <main+0x8c>)
 80003e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <main+0x90>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f003 f9b7 	bl	8003758 <HAL_UART_Receive_IT>

  for (int var = 0; var < MAX_LED; ++var)
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e008      	b.n	8000402 <main+0x3e>
  {
	Set_LED(var, 255,255,255);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	23ff      	movs	r3, #255	@ 0xff
 80003f4:	22ff      	movs	r2, #255	@ 0xff
 80003f6:	21ff      	movs	r1, #255	@ 0xff
 80003f8:	f7ff ff0e 	bl	8000218 <Set_LED>
  for (int var = 0; var < MAX_LED; ++var)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b09      	cmp	r3, #9
 8000406:	ddf3      	ble.n	80003f0 <main+0x2c>
  }

  WS2812_Send();
 8000408:	f7ff ff48 	bl	800029c <WS2812_Send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cfgFlag)
 800040c:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <main+0x94>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00a      	beq.n	800042c <main+0x68>
	  {
		  toggleLED(address, 0, 0, 0);
 8000416:	4b11      	ldr	r3, [pc, #68]	@ (800045c <main+0x98>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	0018      	movs	r0, r3
 800041c:	2300      	movs	r3, #0
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	f7ff ffab 	bl	800037c <toggleLED>
		  cfgFlag = 0;
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <main+0x94>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
	  }

	  if(readDigit)
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <main+0x9c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0ea      	beq.n	800040c <main+0x48>
	  {
		  toggleLED(digit, 0, 0, 0);
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <main+0xa0>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	2300      	movs	r3, #0
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	f7ff ff9b 	bl	800037c <toggleLED>
		  readDigit=0;
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <main+0x9c>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	  if(cfgFlag)
 800044c:	e7de      	b.n	800040c <main+0x48>
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	20000138 	.word	0x20000138
 8000454:	200000a0 	.word	0x200000a0
 8000458:	20000134 	.word	0x20000134
 800045c:	20000160 	.word	0x20000160
 8000460:	20000135 	.word	0x20000135
 8000464:	20000161 	.word	0x20000161

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b093      	sub	sp, #76	@ 0x4c
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	2414      	movs	r4, #20
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2334      	movs	r3, #52	@ 0x34
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f005 f8c1 	bl	8005600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	2310      	movs	r3, #16
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f005 f8ba 	bl	8005600 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f001 f83f 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	@ 0x80
 80004a0:	0252      	lsls	r2, r2, #9
 80004a2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a4:	0021      	movs	r1, r4
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2202      	movs	r2, #2
 80004aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2203      	movs	r2, #3
 80004b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2210      	movs	r2, #16
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	0292      	lsls	r2, r2, #10
 80004c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	0592      	lsls	r2, r2, #22
 80004cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 f86b 	bl	80015ac <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x76>
  {
    Error_Handler();
 80004da:	f000 fa4f 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2202      	movs	r2, #2
 80004e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2280      	movs	r2, #128	@ 0x80
 80004f4:	01d2      	lsls	r2, r2, #7
 80004f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2102      	movs	r1, #2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fb65 	bl	8001bcc <HAL_RCC_ClockConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000506:	f000 fa39 	bl	800097c <Error_Handler>
  }
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b013      	add	sp, #76	@ 0x4c
 8000510:	bd90      	pop	{r4, r7, pc}
	...

08000514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b09c      	sub	sp, #112	@ 0x70
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	2360      	movs	r3, #96	@ 0x60
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	0018      	movs	r0, r3
 8000520:	2310      	movs	r3, #16
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f005 f86b 	bl	8005600 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052a:	2354      	movs	r3, #84	@ 0x54
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	230c      	movs	r3, #12
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f005 f863 	bl	8005600 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053a:	2338      	movs	r3, #56	@ 0x38
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	231c      	movs	r3, #28
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f005 f85b 	bl	8005600 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	2334      	movs	r3, #52	@ 0x34
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f005 f854 	bl	8005600 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000558:	4b56      	ldr	r3, [pc, #344]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 800055a:	4a57      	ldr	r2, [pc, #348]	@ (80006b8 <MX_TIM1_Init+0x1a4>)
 800055c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 800055e:	4b55      	ldr	r3, [pc, #340]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000560:	2201      	movs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000564:	4b53      	ldr	r3, [pc, #332]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64-1;
 800056a:	4b52      	ldr	r3, [pc, #328]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 800056c:	223f      	movs	r2, #63	@ 0x3f
 800056e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b50      	ldr	r3, [pc, #320]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000576:	4b4f      	ldr	r3, [pc, #316]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b4d      	ldr	r3, [pc, #308]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000582:	4b4c      	ldr	r3, [pc, #304]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fccb 	bl	8001f20 <HAL_TIM_Base_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800058e:	f000 f9f5 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000592:	2160      	movs	r1, #96	@ 0x60
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2280      	movs	r2, #128	@ 0x80
 8000598:	0152      	lsls	r2, r2, #5
 800059a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800059c:	187a      	adds	r2, r7, r1
 800059e:	4b45      	ldr	r3, [pc, #276]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 f94c 	bl	8002840 <HAL_TIM_ConfigClockSource>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005ac:	f000 f9e6 	bl	800097c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005b0:	4b40      	ldr	r3, [pc, #256]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fd0c 	bl	8001fd0 <HAL_TIM_PWM_Init>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005bc:	f000 f9de 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c0:	2154      	movs	r1, #84	@ 0x54
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005d4:	187a      	adds	r2, r7, r1
 80005d6:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 fec0 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80005e4:	f000 f9ca 	bl	800097c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e8:	2138      	movs	r1, #56	@ 0x38
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2260      	movs	r2, #96	@ 0x60
 80005ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000614:	1879      	adds	r1, r7, r1
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000618:	2200      	movs	r2, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f002 f810 	bl	8002640 <HAL_TIM_PWM_ConfigChannel>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000624:	f000 f9aa 	bl	800097c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000628:	2338      	movs	r3, #56	@ 0x38
 800062a:	18f9      	adds	r1, r7, r3
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 800062e:	2204      	movs	r2, #4
 8000630:	0018      	movs	r0, r3
 8000632:	f002 f805 	bl	8002640 <HAL_TIM_PWM_ConfigChannel>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800063a:	f000 f99f 	bl	800097c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	0192      	lsls	r2, r2, #6
 8000662:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	0492      	lsls	r2, r2, #18
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000690:	1d3a      	adds	r2, r7, #4
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f002 fec4 	bl	8003424 <HAL_TIMEx_ConfigBreakDeadTime>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80006a0:	f000 f96c 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <MX_TIM1_Init+0x1a0>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f9b2 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b01c      	add	sp, #112	@ 0x70
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000054 	.word	0x20000054
 80006b8:	40012c00 	.word	0x40012c00

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006c2:	4a17      	ldr	r2, [pc, #92]	@ (8000720 <MX_USART2_UART_Init+0x64>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006c8:	2296      	movs	r2, #150	@ 0x96
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_USART2_UART_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_USART2_UART_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <MX_USART2_UART_Init+0x60>)
 8000706:	0018      	movs	r0, r3
 8000708:	f002 ff28 	bl	800355c <HAL_UART_Init>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f934 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	200000a0 	.word	0x200000a0
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	240c      	movs	r4, #12
 800072c:	193b      	adds	r3, r7, r4
 800072e:	0018      	movs	r0, r3
 8000730:	2314      	movs	r3, #20
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f004 ff63 	bl	8005600 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	4b39      	ldr	r3, [pc, #228]	@ (8000820 <MX_GPIO_Init+0xfc>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800073e:	4b38      	ldr	r3, [pc, #224]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000740:	2120      	movs	r1, #32
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
 8000746:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800074a:	2220      	movs	r2, #32
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b33      	ldr	r3, [pc, #204]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000756:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
 800075e:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <MX_GPIO_Init+0xfc>)
 800076c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800076e:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000770:	2102      	movs	r1, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
 8000776:	4b2a      	ldr	r3, [pc, #168]	@ (8000820 <MX_GPIO_Init+0xfc>)
 8000778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800077a:	2202      	movs	r2, #2
 800077c:	4013      	ands	r3, r2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED5_Pin|LED7_Pin, GPIO_PIN_RESET);
 8000782:	23a0      	movs	r3, #160	@ 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	2200      	movs	r2, #0
 8000788:	21f0      	movs	r1, #240	@ 0xf0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fea4 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED9_Pin|LED2_Pin|LED4_Pin|LED6_Pin
 8000790:	4924      	ldr	r1, [pc, #144]	@ (8000824 <MX_GPIO_Init+0x100>)
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_GPIO_Init+0x104>)
 8000794:	2200      	movs	r2, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fe9e 	bl	80014d8 <HAL_GPIO_WritePin>
                          |LED8_Pin|LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2284      	movs	r2, #132	@ 0x84
 80007a6:	0392      	lsls	r2, r2, #14
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	193a      	adds	r2, r7, r4
 80007b2:	23a0      	movs	r3, #160	@ 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fd29 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED5_Pin|LED7_Pin;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	22f0      	movs	r2, #240	@ 0xf0
 80007c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2211      	movs	r2, #17
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	193a      	adds	r2, r7, r4
 80007d8:	23a0      	movs	r3, #160	@ 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fd16 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED9_Pin LED2_Pin LED4_Pin LED6_Pin
                           LED8_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED2_Pin|LED4_Pin|LED6_Pin
 80007e4:	0021      	movs	r1, r4
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <MX_GPIO_Init+0x100>)
 80007ea:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2211      	movs	r2, #17
 80007f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	4a09      	ldr	r2, [pc, #36]	@ (8000828 <MX_GPIO_Init+0x104>)
 8000802:	0019      	movs	r1, r3
 8000804:	0010      	movs	r0, r2
 8000806:	f000 fd03 	bl	8001210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800080a:	23a0      	movs	r3, #160	@ 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2201      	movs	r2, #1
 8000810:	2102      	movs	r1, #2
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fe60 	bl	80014d8 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b009      	add	sp, #36	@ 0x24
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	00007c04 	.word	0x00007c04
 8000828:	50000400 	.word	0x50000400

0800082c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a48      	ldr	r2, [pc, #288]	@ (800095c <HAL_UART_RxCpltCallback+0x130>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d000      	beq.n	8000840 <HAL_UART_RxCpltCallback+0x14>
 800083e:	e089      	b.n	8000954 <HAL_UART_RxCpltCallback+0x128>
	{
		if (rx_buffer[0] == 102)
 8000840:	4b47      	ldr	r3, [pc, #284]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b66      	cmp	r3, #102	@ 0x66
 8000846:	d126      	bne.n	8000896 <HAL_UART_RxCpltCallback+0x6a>
		{
			address = rx_buffer[1];
 8000848:	4b45      	ldr	r3, [pc, #276]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 800084a:	785a      	ldrb	r2, [r3, #1]
 800084c:	4b45      	ldr	r3, [pc, #276]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 800084e:	701a      	strb	r2, [r3, #0]
			tx_buffer[0] = 102;
 8000850:	4b45      	ldr	r3, [pc, #276]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 8000852:	2266      	movs	r2, #102	@ 0x66
 8000854:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = rx_buffer[1]+1;
 8000856:	4b42      	ldr	r3, [pc, #264]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	3301      	adds	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b42      	ldr	r3, [pc, #264]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 8000860:	705a      	strb	r2, [r3, #1]
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	@ 0x64
 8000864:	f000 fa40 	bl	8000ce8 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, 2);
 8000868:	493f      	ldr	r1, [pc, #252]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 800086a:	4b40      	ldr	r3, [pc, #256]	@ (800096c <HAL_UART_RxCpltCallback+0x140>)
 800086c:	2202      	movs	r2, #2
 800086e:	0018      	movs	r0, r3
 8000870:	f002 feca 	bl	8003608 <HAL_UART_Transmit_IT>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000874:	23a0      	movs	r3, #160	@ 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fe2b 	bl	80014d8 <HAL_GPIO_WritePin>
			cfgFlag = 1;
 8000882:	4b3b      	ldr	r3, [pc, #236]	@ (8000970 <HAL_UART_RxCpltCallback+0x144>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, 2);
 8000888:	4935      	ldr	r1, [pc, #212]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 800088a:	4b38      	ldr	r3, [pc, #224]	@ (800096c <HAL_UART_RxCpltCallback+0x140>)
 800088c:	2202      	movs	r2, #2
 800088e:	0018      	movs	r0, r3
 8000890:	f002 ff62 	bl	8003758 <HAL_UART_Receive_IT>
			return;
 8000894:	e05e      	b.n	8000954 <HAL_UART_RxCpltCallback+0x128>
		}
		if (rx_buffer[0] == 103)
 8000896:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b67      	cmp	r3, #103	@ 0x67
 800089c:	d122      	bne.n	80008e4 <HAL_UART_RxCpltCallback+0xb8>
		{
			address = rx_buffer[1];
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 80008a0:	785a      	ldrb	r2, [r3, #1]
 80008a2:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 80008a4:	701a      	strb	r2, [r3, #0]
			tx_buffer[0] = 103;
 80008a6:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 80008a8:	2267      	movs	r2, #103	@ 0x67
 80008aa:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = rx_buffer[1]-1;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 80008b6:	705a      	strb	r2, [r3, #1]
			HAL_Delay(100);
 80008b8:	2064      	movs	r0, #100	@ 0x64
 80008ba:	f000 fa15 	bl	8000ce8 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, 2);
 80008be:	492a      	ldr	r1, [pc, #168]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 80008c0:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <HAL_UART_RxCpltCallback+0x140>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 fe9f 	bl	8003608 <HAL_UART_Transmit_IT>
			cfgFlag = 1;
 80008ca:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <HAL_UART_RxCpltCallback+0x144>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, address+1);
 80008d0:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4921      	ldr	r1, [pc, #132]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <HAL_UART_RxCpltCallback+0x140>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 ff3b 	bl	8003758 <HAL_UART_Receive_IT>
			return;
 80008e2:	e037      	b.n	8000954 <HAL_UART_RxCpltCallback+0x128>
		}
		if (rx_buffer[0] == 104)
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b68      	cmp	r3, #104	@ 0x68
 80008ea:	d133      	bne.n	8000954 <HAL_UART_RxCpltCallback+0x128>
		{
			digit = rx_buffer[address];
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	001a      	movs	r2, r3
 80008f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 80008f4:	5c9a      	ldrb	r2, [r3, r2]
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <HAL_UART_RxCpltCallback+0x148>)
 80008f8:	701a      	strb	r2, [r3, #0]

			for (int var = 0; var < address; ++var)
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e00b      	b.n	8000918 <HAL_UART_RxCpltCallback+0xec>
			{
				tx_buffer[var] = rx_buffer[var];
 8000900:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	7819      	ldrb	r1, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	1c0a      	adds	r2, r1, #0
 8000910:	701a      	strb	r2, [r3, #0]
			for (int var = 0; var < address; ++var)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	001a      	movs	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4293      	cmp	r3, r2
 8000922:	dbed      	blt.n	8000900 <HAL_UART_RxCpltCallback+0xd4>
			}
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	@ 0x64
 8000926:	f000 f9df 	bl	8000ce8 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, address);
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001a      	movs	r2, r3
 8000930:	490d      	ldr	r1, [pc, #52]	@ (8000968 <HAL_UART_RxCpltCallback+0x13c>)
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_UART_RxCpltCallback+0x140>)
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fe67 	bl	8003608 <HAL_UART_Transmit_IT>
			readDigit = 1;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_UART_RxCpltCallback+0x14c>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart2, rx_buffer, address+1);
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_UART_RxCpltCallback+0x138>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	b29a      	uxth	r2, r3
 8000948:	4905      	ldr	r1, [pc, #20]	@ (8000960 <HAL_UART_RxCpltCallback+0x134>)
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_UART_RxCpltCallback+0x140>)
 800094c:	0018      	movs	r0, r3
 800094e:	f002 ff03 	bl	8003758 <HAL_UART_Receive_IT>
			return;
 8000952:	46c0      	nop			@ (mov r8, r8)
		}

	}
}
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	40004400 	.word	0x40004400
 8000960:	20000138 	.word	0x20000138
 8000964:	20000160 	.word	0x20000160
 8000968:	2000014c 	.word	0x2000014c
 800096c:	200000a0 	.word	0x200000a0
 8000970:	20000134 	.word	0x20000134
 8000974:	20000161 	.word	0x20000161
 8000978:	20000135 	.word	0x20000135

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_MspInit+0x44>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	@ 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x44>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_MspInit+0x44>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	0549      	lsls	r1, r1, #21
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_MspInit+0x44>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	055b      	lsls	r3, r3, #21
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <HAL_TIM_Base_MspInit+0x38>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10d      	bne.n	80009fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_TIM_Base_MspInit+0x3c>)
 80009e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_TIM_Base_MspInit+0x3c>)
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	0109      	lsls	r1, r1, #4
 80009ec:	430a      	orrs	r2, r1
 80009ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_TIM_Base_MspInit+0x3c>)
 80009f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b004      	add	sp, #16
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	240c      	movs	r4, #12
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f004 fdec 	bl	8005600 <memset>
  if(htim->Instance==TIM1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a15      	ldr	r2, [pc, #84]	@ (8000a84 <HAL_TIM_MspPostInit+0x74>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d123      	bne.n	8000a7a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_TIM_MspPostInit+0x78>)
 8000a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <HAL_TIM_MspPostInit+0x78>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_TIM_MspPostInit+0x78>)
 8000a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	22c0      	movs	r2, #192	@ 0xc0
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	0021      	movs	r1, r4
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2202      	movs	r2, #2
 8000a58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2202      	movs	r2, #2
 8000a6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	187a      	adds	r2, r7, r1
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fbcb 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b009      	add	sp, #36	@ 0x24
 8000a80:	bd90      	pop	{r4, r7, pc}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08b      	sub	sp, #44	@ 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2414      	movs	r4, #20
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f004 fdae 	bl	8005600 <memset>
  if(huart->Instance==USART2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <HAL_UART_MspInit+0x9c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d138      	bne.n	8000b20 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <HAL_UART_MspInit+0xa0>)
 8000ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <HAL_UART_MspInit+0xa0>)
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	0289      	lsls	r1, r1, #10
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_UART_MspInit+0xa0>)
 8000abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ac0:	2380      	movs	r3, #128	@ 0x80
 8000ac2:	029b      	lsls	r3, r3, #10
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_UART_MspInit+0xa0>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_UART_MspInit+0xa0>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_UART_MspInit+0xa0>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	23a0      	movs	r3, #160	@ 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fb80 	bl	8001210 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2103      	movs	r1, #3
 8000b14:	201c      	movs	r0, #28
 8000b16:	f000 f9b7 	bl	8000e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b1a:	201c      	movs	r0, #28
 8000b1c:	f000 f9c9 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b00b      	add	sp, #44	@ 0x2c
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8aa 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <USART2_IRQHandler+0x14>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 fe4c 	bl	8003808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	200000a0 	.word	0x200000a0

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	f7ff fff6 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f004 fd2b 	bl	8005610 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bba:	f7ff fc03 	bl	80003c4 <main>

08000bbe <LoopForever>:

LoopForever:
  b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	08005744 	.word	0x08005744
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	20000398 	.word	0x20000398

08000bd8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_Init+0x3c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_Init+0x3c>)
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	0049      	lsls	r1, r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 f810 	bl	8000c1c <HAL_InitTick>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff febe 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <HAL_InitTick+0x88>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d02b      	beq.n	8000c8c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <HAL_InitTick+0x8c>)
 8000c36:	681c      	ldr	r4, [r3, #0]
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <HAL_InitTick+0x88>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	23fa      	movs	r3, #250	@ 0xfa
 8000c40:	0098      	lsls	r0, r3, #2
 8000c42:	f7ff fa5d 	bl	8000100 <__udivsi3>
 8000c46:	0003      	movs	r3, r0
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0020      	movs	r0, r4
 8000c4c:	f7ff fa58 	bl	8000100 <__udivsi3>
 8000c50:	0003      	movs	r3, r0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 f93d 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d112      	bne.n	8000c82 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d80a      	bhi.n	8000c78 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f90c 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_InitTick+0x90>)
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e00d      	b.n	8000c94 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e008      	b.n	8000c94 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c82:	230f      	movs	r3, #15
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e003      	b.n	8000c94 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b005      	add	sp, #20
 8000ca0:	bd90      	pop	{r4, r7, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	001a      	movs	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	18d2      	adds	r2, r2, r3
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000394 	.word	0x20000394

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	@ (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000394 	.word	0x20000394

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff fff0 	bl	8000cd4 <HAL_GetTick>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	001a      	movs	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	189b      	adds	r3, r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	f7ff ffe0 	bl	8000cd4 <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d42:	d809      	bhi.n	8000d58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	231f      	movs	r3, #31
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <__NVIC_EnableIRQ+0x30>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	4091      	lsls	r1, r2
 8000d54:	000a      	movs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d78:	d828      	bhi.n	8000dcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e38 <__NVIC_SetPriority+0xd4>)
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	33c0      	adds	r3, #192	@ 0xc0
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	589b      	ldr	r3, [r3, r2]
 8000d8a:	1dfa      	adds	r2, r7, #7
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	0011      	movs	r1, r2
 8000d90:	2203      	movs	r2, #3
 8000d92:	400a      	ands	r2, r1
 8000d94:	00d2      	lsls	r2, r2, #3
 8000d96:	21ff      	movs	r1, #255	@ 0xff
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	401a      	ands	r2, r3
 8000da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	22ff      	movs	r2, #255	@ 0xff
 8000da8:	401a      	ands	r2, r3
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	0018      	movs	r0, r3
 8000db0:	2303      	movs	r3, #3
 8000db2:	4003      	ands	r3, r0
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db8:	481f      	ldr	r0, [pc, #124]	@ (8000e38 <__NVIC_SetPriority+0xd4>)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	33c0      	adds	r3, #192	@ 0xc0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dca:	e031      	b.n	8000e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <__NVIC_SetPriority+0xd8>)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	3b08      	subs	r3, #8
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3306      	adds	r3, #6
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	3304      	adds	r3, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	0011      	movs	r1, r2
 8000dec:	2203      	movs	r2, #3
 8000dee:	400a      	ands	r2, r1
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	21ff      	movs	r1, #255	@ 0xff
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	22ff      	movs	r2, #255	@ 0xff
 8000e04:	401a      	ands	r2, r3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	4003      	ands	r3, r0
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4809      	ldr	r0, [pc, #36]	@ (8000e3c <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	001c      	movs	r4, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4023      	ands	r3, r4
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	430a      	orrs	r2, r1
 8000e26:	3306      	adds	r3, #6
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	18c3      	adds	r3, r0, r3
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b003      	add	sp, #12
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	045b      	lsls	r3, r3, #17
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d301      	bcc.n	8000e58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e54:	2301      	movs	r3, #1
 8000e56:	e010      	b.n	8000e7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <SysTick_Config+0x44>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e60:	2301      	movs	r3, #1
 8000e62:	425b      	negs	r3, r3
 8000e64:	2103      	movs	r1, #3
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff7c 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x44>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x44>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	210f      	movs	r1, #15
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	0002      	movs	r2, r0
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff33 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ffaf 	bl	8000e40 <SysTick_Config>
 8000ee2:	0003      	movs	r3, r0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000efa:	2317      	movs	r3, #23
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2224      	movs	r2, #36	@ 0x24
 8000f06:	5c9b      	ldrb	r3, [r3, r2]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_DMA_Start_IT+0x24>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e06f      	b.n	8000ff0 <HAL_DMA_Start_IT+0x104>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2224      	movs	r2, #36	@ 0x24
 8000f14:	2101      	movs	r1, #1
 8000f16:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2225      	movs	r2, #37	@ 0x25
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d157      	bne.n	8000fd4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2225      	movs	r2, #37	@ 0x25
 8000f28:	2102      	movs	r1, #2
 8000f2a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 f921 	bl	8001190 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	210e      	movs	r1, #14
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00f      	b.n	8000f88 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2104      	movs	r1, #4
 8000f74:	438a      	bics	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	210a      	movs	r1, #10
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	4013      	ands	r3, r2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa0:	2180      	movs	r1, #128	@ 0x80
 8000fa2:	0049      	lsls	r1, r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fba:	2180      	movs	r1, #128	@ 0x80
 8000fbc:	0049      	lsls	r1, r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e00a      	b.n	8000fea <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2224      	movs	r2, #36	@ 0x24
 8000fde:	2100      	movs	r1, #0
 8000fe0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000fe2:	2317      	movs	r3, #23
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000fea:	2317      	movs	r3, #23
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e050      	b.n	80010ac <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2225      	movs	r2, #37	@ 0x25
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d008      	beq.n	8001028 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2204      	movs	r2, #4
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2224      	movs	r2, #36	@ 0x24
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e041      	b.n	80010ac <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	210e      	movs	r1, #14
 8001034:	438a      	bics	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	491c      	ldr	r1, [pc, #112]	@ (80010b4 <HAL_DMA_Abort+0xbc>)
 8001044:	400a      	ands	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_DMA_Abort+0xc0>)
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	221c      	movs	r2, #28
 8001062:	4013      	ands	r3, r2
 8001064:	2201      	movs	r2, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_DMA_Abort+0xc0>)
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001076:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800108a:	490a      	ldr	r1, [pc, #40]	@ (80010b4 <HAL_DMA_Abort+0xbc>)
 800108c:	400a      	ands	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001098:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2225      	movs	r2, #37	@ 0x25
 800109e:	2101      	movs	r1, #1
 80010a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2224      	movs	r2, #36	@ 0x24
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	fffffeff 	.word	0xfffffeff
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c4:	210f      	movs	r1, #15
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2225      	movs	r2, #37	@ 0x25
 80010d0:	5c9b      	ldrb	r3, [r3, r2]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d006      	beq.n	80010e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2204      	movs	r2, #4
 80010dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e049      	b.n	800117a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	210e      	movs	r1, #14
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	438a      	bics	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001110:	491d      	ldr	r1, [pc, #116]	@ (8001188 <HAL_DMA_Abort_IT+0xcc>)
 8001112:	400a      	ands	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <HAL_DMA_Abort_IT+0xd0>)
 8001118:	6859      	ldr	r1, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	221c      	movs	r2, #28
 8001120:	4013      	ands	r3, r2
 8001122:	2201      	movs	r2, #1
 8001124:	409a      	lsls	r2, r3
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_DMA_Abort_IT+0xd0>)
 8001128:	430a      	orrs	r2, r1
 800112a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001134:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00c      	beq.n	8001158 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001148:	490f      	ldr	r1, [pc, #60]	@ (8001188 <HAL_DMA_Abort_IT+0xcc>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001156:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2225      	movs	r2, #37	@ 0x25
 800115c:	2101      	movs	r1, #1
 800115e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2224      	movs	r2, #36	@ 0x24
 8001164:	2100      	movs	r1, #0
 8001166:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	0010      	movs	r0, r2
 8001178:	4798      	blx	r3
    }
  }
  return status;
 800117a:	230f      	movs	r3, #15
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}
 8001188:	fffffeff 	.word	0xfffffeff
 800118c:	40020000 	.word	0x40020000

08001190 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011b8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <DMA_SetConfig+0x7c>)
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	221c      	movs	r2, #28
 80011c4:	4013      	ands	r3, r2
 80011c6:	2201      	movs	r2, #1
 80011c8:	409a      	lsls	r2, r3
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <DMA_SetConfig+0x7c>)
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b10      	cmp	r3, #16
 80011de:	d108      	bne.n	80011f2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011f0:	e007      	b.n	8001202 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	60da      	str	r2, [r3, #12]
}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e147      	b.n	80014b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <HAL_GPIO_Init+0x28>
 8001236:	e138      	b.n	80014aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x40>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	2201      	movs	r2, #1
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	58d3      	ldr	r3, [r2, r3]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2207      	movs	r2, #7
 800130c:	4013      	ands	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2107      	movs	r1, #7
 8001326:	400b      	ands	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	6939      	ldr	r1, [r7, #16]
 8001340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	23c0      	movs	r3, #192	@ 0xc0
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x174>
 8001382:	e092      	b.n	80014aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001384:	4a50      	ldr	r2, [pc, #320]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	220f      	movs	r2, #15
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23a0      	movs	r3, #160	@ 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1ca>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a45      	ldr	r2, [pc, #276]	@ (80014cc <HAL_GPIO_Init+0x2bc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1c6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a44      	ldr	r2, [pc, #272]	@ (80014d0 <HAL_GPIO_Init+0x2c0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1c2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a43      	ldr	r2, [pc, #268]	@ (80014d4 <HAL_GPIO_Init+0x2c4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1be>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	00d2      	lsls	r2, r2, #3
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013ec:	4936      	ldr	r1, [pc, #216]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3318      	adds	r3, #24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fa:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141e:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144e:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001450:	2384      	movs	r3, #132	@ 0x84
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001474:	4914      	ldr	r1, [pc, #80]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001476:	2284      	movs	r2, #132	@ 0x84
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800147c:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	58d3      	ldr	r3, [r2, r3]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4909      	ldr	r1, [pc, #36]	@ (80014c8 <HAL_GPIO_Init+0x2b8>)
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2ae>
 80014bc:	e6b0      	b.n	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021800 	.word	0x40021800
 80014cc:	50000400 	.word	0x50000400
 80014d0:	50000800 	.word	0x50000800
 80014d4:	50000c00 	.word	0x50000c00

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	0008      	movs	r0, r1
 80014e2:	0011      	movs	r1, r2
 80014e4:	1cbb      	adds	r3, r7, #2
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	1c7b      	adds	r3, r7, #1
 80014ec:	1c0a      	adds	r2, r1, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	1c7b      	adds	r3, r7, #1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f8:	1cbb      	adds	r3, r7, #2
 80014fa:	881a      	ldrh	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001502:	1cbb      	adds	r3, r7, #2
 8001504:	881a      	ldrh	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001522:	4013      	ands	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d11f      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	0013      	movs	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	189b      	adds	r3, r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4912      	ldr	r1, [pc, #72]	@ (8001590 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fdda 	bl	8000100 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	e008      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e009      	b.n	800157a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	401a      	ands	r2, r3
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	429a      	cmp	r2, r3
 8001576:	d0ed      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	40007000 	.word	0x40007000
 8001588:	fffff9ff 	.word	0xfffff9ff
 800158c:	20000000 	.word	0x20000000
 8001590:	000f4240 	.word	0x000f4240

08001594 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	23e0      	movs	r3, #224	@ 0xe0
 800159e:	01db      	lsls	r3, r3, #7
 80015a0:	4013      	ands	r3, r2
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e2f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x1e>
 80015c8:	e07c      	b.n	80016c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4bc3      	ldr	r3, [pc, #780]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2238      	movs	r2, #56	@ 0x38
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4bc0      	ldr	r3, [pc, #768]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2203      	movs	r2, #3
 80015da:	4013      	ands	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d102      	bne.n	80015ea <HAL_RCC_OscConfig+0x3e>
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d10b      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4bb9      	ldr	r3, [pc, #740]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d062      	beq.n	80016c2 <HAL_RCC_OscConfig+0x116>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d15e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e2ce      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x78>
 8001614:	4bb0      	ldr	r3, [pc, #704]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4baf      	ldr	r3, [pc, #700]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	0249      	lsls	r1, r1, #9
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e020      	b.n	8001666 <HAL_RCC_OscConfig+0xba>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	23a0      	movs	r3, #160	@ 0xa0
 800162a:	02db      	lsls	r3, r3, #11
 800162c:	429a      	cmp	r2, r3
 800162e:	d10e      	bne.n	800164e <HAL_RCC_OscConfig+0xa2>
 8001630:	4ba9      	ldr	r3, [pc, #676]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4ba8      	ldr	r3, [pc, #672]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	02c9      	lsls	r1, r1, #11
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	4ba6      	ldr	r3, [pc, #664]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4ba5      	ldr	r3, [pc, #660]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	0249      	lsls	r1, r1, #9
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0xba>
 800164e:	4ba2      	ldr	r3, [pc, #648]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4ba1      	ldr	r3, [pc, #644]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001654:	49a1      	ldr	r1, [pc, #644]	@ (80018dc <HAL_RCC_OscConfig+0x330>)
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	4b9f      	ldr	r3, [pc, #636]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b9e      	ldr	r3, [pc, #632]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001660:	499f      	ldr	r1, [pc, #636]	@ (80018e0 <HAL_RCC_OscConfig+0x334>)
 8001662:	400a      	ands	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fb31 	bl	8000cd4 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fb2c 	bl	8000cd4 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e28d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	4b93      	ldr	r3, [pc, #588]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xcc>
 8001696:	e015      	b.n	80016c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb1c 	bl	8000cd4 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb17 	bl	8000cd4 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	@ 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e278      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b4:	4b88      	ldr	r3, [pc, #544]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0xf6>
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_RCC_OscConfig+0x124>
 80016ce:	e099      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d0:	4b81      	ldr	r3, [pc, #516]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2238      	movs	r2, #56	@ 0x38
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016da:	4b7f      	ldr	r3, [pc, #508]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0x144>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d002      	beq.n	80016f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d135      	bne.n	8001762 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f6:	4b78      	ldr	r3, [pc, #480]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x162>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e24b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b72      	ldr	r3, [pc, #456]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a74      	ldr	r2, [pc, #464]	@ (80018e4 <HAL_RCC_OscConfig+0x338>)
 8001714:	4013      	ands	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	021a      	lsls	r2, r3, #8
 800171e:	4b6e      	ldr	r3, [pc, #440]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d112      	bne.n	8001750 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172a:	4b6b      	ldr	r3, [pc, #428]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6e      	ldr	r2, [pc, #440]	@ (80018e8 <HAL_RCC_OscConfig+0x33c>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	4b67      	ldr	r3, [pc, #412]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800173e:	4b66      	ldr	r3, [pc, #408]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0adb      	lsrs	r3, r3, #11
 8001744:	2207      	movs	r2, #7
 8001746:	4013      	ands	r3, r2
 8001748:	4a68      	ldr	r2, [pc, #416]	@ (80018ec <HAL_RCC_OscConfig+0x340>)
 800174a:	40da      	lsrs	r2, r3
 800174c:	4b68      	ldr	r3, [pc, #416]	@ (80018f0 <HAL_RCC_OscConfig+0x344>)
 800174e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001750:	4b68      	ldr	r3, [pc, #416]	@ (80018f4 <HAL_RCC_OscConfig+0x348>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fa61 	bl	8000c1c <HAL_InitTick>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d051      	beq.n	8001802 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e221      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d030      	beq.n	80017cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5e      	ldr	r2, [pc, #376]	@ (80018e8 <HAL_RCC_OscConfig+0x33c>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	4b57      	ldr	r3, [pc, #348]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	4b56      	ldr	r3, [pc, #344]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b55      	ldr	r3, [pc, #340]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	0049      	lsls	r1, r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff faa2 	bl	8000cd4 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fa9d 	bl	8000cd4 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e1fe      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a8:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4013      	ands	r3, r2
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b48      	ldr	r3, [pc, #288]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a4a      	ldr	r2, [pc, #296]	@ (80018e4 <HAL_RCC_OscConfig+0x338>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	021a      	lsls	r2, r3, #8
 80017c4:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017cc:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	4949      	ldr	r1, [pc, #292]	@ (80018f8 <HAL_RCC_OscConfig+0x34c>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa7c 	bl	8000cd4 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fa77 	bl	8000cd4 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1d8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f4:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x236>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001802:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2208      	movs	r2, #8
 800180a:	4013      	ands	r3, r2
 800180c:	d047      	beq.n	800189e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800180e:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2238      	movs	r2, #56	@ 0x38
 8001814:	4013      	ands	r3, r2
 8001816:	2b18      	cmp	r3, #24
 8001818:	d10a      	bne.n	8001830 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d03c      	beq.n	800189e <HAL_RCC_OscConfig+0x2f2>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d138      	bne.n	800189e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e1ba      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d019      	beq.n	800186c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fa46 	bl	8000cd4 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fa41 	bl	8000cd4 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a2      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d0f1      	beq.n	800184e <HAL_RCC_OscConfig+0x2a2>
 800186a:	e018      	b.n	800189e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 800186e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001870:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001872:	2101      	movs	r1, #1
 8001874:	438a      	bics	r2, r1
 8001876:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fa2c 	bl	8000cd4 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff fa27 	bl	8000cd4 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e188      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d1f1      	bne.n	8001882 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d100      	bne.n	80018aa <HAL_RCC_OscConfig+0x2fe>
 80018a8:	e0c6      	b.n	8001a38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	231f      	movs	r3, #31
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2238      	movs	r2, #56	@ 0x38
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d11e      	bne.n	80018fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x31e>
 80018c8:	e0b6      	b.n	8001a38 <HAL_RCC_OscConfig+0x48c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d000      	beq.n	80018d4 <HAL_RCC_OscConfig+0x328>
 80018d2:	e0b1      	b.n	8001a38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e166      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	fffeffff 	.word	0xfffeffff
 80018e0:	fffbffff 	.word	0xfffbffff
 80018e4:	ffff80ff 	.word	0xffff80ff
 80018e8:	ffffc7ff 	.word	0xffffc7ff
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004
 80018f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018fc:	4bac      	ldr	r3, [pc, #688]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80018fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	055b      	lsls	r3, r3, #21
 8001904:	4013      	ands	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x360>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x362>
 800190c:	2300      	movs	r3, #0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4ba7      	ldr	r3, [pc, #668]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001916:	4ba6      	ldr	r3, [pc, #664]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	0549      	lsls	r1, r1, #21
 800191c:	430a      	orrs	r2, r1
 800191e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001920:	4ba3      	ldr	r3, [pc, #652]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	055b      	lsls	r3, r3, #21
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800192e:	231f      	movs	r3, #31
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	4b9f      	ldr	r3, [pc, #636]	@ (8001bb4 <HAL_RCC_OscConfig+0x608>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d11a      	bne.n	8001978 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001942:	4b9c      	ldr	r3, [pc, #624]	@ (8001bb4 <HAL_RCC_OscConfig+0x608>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b9b      	ldr	r3, [pc, #620]	@ (8001bb4 <HAL_RCC_OscConfig+0x608>)
 8001948:	2180      	movs	r1, #128	@ 0x80
 800194a:	0049      	lsls	r1, r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001950:	f7ff f9c0 	bl	8000cd4 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff f9bb 	bl	8000cd4 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e11c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	4b91      	ldr	r3, [pc, #580]	@ (8001bb4 <HAL_RCC_OscConfig+0x608>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x3e2>
 8001980:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001982:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001984:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x41c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x404>
 8001996:	4b86      	ldr	r3, [pc, #536]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001998:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800199a:	4b85      	ldr	r3, [pc, #532]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 800199c:	2104      	movs	r1, #4
 800199e:	430a      	orrs	r2, r1
 80019a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019a2:	4b83      	ldr	r3, [pc, #524]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019a6:	4b82      	ldr	r3, [pc, #520]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019a8:	2101      	movs	r1, #1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x41c>
 80019b0:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019b4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019bc:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019c0:	4b7b      	ldr	r3, [pc, #492]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019c2:	2104      	movs	r1, #4
 80019c4:	438a      	bics	r2, r1
 80019c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d014      	beq.n	80019fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f980 	bl	8000cd4 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff f97b 	bl	8000cd4 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a74      	ldr	r2, [pc, #464]	@ (8001bb8 <HAL_RCC_OscConfig+0x60c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0db      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	4b70      	ldr	r3, [pc, #448]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 80019f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x42e>
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f96b 	bl	8000cd4 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a02:	e009      	b.n	8001a18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff f966 	bl	8000cd4 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb8 <HAL_RCC_OscConfig+0x60c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0c6      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a18:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a22:	231f      	movs	r3, #31
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a30:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a32:	4962      	ldr	r1, [pc, #392]	@ (8001bbc <HAL_RCC_OscConfig+0x610>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCC_OscConfig+0x496>
 8001a40:	e0b0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a42:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2238      	movs	r2, #56	@ 0x38
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4a4>
 8001a4e:	e078      	b.n	8001b42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d153      	bne.n	8001b00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b55      	ldr	r3, [pc, #340]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b54      	ldr	r3, [pc, #336]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a5e:	4958      	ldr	r1, [pc, #352]	@ (8001bc0 <HAL_RCC_OscConfig+0x614>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f936 	bl	8000cd4 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f931 	bl	8000cd4 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e092      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	049b      	lsls	r3, r3, #18
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b48      	ldr	r3, [pc, #288]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc4 <HAL_RCC_OscConfig+0x618>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	0449      	lsls	r1, r1, #17
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ac8:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	0549      	lsls	r1, r1, #21
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f8fd 	bl	8000cd4 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f8f8 	bl	8000cd4 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e059      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x534>
 8001afe:	e051      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b06:	492e      	ldr	r1, [pc, #184]	@ (8001bc0 <HAL_RCC_OscConfig+0x614>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f8e2 	bl	8000cd4 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f8dd 	bl	8000cd4 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e03e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	049b      	lsls	r3, r3, #18
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b3a:	4923      	ldr	r1, [pc, #140]	@ (8001bc8 <HAL_RCC_OscConfig+0x61c>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	e030      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_RCC_OscConfig+0x604>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2203      	movs	r2, #3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2270      	movs	r2, #112	@ 0x70
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d117      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	23fe      	movs	r3, #254	@ 0xfe
 8001b74:	01db      	lsls	r3, r3, #7
 8001b76:	401a      	ands	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d10e      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	23f8      	movs	r3, #248	@ 0xf8
 8001b86:	039b      	lsls	r3, r3, #14
 8001b88:	401a      	ands	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	0f5b      	lsrs	r3, r3, #29
 8001b96:	075a      	lsls	r2, r3, #29
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b008      	add	sp, #32
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	00001388 	.word	0x00001388
 8001bbc:	efffffff 	.word	0xefffffff
 8001bc0:	feffffff 	.word	0xfeffffff
 8001bc4:	1fc1808c 	.word	0x1fc1808c
 8001bc8:	effefffc 	.word	0xeffefffc

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0e9      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b76      	ldr	r3, [pc, #472]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d91e      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b73      	ldr	r3, [pc, #460]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4b70      	ldr	r3, [pc, #448]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f868 	bl	8000cd4 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7ff f863 	bl	8000cd4 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0ca      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c1e:	4b67      	ldr	r3, [pc, #412]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2207      	movs	r2, #7
 8001c24:	4013      	ands	r3, r2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d015      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d006      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c40:	4b60      	ldr	r3, [pc, #384]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	21e0      	movs	r1, #224	@ 0xe0
 8001c48:	01c9      	lsls	r1, r1, #7
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4a5d      	ldr	r2, [pc, #372]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b59      	ldr	r3, [pc, #356]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d057      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c74:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d12b      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e097      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	049b      	lsls	r3, r3, #18
 8001c94:	4013      	ands	r3, r2
 8001c96:	d11f      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e08b      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	d113      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07f      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cbc:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e074      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e06d      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4b37      	ldr	r3, [pc, #220]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cec:	f7fe fff2 	bl	8000cd4 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7fe ffed 	bl	8000cd4 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e054      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	@ 0x38
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1ec      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d21e      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d3c:	f7fe ffca 	bl	8000cd4 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7fe ffc5 	bl	8000cd4 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e02c      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2207      	movs	r2, #7
 8001d60:	4013      	ands	r3, r2
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <HAL_RCC_ClockConfig+0x200>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d86:	f000 f829 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d8a:	0001      	movs	r1, r0
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	220f      	movs	r2, #15
 8001d94:	401a      	ands	r2, r3
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <HAL_RCC_ClockConfig+0x204>)
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	58d3      	ldr	r3, [r2, r3]
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	4013      	ands	r3, r2
 8001da0:	000a      	movs	r2, r1
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_RCC_ClockConfig+0x208>)
 8001da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_ClockConfig+0x20c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7fe ff35 	bl	8000c1c <HAL_InitTick>
 8001db2:	0003      	movs	r3, r0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	00001388 	.word	0x00001388
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	fffff0ff 	.word	0xfffff0ff
 8001dcc:	ffff8fff 	.word	0xffff8fff
 8001dd0:	08005670 	.word	0x08005670
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2238      	movs	r2, #56	@ 0x38
 8001de8:	4013      	ands	r3, r2
 8001dea:	d10f      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0adb      	lsrs	r3, r3, #11
 8001df2:	2207      	movs	r2, #7
 8001df4:	4013      	ands	r3, r2
 8001df6:	2201      	movs	r2, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	4835      	ldr	r0, [pc, #212]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e02:	f7fe f97d 	bl	8000100 <__udivsi3>
 8001e06:	0003      	movs	r3, r0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e05d      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2238      	movs	r2, #56	@ 0x38
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e18:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e054      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2238      	movs	r2, #56	@ 0x38
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d138      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	4824      	ldr	r0, [pc, #144]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e4c:	f7fe f958 	bl	8000100 <__udivsi3>
 8001e50:	0003      	movs	r3, r0
 8001e52:	0019      	movs	r1, r3
 8001e54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	227f      	movs	r2, #127	@ 0x7f
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	434b      	muls	r3, r1
 8001e60:	617b      	str	r3, [r7, #20]
        break;
 8001e62:	e00d      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	481c      	ldr	r0, [pc, #112]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e68:	f7fe f94a 	bl	8000100 <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	227f      	movs	r2, #127	@ 0x7f
 8001e78:	4013      	ands	r3, r2
 8001e7a:	434b      	muls	r3, r1
 8001e7c:	617b      	str	r3, [r7, #20]
        break;
 8001e7e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0f5b      	lsrs	r3, r3, #29
 8001e86:	2207      	movs	r2, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7fe f935 	bl	8000100 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e015      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	@ 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d103      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2238      	movs	r2, #56	@ 0x38
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b18      	cmp	r3, #24
 8001eba:	d103      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ebc:	23fa      	movs	r3, #250	@ 0xfa
 8001ebe:	01db      	lsls	r3, r3, #7
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ec8:	693b      	ldr	r3, [r7, #16]
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b006      	add	sp, #24
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	@ (8001ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ef8:	f7ff fff2 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001efc:	0004      	movs	r4, r0
 8001efe:	f7ff fb49 	bl	8001594 <LL_RCC_GetAPB1Prescaler>
 8001f02:	0003      	movs	r3, r0
 8001f04:	0b1a      	lsrs	r2, r3, #12
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	58d3      	ldr	r3, [r2, r3]
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	4013      	ands	r3, r2
 8001f10:	40dc      	lsrs	r4, r3
 8001f12:	0023      	movs	r3, r4
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	080056b0 	.word	0x080056b0

08001f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e04a      	b.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	223d      	movs	r2, #61	@ 0x3d
 8001f36:	5c9b      	ldrb	r3, [r3, r2]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223c      	movs	r2, #60	@ 0x3c
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7fe fd41 	bl	80009d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	223d      	movs	r2, #61	@ 0x3d
 8001f52:	2102      	movs	r1, #2
 8001f54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	0019      	movs	r1, r3
 8001f60:	0010      	movs	r0, r2
 8001f62:	f000 fe27 	bl	8002bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2248      	movs	r2, #72	@ 0x48
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223e      	movs	r2, #62	@ 0x3e
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223f      	movs	r2, #63	@ 0x3f
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2240      	movs	r2, #64	@ 0x40
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2241      	movs	r2, #65	@ 0x41
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2242      	movs	r2, #66	@ 0x42
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2243      	movs	r2, #67	@ 0x43
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2244      	movs	r2, #68	@ 0x44
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2245      	movs	r2, #69	@ 0x45
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2246      	movs	r2, #70	@ 0x46
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2247      	movs	r2, #71	@ 0x47
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223d      	movs	r2, #61	@ 0x3d
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e04a      	b.n	8002078 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223d      	movs	r2, #61	@ 0x3d
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	223c      	movs	r2, #60	@ 0x3c
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f841 	bl	8002080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223d      	movs	r2, #61	@ 0x3d
 8002002:	2102      	movs	r1, #2
 8002004:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	0019      	movs	r1, r3
 8002010:	0010      	movs	r0, r2
 8002012:	f000 fdcf 	bl	8002bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2248      	movs	r2, #72	@ 0x48
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	223e      	movs	r2, #62	@ 0x3e
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223f      	movs	r2, #63	@ 0x3f
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2240      	movs	r2, #64	@ 0x40
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2241      	movs	r2, #65	@ 0x41
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2242      	movs	r2, #66	@ 0x42
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2243      	movs	r2, #67	@ 0x43
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2244      	movs	r2, #68	@ 0x44
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2245      	movs	r2, #69	@ 0x45
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2246      	movs	r2, #70	@ 0x46
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2247      	movs	r2, #71	@ 0x47
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223d      	movs	r2, #61	@ 0x3d
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	001a      	movs	r2, r3
 800209e:	1cbb      	adds	r3, r7, #2
 80020a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <HAL_TIM_PWM_Start_DMA+0x32>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	223e      	movs	r2, #62	@ 0x3e
 80020b4:	5c9b      	ldrb	r3, [r3, r2]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3b02      	subs	r3, #2
 80020ba:	425a      	negs	r2, r3
 80020bc:	4153      	adcs	r3, r2
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e037      	b.n	8002132 <HAL_TIM_PWM_Start_DMA+0xa2>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d108      	bne.n	80020da <HAL_TIM_PWM_Start_DMA+0x4a>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	223f      	movs	r2, #63	@ 0x3f
 80020cc:	5c9b      	ldrb	r3, [r3, r2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3b02      	subs	r3, #2
 80020d2:	425a      	negs	r2, r3
 80020d4:	4153      	adcs	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e02b      	b.n	8002132 <HAL_TIM_PWM_Start_DMA+0xa2>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d108      	bne.n	80020f2 <HAL_TIM_PWM_Start_DMA+0x62>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	5c9b      	ldrb	r3, [r3, r2]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3b02      	subs	r3, #2
 80020ea:	425a      	negs	r2, r3
 80020ec:	4153      	adcs	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	e01f      	b.n	8002132 <HAL_TIM_PWM_Start_DMA+0xa2>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d108      	bne.n	800210a <HAL_TIM_PWM_Start_DMA+0x7a>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2241      	movs	r2, #65	@ 0x41
 80020fc:	5c9b      	ldrb	r3, [r3, r2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3b02      	subs	r3, #2
 8002102:	425a      	negs	r2, r3
 8002104:	4153      	adcs	r3, r2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	e013      	b.n	8002132 <HAL_TIM_PWM_Start_DMA+0xa2>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d108      	bne.n	8002122 <HAL_TIM_PWM_Start_DMA+0x92>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2242      	movs	r2, #66	@ 0x42
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3b02      	subs	r3, #2
 800211a:	425a      	negs	r2, r3
 800211c:	4153      	adcs	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e007      	b.n	8002132 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2243      	movs	r2, #67	@ 0x43
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3b02      	subs	r3, #2
 800212c:	425a      	negs	r2, r3
 800212e:	4153      	adcs	r3, r2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e183      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	223e      	movs	r2, #62	@ 0x3e
 8002144:	5c9b      	ldrb	r3, [r3, r2]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	425a      	negs	r2, r3
 800214c:	4153      	adcs	r3, r2
 800214e:	b2db      	uxtb	r3, r3
 8002150:	e037      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0x132>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d108      	bne.n	800216a <HAL_TIM_PWM_Start_DMA+0xda>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	223f      	movs	r2, #63	@ 0x3f
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	425a      	negs	r2, r3
 8002164:	4153      	adcs	r3, r2
 8002166:	b2db      	uxtb	r3, r3
 8002168:	e02b      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0x132>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d108      	bne.n	8002182 <HAL_TIM_PWM_Start_DMA+0xf2>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	425a      	negs	r2, r3
 800217c:	4153      	adcs	r3, r2
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e01f      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0x132>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d108      	bne.n	800219a <HAL_TIM_PWM_Start_DMA+0x10a>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2241      	movs	r2, #65	@ 0x41
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	425a      	negs	r2, r3
 8002194:	4153      	adcs	r3, r2
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e013      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0x132>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b10      	cmp	r3, #16
 800219e:	d108      	bne.n	80021b2 <HAL_TIM_PWM_Start_DMA+0x122>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2242      	movs	r2, #66	@ 0x42
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	425a      	negs	r2, r3
 80021ac:	4153      	adcs	r3, r2
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e007      	b.n	80021c2 <HAL_TIM_PWM_Start_DMA+0x132>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2243      	movs	r2, #67	@ 0x43
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	425a      	negs	r2, r3
 80021be:	4153      	adcs	r3, r2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d035      	beq.n	8002232 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_TIM_PWM_Start_DMA+0x144>
 80021cc:	1cbb      	adds	r3, r7, #2
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e134      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d104      	bne.n	80021e8 <HAL_TIM_PWM_Start_DMA+0x158>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	223e      	movs	r2, #62	@ 0x3e
 80021e2:	2102      	movs	r1, #2
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	e026      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d104      	bne.n	80021f8 <HAL_TIM_PWM_Start_DMA+0x168>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	223f      	movs	r2, #63	@ 0x3f
 80021f2:	2102      	movs	r1, #2
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	e01e      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d104      	bne.n	8002208 <HAL_TIM_PWM_Start_DMA+0x178>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2240      	movs	r2, #64	@ 0x40
 8002202:	2102      	movs	r1, #2
 8002204:	5499      	strb	r1, [r3, r2]
 8002206:	e016      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d104      	bne.n	8002218 <HAL_TIM_PWM_Start_DMA+0x188>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2241      	movs	r2, #65	@ 0x41
 8002212:	2102      	movs	r1, #2
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	e00e      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b10      	cmp	r3, #16
 800221c:	d104      	bne.n	8002228 <HAL_TIM_PWM_Start_DMA+0x198>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2242      	movs	r2, #66	@ 0x42
 8002222:	2102      	movs	r1, #2
 8002224:	5499      	strb	r1, [r3, r2]
 8002226:	e006      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2243      	movs	r2, #67	@ 0x43
 800222c:	2102      	movs	r1, #2
 800222e:	5499      	strb	r1, [r3, r2]
 8002230:	e001      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e105      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d100      	bne.n	800223e <HAL_TIM_PWM_Start_DMA+0x1ae>
 800223c:	e080      	b.n	8002340 <HAL_TIM_PWM_Start_DMA+0x2b0>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d900      	bls.n	8002246 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002244:	e0a1      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d054      	beq.n	80022f6 <HAL_TIM_PWM_Start_DMA+0x266>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d900      	bls.n	8002254 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002252:	e09a      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d025      	beq.n	80022ac <HAL_TIM_PWM_Start_DMA+0x21c>
 8002260:	e093      	b.n	800238a <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	4a79      	ldr	r2, [pc, #484]	@ (800244c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002268:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	4a78      	ldr	r2, [pc, #480]	@ (8002450 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	4a77      	ldr	r2, [pc, #476]	@ (8002454 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3334      	adds	r3, #52	@ 0x34
 8002286:	001a      	movs	r2, r3
 8002288:	1cbb      	adds	r3, r7, #2
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f7fe fe2e 	bl	8000eec <HAL_DMA_Start_IT>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0d4      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	0089      	lsls	r1, r1, #2
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
      break;
 80022aa:	e073      	b.n	8002394 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	4a66      	ldr	r2, [pc, #408]	@ (800244c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	4a65      	ldr	r2, [pc, #404]	@ (8002450 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	4a64      	ldr	r2, [pc, #400]	@ (8002454 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80022c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3338      	adds	r3, #56	@ 0x38
 80022d0:	001a      	movs	r2, r3
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	f7fe fe09 	bl	8000eec <HAL_DMA_Start_IT>
 80022da:	1e03      	subs	r3, r0, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0af      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2180      	movs	r1, #128	@ 0x80
 80022ee:	00c9      	lsls	r1, r1, #3
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]
      break;
 80022f4:	e04e      	b.n	8002394 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	4a54      	ldr	r2, [pc, #336]	@ (800244c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	4a53      	ldr	r2, [pc, #332]	@ (8002450 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	4a52      	ldr	r2, [pc, #328]	@ (8002454 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	333c      	adds	r3, #60	@ 0x3c
 800231a:	001a      	movs	r2, r3
 800231c:	1cbb      	adds	r3, r7, #2
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	f7fe fde4 	bl	8000eec <HAL_DMA_Start_IT>
 8002324:	1e03      	subs	r3, r0, #0
 8002326:	d001      	beq.n	800232c <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e08a      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	0109      	lsls	r1, r1, #4
 800233a:	430a      	orrs	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
      break;
 800233e:	e029      	b.n	8002394 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	4a41      	ldr	r2, [pc, #260]	@ (800244c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002346:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	4a40      	ldr	r2, [pc, #256]	@ (8002450 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	4a3f      	ldr	r2, [pc, #252]	@ (8002454 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002356:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3340      	adds	r3, #64	@ 0x40
 8002364:	001a      	movs	r2, r3
 8002366:	1cbb      	adds	r3, r7, #2
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f7fe fdbf 	bl	8000eec <HAL_DMA_Start_IT>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d001      	beq.n	8002376 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e065      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	0149      	lsls	r1, r1, #5
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]
      break;
 8002388:	e004      	b.n	8002394 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800238a:	2317      	movs	r3, #23
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
      break;
 8002392:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002394:	2317      	movs	r3, #23
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d14e      	bne.n	800243c <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	2201      	movs	r2, #1
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 ffb6 	bl	8003318 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a29      	ldr	r2, [pc, #164]	@ (8002458 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_TIM_PWM_Start_DMA+0x33a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a28      	ldr	r2, [pc, #160]	@ (800245c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_TIM_PWM_Start_DMA+0x33a>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_PWM_Start_DMA+0x33e>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_TIM_PWM_Start_DMA+0x340>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	0209      	lsls	r1, r1, #8
 80023e2:	430a      	orrs	r2, r1
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_TIM_PWM_Start_DMA+0x36a>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d116      	bne.n	8002428 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d016      	beq.n	800243a <HAL_TIM_PWM_Start_DMA+0x3aa>
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	025b      	lsls	r3, r3, #9
 8002412:	429a      	cmp	r2, r3
 8002414:	d011      	beq.n	800243a <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002426:	e008      	b.n	800243a <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e000      	b.n	800243c <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800243c:	2317      	movs	r3, #23
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	781b      	ldrb	r3, [r3, #0]
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b006      	add	sp, #24
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	08002aa1 	.word	0x08002aa1
 8002450:	08002b4b 	.word	0x08002b4b
 8002454:	08002a0d 	.word	0x08002a0d
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	40000400 	.word	0x40000400
 8002468:	00010007 	.word	0x00010007

0800246c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	230f      	movs	r3, #15
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d039      	beq.n	80024f8 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d844      	bhi.n	8002514 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d025      	beq.n	80024dc <HAL_TIM_PWM_Stop_DMA+0x70>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b08      	cmp	r3, #8
 8002494:	d83e      	bhi.n	8002514 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_TIM_PWM_Stop_DMA+0x38>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d00e      	beq.n	80024c0 <HAL_TIM_PWM_Stop_DMA+0x54>
 80024a2:	e037      	b.n	8002514 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	495a      	ldr	r1, [pc, #360]	@ (8002618 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe fdff 	bl	80010bc <HAL_DMA_Abort_IT>
      break;
 80024be:	e02e      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4954      	ldr	r1, [pc, #336]	@ (800261c <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe fdf1 	bl	80010bc <HAL_DMA_Abort_IT>
      break;
 80024da:	e020      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	494e      	ldr	r1, [pc, #312]	@ (8002620 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7fe fde3 	bl	80010bc <HAL_DMA_Abort_IT>
      break;
 80024f6:	e012      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4948      	ldr	r1, [pc, #288]	@ (8002624 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002504:	400a      	ands	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	0018      	movs	r0, r3
 800250e:	f7fe fdd5 	bl	80010bc <HAL_DMA_Abort_IT>
      break;
 8002512:	e004      	b.n	800251e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
      break;
 800251c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800251e:	230f      	movs	r3, #15
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d000      	beq.n	800252a <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002528:	e06e      	b.n	8002608 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	2200      	movs	r2, #0
 8002532:	0018      	movs	r0, r3
 8002534:	f000 fef0 	bl	8003318 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d009      	beq.n	8002556 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_TIM_PWM_Stop_DMA+0xea>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a37      	ldr	r2, [pc, #220]	@ (8002630 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_TIM_PWM_Stop_DMA+0xee>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_TIM_PWM_Stop_DMA+0xf0>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a33      	ldr	r2, [pc, #204]	@ (8002634 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002568:	4013      	ands	r3, r2
 800256a:	d10d      	bne.n	8002588 <HAL_TIM_PWM_Stop_DMA+0x11c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a31      	ldr	r2, [pc, #196]	@ (8002638 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002574:	4013      	ands	r3, r2
 8002576:	d107      	bne.n	8002588 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	492e      	ldr	r1, [pc, #184]	@ (800263c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002584:	400a      	ands	r2, r1
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a29      	ldr	r2, [pc, #164]	@ (8002634 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002590:	4013      	ands	r3, r2
 8002592:	d10d      	bne.n	80025b0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800259c:	4013      	ands	r3, r2
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2101      	movs	r1, #1
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	223e      	movs	r2, #62	@ 0x3e
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	e023      	b.n	8002608 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d104      	bne.n	80025d0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	223f      	movs	r2, #63	@ 0x3f
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]
 80025ce:	e01b      	b.n	8002608 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d104      	bne.n	80025e0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2240      	movs	r2, #64	@ 0x40
 80025da:	2101      	movs	r1, #1
 80025dc:	5499      	strb	r1, [r3, r2]
 80025de:	e013      	b.n	8002608 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d104      	bne.n	80025f0 <HAL_TIM_PWM_Stop_DMA+0x184>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2241      	movs	r2, #65	@ 0x41
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]
 80025ee:	e00b      	b.n	8002608 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d104      	bne.n	8002600 <HAL_TIM_PWM_Stop_DMA+0x194>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2242      	movs	r2, #66	@ 0x42
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]
 80025fe:	e003      	b.n	8002608 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2243      	movs	r2, #67	@ 0x43
 8002604:	2101      	movs	r1, #1
 8002606:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002608:	230f      	movs	r3, #15
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	fffffdff 	.word	0xfffffdff
 800261c:	fffffbff 	.word	0xfffffbff
 8002620:	fffff7ff 	.word	0xfffff7ff
 8002624:	ffffefff 	.word	0xffffefff
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40014400 	.word	0x40014400
 8002630:	40014800 	.word	0x40014800
 8002634:	00001111 	.word	0x00001111
 8002638:	00000444 	.word	0x00000444
 800263c:	ffff7fff 	.word	0xffff7fff

08002640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2317      	movs	r3, #23
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	223c      	movs	r2, #60	@ 0x3c
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_TIM_PWM_ConfigChannel+0x22>
 800265e:	2302      	movs	r3, #2
 8002660:	e0e5      	b.n	800282e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	223c      	movs	r2, #60	@ 0x3c
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b14      	cmp	r3, #20
 800266e:	d900      	bls.n	8002672 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002670:	e0d1      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	009a      	lsls	r2, r3, #2
 8002676:	4b70      	ldr	r3, [pc, #448]	@ (8002838 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	0011      	movs	r1, r2
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fb0e 	bl	8002ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2108      	movs	r1, #8
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2104      	movs	r1, #4
 80026a8:	438a      	bics	r2, r1
 80026aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6999      	ldr	r1, [r3, #24]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
      break;
 80026be:	e0af      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	0011      	movs	r1, r2
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fb6d 	bl	8002da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	0109      	lsls	r1, r1, #4
 80026dc:	430a      	orrs	r2, r1
 80026de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4954      	ldr	r1, [pc, #336]	@ (800283c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	021a      	lsls	r2, r3, #8
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	619a      	str	r2, [r3, #24]
      break;
 8002704:	e08c      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fbc8 	bl	8002ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2108      	movs	r1, #8
 8002720:	430a      	orrs	r2, r1
 8002722:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2104      	movs	r1, #4
 8002730:	438a      	bics	r2, r1
 8002732:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69d9      	ldr	r1, [r3, #28]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	61da      	str	r2, [r3, #28]
      break;
 8002746:	e06b      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fc29 	bl	8002fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0109      	lsls	r1, r1, #4
 8002764:	430a      	orrs	r2, r1
 8002766:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4932      	ldr	r1, [pc, #200]	@ (800283c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002774:	400a      	ands	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69d9      	ldr	r1, [r3, #28]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
      break;
 800278c:	e048      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fc6a 	bl	8003070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2108      	movs	r1, #8
 80027a8:	430a      	orrs	r2, r1
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2104      	movs	r1, #4
 80027b8:	438a      	bics	r2, r1
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80027ce:	e027      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 fca3 	bl	8003124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0109      	lsls	r1, r1, #4
 80027ec:	430a      	orrs	r2, r1
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4910      	ldr	r1, [pc, #64]	@ (800283c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	021a      	lsls	r2, r3, #8
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002814:	e004      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
      break;
 800281e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	223c      	movs	r2, #60	@ 0x3c
 8002824:	2100      	movs	r1, #0
 8002826:	5499      	strb	r1, [r3, r2]

  return status;
 8002828:	2317      	movs	r3, #23
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b006      	add	sp, #24
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	080056d0 	.word	0x080056d0
 800283c:	fffffbff 	.word	0xfffffbff

08002840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	230f      	movs	r3, #15
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	223c      	movs	r2, #60	@ 0x3c
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIM_ConfigClockSource+0x20>
 800285c:	2302      	movs	r3, #2
 800285e:	e0bc      	b.n	80029da <HAL_TIM_ConfigClockSource+0x19a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	223c      	movs	r2, #60	@ 0x3c
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	223d      	movs	r2, #61	@ 0x3d
 800286c:	2102      	movs	r1, #2
 800286e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4a5a      	ldr	r2, [pc, #360]	@ (80029e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4a59      	ldr	r2, [pc, #356]	@ (80029e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002884:	4013      	ands	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2280      	movs	r2, #128	@ 0x80
 8002896:	0192      	lsls	r2, r2, #6
 8002898:	4293      	cmp	r3, r2
 800289a:	d040      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xde>
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	0192      	lsls	r2, r2, #6
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d900      	bls.n	80028a6 <HAL_TIM_ConfigClockSource+0x66>
 80028a4:	e088      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028a6:	2280      	movs	r2, #128	@ 0x80
 80028a8:	0152      	lsls	r2, r2, #5
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d100      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x70>
 80028ae:	e088      	b.n	80029c2 <HAL_TIM_ConfigClockSource+0x182>
 80028b0:	2280      	movs	r2, #128	@ 0x80
 80028b2:	0152      	lsls	r2, r2, #5
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d900      	bls.n	80028ba <HAL_TIM_ConfigClockSource+0x7a>
 80028b8:	e07e      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028ba:	2b70      	cmp	r3, #112	@ 0x70
 80028bc:	d018      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0xb0>
 80028be:	d900      	bls.n	80028c2 <HAL_TIM_ConfigClockSource+0x82>
 80028c0:	e07a      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028c2:	2b60      	cmp	r3, #96	@ 0x60
 80028c4:	d04f      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x126>
 80028c6:	d900      	bls.n	80028ca <HAL_TIM_ConfigClockSource+0x8a>
 80028c8:	e076      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028ca:	2b50      	cmp	r3, #80	@ 0x50
 80028cc:	d03b      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x106>
 80028ce:	d900      	bls.n	80028d2 <HAL_TIM_ConfigClockSource+0x92>
 80028d0:	e072      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d057      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x146>
 80028d6:	d900      	bls.n	80028da <HAL_TIM_ConfigClockSource+0x9a>
 80028d8:	e06e      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028da:	2b30      	cmp	r3, #48	@ 0x30
 80028dc:	d063      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x166>
 80028de:	d86b      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d060      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x166>
 80028e4:	d868      	bhi.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d05d      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x166>
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d05b      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x166>
 80028ee:	e063      	b.n	80029b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	f000 fcea 	bl	80032d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2277      	movs	r2, #119	@ 0x77
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e052      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	f000 fcd3 	bl	80032d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	01c9      	lsls	r1, r1, #7
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
      break;
 8002944:	e03e      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	001a      	movs	r2, r3
 8002954:	f000 fc44 	bl	80031e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2150      	movs	r1, #80	@ 0x50
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fc9e 	bl	80032a0 <TIM_ITRx_SetConfig>
      break;
 8002964:	e02e      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002972:	001a      	movs	r2, r3
 8002974:	f000 fc62 	bl	800323c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2160      	movs	r1, #96	@ 0x60
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fc8e 	bl	80032a0 <TIM_ITRx_SetConfig>
      break;
 8002984:	e01e      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	001a      	movs	r2, r3
 8002994:	f000 fc24 	bl	80031e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2140      	movs	r1, #64	@ 0x40
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fc7e 	bl	80032a0 <TIM_ITRx_SetConfig>
      break;
 80029a4:	e00e      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f000 fc75 	bl	80032a0 <TIM_ITRx_SetConfig>
      break;
 80029b6:	e005      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80029b8:	230f      	movs	r3, #15
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
      break;
 80029c0:	e000      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80029c2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	223d      	movs	r2, #61	@ 0x3d
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	223c      	movs	r2, #60	@ 0x3c
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

  return status;
 80029d4:	230f      	movs	r3, #15
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	ffceff88 	.word	0xffceff88
 80029e8:	ffff00ff 	.word	0xffff00ff

080029ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	223e      	movs	r2, #62	@ 0x3e
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
 8002a32:	e02a      	b.n	8002a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d107      	bne.n	8002a4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2202      	movs	r2, #2
 8002a42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	223f      	movs	r2, #63	@ 0x3f
 8002a48:	2101      	movs	r1, #1
 8002a4a:	5499      	strb	r1, [r3, r2]
 8002a4c:	e01d      	b.n	8002a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	e010      	b.n	8002a8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d107      	bne.n	8002a82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2241      	movs	r2, #65	@ 0x41
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]
 8002a80:	e003      	b.n	8002a8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	223d      	movs	r2, #61	@ 0x3d
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff ffb5 	bl	80029fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d10b      	bne.n	8002ad0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d136      	bne.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	223e      	movs	r2, #62	@ 0x3e
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	e031      	b.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d10b      	bne.n	8002af2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d125      	bne.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	223f      	movs	r2, #63	@ 0x3f
 8002aec:	2101      	movs	r1, #1
 8002aee:	5499      	strb	r1, [r3, r2]
 8002af0:	e020      	b.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d10b      	bne.n	8002b14 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2204      	movs	r2, #4
 8002b00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d114      	bne.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	e00f      	b.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10a      	bne.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2208      	movs	r2, #8
 8002b22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d103      	bne.n	8002b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2241      	movs	r2, #65	@ 0x41
 8002b30:	2101      	movs	r1, #1
 8002b32:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7fd fb9c 	bl	8000274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	771a      	strb	r2, [r3, #28]
}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b004      	add	sp, #16
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d103      	bne.n	8002b6a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	771a      	strb	r2, [r3, #28]
 8002b68:	e019      	b.n	8002b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d103      	bne.n	8002b7c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2202      	movs	r2, #2
 8002b78:	771a      	strb	r2, [r3, #28]
 8002b7a:	e010      	b.n	8002b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d103      	bne.n	8002b8e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	771a      	strb	r2, [r3, #28]
 8002b8c:	e007      	b.n	8002b9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d102      	bne.n	8002b9e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff ff23 	bl	80029ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a32      	ldr	r2, [pc, #200]	@ (8002c90 <TIM_Base_SetConfig+0xdc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d003      	beq.n	8002bd4 <TIM_Base_SetConfig+0x20>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a31      	ldr	r2, [pc, #196]	@ (8002c94 <TIM_Base_SetConfig+0xe0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d108      	bne.n	8002be6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2270      	movs	r2, #112	@ 0x70
 8002bd8:	4393      	bics	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <TIM_Base_SetConfig+0xdc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00f      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a28      	ldr	r2, [pc, #160]	@ (8002c94 <TIM_Base_SetConfig+0xe0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <TIM_Base_SetConfig+0xe4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <TIM_Base_SetConfig+0xe8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x5a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a25      	ldr	r2, [pc, #148]	@ (8002ca0 <TIM_Base_SetConfig+0xec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <TIM_Base_SetConfig+0xf0>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	4393      	bics	r3, r2
 8002c26:	001a      	movs	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <TIM_Base_SetConfig+0xdc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0xaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <TIM_Base_SetConfig+0xe8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0xaa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a11      	ldr	r2, [pc, #68]	@ (8002ca0 <TIM_Base_SetConfig+0xec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d103      	bne.n	8002c66 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4393      	bics	r3, r2
 8002c80:	001a      	movs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]
  }
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40002000 	.word	0x40002000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40014800 	.word	0x40014800
 8002ca4:	fffffcff 	.word	0xfffffcff

08002ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d90 <TIM_OC1_SetConfig+0xe8>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	4393      	bics	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a24      	ldr	r2, [pc, #144]	@ (8002d94 <TIM_OC1_SetConfig+0xec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_OC1_SetConfig+0x6e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <TIM_OC1_SetConfig+0xf0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_OC1_SetConfig+0x6e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a22      	ldr	r2, [pc, #136]	@ (8002d9c <TIM_OC1_SetConfig+0xf4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10c      	bne.n	8002d30 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <TIM_OC1_SetConfig+0xec>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <TIM_OC1_SetConfig+0xa0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <TIM_OC1_SetConfig+0xf0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_OC1_SetConfig+0xa0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <TIM_OC1_SetConfig+0xf4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d111      	bne.n	8002d6c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <TIM_OC1_SetConfig+0xf8>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <TIM_OC1_SetConfig+0xfc>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b006      	add	sp, #24
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	fffeff8f 	.word	0xfffeff8f
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800
 8002da0:	fffffeff 	.word	0xfffffeff
 8002da4:	fffffdff 	.word	0xfffffdff

08002da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	4393      	bics	r3, r2
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <TIM_OC2_SetConfig+0xe0>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <TIM_OC2_SetConfig+0xe4>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2220      	movs	r2, #32
 8002df2:	4393      	bics	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a22      	ldr	r2, [pc, #136]	@ (8002e90 <TIM_OC2_SetConfig+0xe8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10d      	bne.n	8002e26 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	4393      	bics	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2240      	movs	r2, #64	@ 0x40
 8002e22:	4393      	bics	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <TIM_OC2_SetConfig+0xe8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_OC2_SetConfig+0x96>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <TIM_OC2_SetConfig+0xec>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_OC2_SetConfig+0x96>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <TIM_OC2_SetConfig+0xf0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d113      	bne.n	8002e66 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <TIM_OC2_SetConfig+0xf4>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <TIM_OC2_SetConfig+0xf8>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	621a      	str	r2, [r3, #32]
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b006      	add	sp, #24
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	feff8fff 	.word	0xfeff8fff
 8002e8c:	fffffcff 	.word	0xfffffcff
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40014400 	.word	0x40014400
 8002e98:	40014800 	.word	0x40014800
 8002e9c:	fffffbff 	.word	0xfffffbff
 8002ea0:	fffff7ff 	.word	0xfffff7ff

08002ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a31      	ldr	r2, [pc, #196]	@ (8002f80 <TIM_OC3_SetConfig+0xdc>)
 8002eba:	401a      	ands	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <TIM_OC3_SetConfig+0xe0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	4393      	bics	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	4a27      	ldr	r2, [pc, #156]	@ (8002f88 <TIM_OC3_SetConfig+0xe4>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <TIM_OC3_SetConfig+0xe8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10d      	bne.n	8002f1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <TIM_OC3_SetConfig+0xec>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	@ (8002f94 <TIM_OC3_SetConfig+0xf0>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	@ (8002f8c <TIM_OC3_SetConfig+0xe8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <TIM_OC3_SetConfig+0x92>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <TIM_OC3_SetConfig+0xf4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <TIM_OC3_SetConfig+0x92>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <TIM_OC3_SetConfig+0xf8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d113      	bne.n	8002f5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4a19      	ldr	r2, [pc, #100]	@ (8002fa0 <TIM_OC3_SetConfig+0xfc>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4a18      	ldr	r2, [pc, #96]	@ (8002fa4 <TIM_OC3_SetConfig+0x100>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	621a      	str	r2, [r3, #32]
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b006      	add	sp, #24
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	fffffeff 	.word	0xfffffeff
 8002f84:	fffeff8f 	.word	0xfffeff8f
 8002f88:	fffffdff 	.word	0xfffffdff
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	fffff7ff 	.word	0xfffff7ff
 8002f94:	fffffbff 	.word	0xfffffbff
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800
 8002fa0:	ffffefff 	.word	0xffffefff
 8002fa4:	ffffdfff 	.word	0xffffdfff

08002fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a24      	ldr	r2, [pc, #144]	@ (8003050 <TIM_OC4_SetConfig+0xa8>)
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a20      	ldr	r2, [pc, #128]	@ (8003054 <TIM_OC4_SetConfig+0xac>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	@ (8003058 <TIM_OC4_SetConfig+0xb0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <TIM_OC4_SetConfig+0xb4>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	031b      	lsls	r3, r3, #12
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <TIM_OC4_SetConfig+0xb8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_OC4_SetConfig+0x70>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a16      	ldr	r2, [pc, #88]	@ (8003064 <TIM_OC4_SetConfig+0xbc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_OC4_SetConfig+0x70>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <TIM_OC4_SetConfig+0xc0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d109      	bne.n	800302c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	4a14      	ldr	r2, [pc, #80]	@ (800306c <TIM_OC4_SetConfig+0xc4>)
 800301c:	4013      	ands	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	ffffefff 	.word	0xffffefff
 8003054:	feff8fff 	.word	0xfeff8fff
 8003058:	fffffcff 	.word	0xfffffcff
 800305c:	ffffdfff 	.word	0xffffdfff
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800
 800306c:	ffffbfff 	.word	0xffffbfff

08003070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a21      	ldr	r2, [pc, #132]	@ (800310c <TIM_OC5_SetConfig+0x9c>)
 8003086:	401a      	ands	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <TIM_OC5_SetConfig+0xa0>)
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <TIM_OC5_SetConfig+0xa4>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <TIM_OC5_SetConfig+0xa8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_OC5_SetConfig+0x66>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <TIM_OC5_SetConfig+0xac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC5_SetConfig+0x66>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <TIM_OC5_SetConfig+0xb0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d109      	bne.n	80030ea <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4a0c      	ldr	r2, [pc, #48]	@ (800310c <TIM_OC5_SetConfig+0x9c>)
 80030da:	4013      	ands	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	621a      	str	r2, [r3, #32]
}
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b006      	add	sp, #24
 800310a:	bd80      	pop	{r7, pc}
 800310c:	fffeffff 	.word	0xfffeffff
 8003110:	fffeff8f 	.word	0xfffeff8f
 8003114:	fffdffff 	.word	0xfffdffff
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40014400 	.word	0x40014400
 8003120:	40014800 	.word	0x40014800

08003124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a22      	ldr	r2, [pc, #136]	@ (80031c4 <TIM_OC6_SetConfig+0xa0>)
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a1e      	ldr	r2, [pc, #120]	@ (80031c8 <TIM_OC6_SetConfig+0xa4>)
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4a1a      	ldr	r2, [pc, #104]	@ (80031cc <TIM_OC6_SetConfig+0xa8>)
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	051b      	lsls	r3, r3, #20
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a16      	ldr	r2, [pc, #88]	@ (80031d0 <TIM_OC6_SetConfig+0xac>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <TIM_OC6_SetConfig+0x68>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <TIM_OC6_SetConfig+0xb0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_OC6_SetConfig+0x68>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <TIM_OC6_SetConfig+0xb4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d109      	bne.n	80031a0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <TIM_OC6_SetConfig+0xb8>)
 8003190:	4013      	ands	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	029b      	lsls	r3, r3, #10
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b006      	add	sp, #24
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	ffefffff 	.word	0xffefffff
 80031c8:	feff8fff 	.word	0xfeff8fff
 80031cc:	ffdfffff 	.word	0xffdfffff
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800
 80031dc:	fffbffff 	.word	0xfffbffff

080031e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4393      	bics	r3, r2
 80031fa:	001a      	movs	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	22f0      	movs	r2, #240	@ 0xf0
 800320a:	4393      	bics	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	220a      	movs	r2, #10
 800321c:	4393      	bics	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bd80      	pop	{r7, pc}

0800323c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	2210      	movs	r2, #16
 8003254:	4393      	bics	r3, r2
 8003256:	001a      	movs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4a0d      	ldr	r2, [pc, #52]	@ (800329c <TIM_TI2_ConfigInputStage+0x60>)
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	031b      	lsls	r3, r3, #12
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	22a0      	movs	r2, #160	@ 0xa0
 8003278:	4393      	bics	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b006      	add	sp, #24
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	ffff0fff 	.word	0xffff0fff

080032a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a08      	ldr	r2, [pc, #32]	@ (80032d4 <TIM_ITRx_SetConfig+0x34>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	2207      	movs	r2, #7
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	ffcfff8f 	.word	0xffcfff8f

080032d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <TIM_ETR_SetConfig+0x3c>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	021a      	lsls	r2, r3, #8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b006      	add	sp, #24
 8003312:	bd80      	pop	{r7, pc}
 8003314:	ffff00ff 	.word	0xffff00ff

08003318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	221f      	movs	r2, #31
 8003328:	4013      	ands	r3, r2
 800332a:	2201      	movs	r2, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	0013      	movs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	43d2      	mvns	r2, r2
 800333a:	401a      	ands	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	211f      	movs	r1, #31
 8003348:	400b      	ands	r3, r1
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4099      	lsls	r1, r3
 800334e:	000b      	movs	r3, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223c      	movs	r2, #60	@ 0x3c
 800336e:	5c9b      	ldrb	r3, [r3, r2]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003374:	2302      	movs	r3, #2
 8003376:	e04a      	b.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	223c      	movs	r2, #60	@ 0x3c
 800337c:	2101      	movs	r1, #1
 800337e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	223d      	movs	r2, #61	@ 0x3d
 8003384:	2102      	movs	r1, #2
 8003386:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1e      	ldr	r2, [pc, #120]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a1d      	ldr	r2, [pc, #116]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2270      	movs	r2, #112	@ 0x70
 80033b8:	4393      	bics	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a10      	ldr	r2, [pc, #64]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10c      	bne.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	4393      	bics	r3, r2
 80033e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	223d      	movs	r2, #61	@ 0x3d
 8003400:	2101      	movs	r1, #1
 8003402:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	223c      	movs	r2, #60	@ 0x3c
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	40012c00 	.word	0x40012c00
 800341c:	ff0fffff 	.word	0xff0fffff
 8003420:	40000400 	.word	0x40000400

08003424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223c      	movs	r2, #60	@ 0x3c
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800343c:	2302      	movs	r3, #2
 800343e:	e06f      	b.n	8003520 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223c      	movs	r2, #60	@ 0x3c
 8003444:	2101      	movs	r1, #1
 8003446:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	22ff      	movs	r2, #255	@ 0xff
 800344c:	4393      	bics	r3, r2
 800344e:	001a      	movs	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a33      	ldr	r2, [pc, #204]	@ (8003528 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800345c:	401a      	ands	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a30      	ldr	r2, [pc, #192]	@ (800352c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800346a:	401a      	ands	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a2e      	ldr	r2, [pc, #184]	@ (8003530 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003478:	401a      	ands	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a2b      	ldr	r2, [pc, #172]	@ (8003534 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003486:	401a      	ands	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a29      	ldr	r2, [pc, #164]	@ (8003538 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003494:	401a      	ands	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a26      	ldr	r2, [pc, #152]	@ (800353c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80034a2:	401a      	ands	r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80034b0:	401a      	ands	r2, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a21      	ldr	r2, [pc, #132]	@ (8003544 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80034c0:	401a      	ands	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d11c      	bne.n	800350e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a1d      	ldr	r2, [pc, #116]	@ (800354c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80034d8:	401a      	ands	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	051b      	lsls	r3, r3, #20
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80034e8:	401a      	ands	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80034f6:	401a      	ands	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003504:	401a      	ands	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	223c      	movs	r2, #60	@ 0x3c
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffffcff 	.word	0xfffffcff
 800352c:	fffffbff 	.word	0xfffffbff
 8003530:	fffff7ff 	.word	0xfffff7ff
 8003534:	ffffefff 	.word	0xffffefff
 8003538:	ffffdfff 	.word	0xffffdfff
 800353c:	ffffbfff 	.word	0xffffbfff
 8003540:	fff0ffff 	.word	0xfff0ffff
 8003544:	efffffff 	.word	0xefffffff
 8003548:	40012c00 	.word	0x40012c00
 800354c:	ff0fffff 	.word	0xff0fffff
 8003550:	feffffff 	.word	0xfeffffff
 8003554:	fdffffff 	.word	0xfdffffff
 8003558:	dfffffff 	.word	0xdfffffff

0800355c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e046      	b.n	80035fc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2288      	movs	r2, #136	@ 0x88
 8003572:	589b      	ldr	r3, [r3, r2]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2284      	movs	r2, #132	@ 0x84
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0018      	movs	r0, r3
 8003584:	f7fd fa82 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2288      	movs	r2, #136	@ 0x88
 800358c:	2124      	movs	r1, #36	@ 0x24
 800358e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	438a      	bics	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fdd8 	bl	8004160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 fc6a 	bl	8003e8c <UART_SetConfig>
 80035b8:	0003      	movs	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e01c      	b.n	80035fc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	490d      	ldr	r1, [pc, #52]	@ (8003604 <HAL_UART_Init+0xa8>)
 80035ce:	400a      	ands	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	212a      	movs	r1, #42	@ 0x2a
 80035de:	438a      	bics	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fe67 	bl	80042c8 <UART_CheckIdleState>
 80035fa:	0003      	movs	r3, r0
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}
 8003604:	ffffb7ff 	.word	0xffffb7ff

08003608 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	@ 0x30
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	1dbb      	adds	r3, r7, #6
 8003614:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2288      	movs	r2, #136	@ 0x88
 800361a:	589b      	ldr	r3, [r3, r2]
 800361c:	2b20      	cmp	r3, #32
 800361e:	d000      	beq.n	8003622 <HAL_UART_Transmit_IT+0x1a>
 8003620:	e08d      	b.n	800373e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_UART_Transmit_IT+0x28>
 8003628:	1dbb      	adds	r3, r7, #6
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e085      	b.n	8003740 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	015b      	lsls	r3, r3, #5
 800363c:	429a      	cmp	r2, r3
 800363e:	d109      	bne.n	8003654 <HAL_UART_Transmit_IT+0x4c>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2201      	movs	r2, #1
 800364c:	4013      	ands	r3, r2
 800364e:	d001      	beq.n	8003654 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e075      	b.n	8003740 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1dba      	adds	r2, r7, #6
 800365e:	2154      	movs	r1, #84	@ 0x54
 8003660:	8812      	ldrh	r2, [r2, #0]
 8003662:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1dba      	adds	r2, r7, #6
 8003668:	2156      	movs	r1, #86	@ 0x56
 800366a:	8812      	ldrh	r2, [r2, #0]
 800366c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2290      	movs	r2, #144	@ 0x90
 8003678:	2100      	movs	r1, #0
 800367a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2288      	movs	r2, #136	@ 0x88
 8003680:	2121      	movs	r1, #33	@ 0x21
 8003682:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	059b      	lsls	r3, r3, #22
 800368c:	429a      	cmp	r2, r3
 800368e:	d12a      	bne.n	80036e6 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_UART_Transmit_IT+0xa4>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a28      	ldr	r2, [pc, #160]	@ (8003748 <HAL_UART_Transmit_IT+0x140>)
 80036a8:	679a      	str	r2, [r3, #120]	@ 0x78
 80036aa:	e002      	b.n	80036b2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a27      	ldr	r2, [pc, #156]	@ (800374c <HAL_UART_Transmit_IT+0x144>)
 80036b0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80036b8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036bc:	2301      	movs	r3, #1
 80036be:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2180      	movs	r1, #128	@ 0x80
 80036d4:	0409      	lsls	r1, r1, #16
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	e029      	b.n	800373a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	015b      	lsls	r3, r3, #5
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d107      	bne.n	8003702 <HAL_UART_Transmit_IT+0xfa>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <HAL_UART_Transmit_IT+0x148>)
 80036fe:	679a      	str	r2, [r3, #120]	@ 0x78
 8003700:	e002      	b.n	8003708 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a13      	ldr	r2, [pc, #76]	@ (8003754 <HAL_UART_Transmit_IT+0x14c>)
 8003706:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	613b      	str	r3, [r7, #16]
  return(result);
 800370e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003712:	2301      	movs	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2180      	movs	r1, #128	@ 0x80
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003730:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b00c      	add	sp, #48	@ 0x30
 8003746:	bd80      	pop	{r7, pc}
 8003748:	08004a9d 	.word	0x08004a9d
 800374c:	080049b1 	.word	0x080049b1
 8003750:	080048f3 	.word	0x080048f3
 8003754:	0800483f 	.word	0x0800483f

08003758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	228c      	movs	r2, #140	@ 0x8c
 800376a:	589b      	ldr	r3, [r3, r2]
 800376c:	2b20      	cmp	r3, #32
 800376e:	d145      	bne.n	80037fc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_UART_Receive_IT+0x26>
 8003776:	1dbb      	adds	r3, r7, #6
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e03d      	b.n	80037fe <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	2380      	movs	r3, #128	@ 0x80
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	429a      	cmp	r2, r3
 800378c:	d109      	bne.n	80037a2 <HAL_UART_Receive_IT+0x4a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d001      	beq.n	80037a2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e02d      	b.n	80037fe <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	4013      	ands	r3, r2
 80037b4:	d019      	beq.n	80037ea <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ba:	613b      	str	r3, [r7, #16]
  return(result);
 80037bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	2301      	movs	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2180      	movs	r1, #128	@ 0x80
 80037d8:	04c9      	lsls	r1, r1, #19
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 fe82 	bl	80044fc <UART_Start_Receive_IT>
 80037f8:	0003      	movs	r3, r0
 80037fa:	e000      	b.n	80037fe <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b008      	add	sp, #32
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b0aa      	sub	sp, #168	@ 0xa8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	22a4      	movs	r2, #164	@ 0xa4
 8003818:	18b9      	adds	r1, r7, r2
 800381a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	20a0      	movs	r0, #160	@ 0xa0
 8003824:	1839      	adds	r1, r7, r0
 8003826:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	249c      	movs	r4, #156	@ 0x9c
 8003830:	1939      	adds	r1, r7, r4
 8003832:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003834:	0011      	movs	r1, r2
 8003836:	18bb      	adds	r3, r7, r2
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4aa2      	ldr	r2, [pc, #648]	@ (8003ac4 <HAL_UART_IRQHandler+0x2bc>)
 800383c:	4013      	ands	r3, r2
 800383e:	2298      	movs	r2, #152	@ 0x98
 8003840:	18bd      	adds	r5, r7, r2
 8003842:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003844:	18bb      	adds	r3, r7, r2
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11a      	bne.n	8003882 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800384c:	187b      	adds	r3, r7, r1
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2220      	movs	r2, #32
 8003852:	4013      	ands	r3, r2
 8003854:	d015      	beq.n	8003882 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003856:	183b      	adds	r3, r7, r0
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2220      	movs	r2, #32
 800385c:	4013      	ands	r3, r2
 800385e:	d105      	bne.n	800386c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003860:	193b      	adds	r3, r7, r4
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	055b      	lsls	r3, r3, #21
 8003868:	4013      	ands	r3, r2
 800386a:	d00a      	beq.n	8003882 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003870:	2b00      	cmp	r3, #0
 8003872:	d100      	bne.n	8003876 <HAL_UART_IRQHandler+0x6e>
 8003874:	e2dc      	b.n	8003e30 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	0010      	movs	r0, r2
 800387e:	4798      	blx	r3
      }
      return;
 8003880:	e2d6      	b.n	8003e30 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003882:	2398      	movs	r3, #152	@ 0x98
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d100      	bne.n	800388e <HAL_UART_IRQHandler+0x86>
 800388c:	e122      	b.n	8003ad4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800388e:	239c      	movs	r3, #156	@ 0x9c
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a8c      	ldr	r2, [pc, #560]	@ (8003ac8 <HAL_UART_IRQHandler+0x2c0>)
 8003896:	4013      	ands	r3, r2
 8003898:	d106      	bne.n	80038a8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800389a:	23a0      	movs	r3, #160	@ 0xa0
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a8a      	ldr	r2, [pc, #552]	@ (8003acc <HAL_UART_IRQHandler+0x2c4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	d100      	bne.n	80038a8 <HAL_UART_IRQHandler+0xa0>
 80038a6:	e115      	b.n	8003ad4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038a8:	23a4      	movs	r3, #164	@ 0xa4
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d012      	beq.n	80038da <HAL_UART_IRQHandler+0xd2>
 80038b4:	23a0      	movs	r3, #160	@ 0xa0
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2290      	movs	r2, #144	@ 0x90
 80038ce:	589b      	ldr	r3, [r3, r2]
 80038d0:	2201      	movs	r2, #1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2190      	movs	r1, #144	@ 0x90
 80038d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038da:	23a4      	movs	r3, #164	@ 0xa4
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d011      	beq.n	800390a <HAL_UART_IRQHandler+0x102>
 80038e6:	239c      	movs	r3, #156	@ 0x9c
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2290      	movs	r2, #144	@ 0x90
 80038fe:	589b      	ldr	r3, [r3, r2]
 8003900:	2204      	movs	r2, #4
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2190      	movs	r1, #144	@ 0x90
 8003908:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800390a:	23a4      	movs	r3, #164	@ 0xa4
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2204      	movs	r2, #4
 8003912:	4013      	ands	r3, r2
 8003914:	d011      	beq.n	800393a <HAL_UART_IRQHandler+0x132>
 8003916:	239c      	movs	r3, #156	@ 0x9c
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	4013      	ands	r3, r2
 8003920:	d00b      	beq.n	800393a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2204      	movs	r2, #4
 8003928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2290      	movs	r2, #144	@ 0x90
 800392e:	589b      	ldr	r3, [r3, r2]
 8003930:	2202      	movs	r2, #2
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2190      	movs	r1, #144	@ 0x90
 8003938:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800393a:	23a4      	movs	r3, #164	@ 0xa4
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2208      	movs	r2, #8
 8003942:	4013      	ands	r3, r2
 8003944:	d017      	beq.n	8003976 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003946:	23a0      	movs	r3, #160	@ 0xa0
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	4013      	ands	r3, r2
 8003950:	d105      	bne.n	800395e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003952:	239c      	movs	r3, #156	@ 0x9c
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac8 <HAL_UART_IRQHandler+0x2c0>)
 800395a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800395c:	d00b      	beq.n	8003976 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2208      	movs	r2, #8
 8003964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2290      	movs	r2, #144	@ 0x90
 800396a:	589b      	ldr	r3, [r3, r2]
 800396c:	2208      	movs	r2, #8
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2190      	movs	r1, #144	@ 0x90
 8003974:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003976:	23a4      	movs	r3, #164	@ 0xa4
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	4013      	ands	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_UART_IRQHandler+0x1a4>
 8003984:	23a0      	movs	r3, #160	@ 0xa0
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	04db      	lsls	r3, r3, #19
 800398e:	4013      	ands	r3, r2
 8003990:	d00c      	beq.n	80039ac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2280      	movs	r2, #128	@ 0x80
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2290      	movs	r2, #144	@ 0x90
 80039a0:	589b      	ldr	r3, [r3, r2]
 80039a2:	2220      	movs	r2, #32
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2190      	movs	r1, #144	@ 0x90
 80039aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2290      	movs	r2, #144	@ 0x90
 80039b0:	589b      	ldr	r3, [r3, r2]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d100      	bne.n	80039b8 <HAL_UART_IRQHandler+0x1b0>
 80039b6:	e23d      	b.n	8003e34 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039b8:	23a4      	movs	r3, #164	@ 0xa4
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2220      	movs	r2, #32
 80039c0:	4013      	ands	r3, r2
 80039c2:	d015      	beq.n	80039f0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039c4:	23a0      	movs	r3, #160	@ 0xa0
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2220      	movs	r2, #32
 80039cc:	4013      	ands	r3, r2
 80039ce:	d106      	bne.n	80039de <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039d0:	239c      	movs	r3, #156	@ 0x9c
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	055b      	lsls	r3, r3, #21
 80039da:	4013      	ands	r3, r2
 80039dc:	d008      	beq.n	80039f0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	0010      	movs	r0, r2
 80039ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2290      	movs	r2, #144	@ 0x90
 80039f4:	589b      	ldr	r3, [r3, r2]
 80039f6:	2194      	movs	r1, #148	@ 0x94
 80039f8:	187a      	adds	r2, r7, r1
 80039fa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2240      	movs	r2, #64	@ 0x40
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d004      	beq.n	8003a14 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2228      	movs	r2, #40	@ 0x28
 8003a10:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a12:	d04c      	beq.n	8003aae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fe94 	bl	8004744 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2240      	movs	r2, #64	@ 0x40
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b40      	cmp	r3, #64	@ 0x40
 8003a28:	d13c      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	2090      	movs	r0, #144	@ 0x90
 8003a34:	183a      	adds	r2, r7, r0
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	2301      	movs	r3, #1
 8003a3a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	438a      	bics	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	183b      	adds	r3, r7, r0
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	589b      	ldr	r3, [r3, r2]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	589b      	ldr	r3, [r3, r2]
 8003a72:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <HAL_UART_IRQHandler+0x2c8>)
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	589b      	ldr	r3, [r3, r2]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7fd fb1d 	bl	80010bc <HAL_DMA_Abort_IT>
 8003a82:	1e03      	subs	r3, r0, #0
 8003a84:	d01c      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2280      	movs	r2, #128	@ 0x80
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	2180      	movs	r1, #128	@ 0x80
 8003a92:	5852      	ldr	r2, [r2, r1]
 8003a94:	0010      	movs	r0, r2
 8003a96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a98:	e012      	b.n	8003ac0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 f9e1 	bl	8003e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa2:	e00d      	b.n	8003ac0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 f9dc 	bl	8003e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e008      	b.n	8003ac0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 f9d7 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2290      	movs	r2, #144	@ 0x90
 8003aba:	2100      	movs	r1, #0
 8003abc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003abe:	e1b9      	b.n	8003e34 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	46c0      	nop			@ (mov r8, r8)
    return;
 8003ac2:	e1b7      	b.n	8003e34 <HAL_UART_IRQHandler+0x62c>
 8003ac4:	0000080f 	.word	0x0000080f
 8003ac8:	10000001 	.word	0x10000001
 8003acc:	04000120 	.word	0x04000120
 8003ad0:	08004811 	.word	0x08004811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d000      	beq.n	8003ade <HAL_UART_IRQHandler+0x2d6>
 8003adc:	e13e      	b.n	8003d5c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ade:	23a4      	movs	r3, #164	@ 0xa4
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d100      	bne.n	8003aec <HAL_UART_IRQHandler+0x2e4>
 8003aea:	e137      	b.n	8003d5c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aec:	23a0      	movs	r3, #160	@ 0xa0
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2210      	movs	r2, #16
 8003af4:	4013      	ands	r3, r2
 8003af6:	d100      	bne.n	8003afa <HAL_UART_IRQHandler+0x2f2>
 8003af8:	e130      	b.n	8003d5c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2210      	movs	r2, #16
 8003b00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2240      	movs	r2, #64	@ 0x40
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d000      	beq.n	8003b12 <HAL_UART_IRQHandler+0x30a>
 8003b10:	e0a4      	b.n	8003c5c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	589b      	ldr	r3, [r3, r2]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	217e      	movs	r1, #126	@ 0x7e
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d100      	bne.n	8003b2c <HAL_UART_IRQHandler+0x324>
 8003b2a:	e185      	b.n	8003e38 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	225c      	movs	r2, #92	@ 0x5c
 8003b30:	5a9b      	ldrh	r3, [r3, r2]
 8003b32:	187a      	adds	r2, r7, r1
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d300      	bcc.n	8003b3c <HAL_UART_IRQHandler+0x334>
 8003b3a:	e17d      	b.n	8003e38 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	187a      	adds	r2, r7, r1
 8003b40:	215e      	movs	r1, #94	@ 0x5e
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2220      	movs	r2, #32
 8003b52:	4013      	ands	r3, r2
 8003b54:	d170      	bne.n	8003c38 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b56:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b60:	2301      	movs	r3, #1
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	49b4      	ldr	r1, [pc, #720]	@ (8003e48 <HAL_UART_IRQHandler+0x640>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b82:	f383 8810 	msr	PRIMASK, r3
}
 8003b86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b88:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b90:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b92:	2301      	movs	r3, #1
 8003b94:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	438a      	bics	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	438a      	bics	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003be2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	228c      	movs	r2, #140	@ 0x8c
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c04:	2301      	movs	r3, #1
 8003c06:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	@ 0x80
 8003c30:	589b      	ldr	r3, [r3, r2]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7fd f9e0 	bl	8000ff8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	225c      	movs	r2, #92	@ 0x5c
 8003c42:	5a9a      	ldrh	r2, [r3, r2]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	215e      	movs	r1, #94	@ 0x5e
 8003c48:	5a5b      	ldrh	r3, [r3, r1]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0011      	movs	r1, r2
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f90d 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c5a:	e0ed      	b.n	8003e38 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	225c      	movs	r2, #92	@ 0x5c
 8003c60:	5a99      	ldrh	r1, [r3, r2]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	225e      	movs	r2, #94	@ 0x5e
 8003c66:	5a9b      	ldrh	r3, [r3, r2]
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	208e      	movs	r0, #142	@ 0x8e
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	1a8a      	subs	r2, r1, r2
 8003c70:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	225e      	movs	r2, #94	@ 0x5e
 8003c76:	5a9b      	ldrh	r3, [r3, r2]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d100      	bne.n	8003c80 <HAL_UART_IRQHandler+0x478>
 8003c7e:	e0dd      	b.n	8003e3c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003c80:	183b      	adds	r3, r7, r0
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d100      	bne.n	8003c8a <HAL_UART_IRQHandler+0x482>
 8003c88:	e0d8      	b.n	8003e3c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c90:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c92:	2488      	movs	r4, #136	@ 0x88
 8003c94:	193a      	adds	r2, r7, r4
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4967      	ldr	r1, [pc, #412]	@ (8003e4c <HAL_UART_IRQHandler+0x644>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	193b      	adds	r3, r7, r4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cc8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cca:	2484      	movs	r4, #132	@ 0x84
 8003ccc:	193a      	adds	r2, r7, r4
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	495a      	ldr	r1, [pc, #360]	@ (8003e50 <HAL_UART_IRQHandler+0x648>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	193b      	adds	r3, r7, r4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	228c      	movs	r2, #140	@ 0x8c
 8003cfe:	2120      	movs	r1, #32
 8003d00:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d16:	2480      	movs	r4, #128	@ 0x80
 8003d18:	193a      	adds	r2, r7, r4
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2110      	movs	r1, #16
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	193b      	adds	r3, r7, r4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d4c:	183b      	adds	r3, r7, r0
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0011      	movs	r1, r2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f000 f88d 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d5a:	e06f      	b.n	8003e3c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d5c:	23a4      	movs	r3, #164	@ 0xa4
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	035b      	lsls	r3, r3, #13
 8003d66:	4013      	ands	r3, r2
 8003d68:	d010      	beq.n	8003d8c <HAL_UART_IRQHandler+0x584>
 8003d6a:	239c      	movs	r3, #156	@ 0x9c
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	03db      	lsls	r3, r3, #15
 8003d74:	4013      	ands	r3, r2
 8003d76:	d009      	beq.n	8003d8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	0352      	lsls	r2, r2, #13
 8003d80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f001 fc23 	bl	80055d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d8a:	e05a      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d8c:	23a4      	movs	r3, #164	@ 0xa4
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2280      	movs	r2, #128	@ 0x80
 8003d94:	4013      	ands	r3, r2
 8003d96:	d016      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d98:	23a0      	movs	r3, #160	@ 0xa0
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	4013      	ands	r3, r2
 8003da2:	d106      	bne.n	8003db2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003da4:	239c      	movs	r3, #156	@ 0x9c
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	@ 0x80
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	4013      	ands	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d042      	beq.n	8003e40 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	4798      	blx	r3
    }
    return;
 8003dc4:	e03c      	b.n	8003e40 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dc6:	23a4      	movs	r3, #164	@ 0xa4
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2240      	movs	r2, #64	@ 0x40
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d00a      	beq.n	8003de8 <HAL_UART_IRQHandler+0x5e0>
 8003dd2:	23a0      	movs	r3, #160	@ 0xa0
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2240      	movs	r2, #64	@ 0x40
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 fed5 	bl	8004b90 <UART_EndTransmit_IT>
    return;
 8003de6:	e02c      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003de8:	23a4      	movs	r3, #164	@ 0xa4
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	4013      	ands	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <HAL_UART_IRQHandler+0x606>
 8003df6:	23a0      	movs	r3, #160	@ 0xa0
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	05db      	lsls	r3, r3, #23
 8003e00:	4013      	ands	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f001 fbf2 	bl	80055f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e0c:	e019      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e0e:	23a4      	movs	r3, #164	@ 0xa4
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	045b      	lsls	r3, r3, #17
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d012      	beq.n	8003e42 <HAL_UART_IRQHandler+0x63a>
 8003e1c:	23a0      	movs	r3, #160	@ 0xa0
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da0d      	bge.n	8003e42 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f001 fbd9 	bl	80055e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e2e:	e008      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
      return;
 8003e30:	46c0      	nop			@ (mov r8, r8)
 8003e32:	e006      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
    return;
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	e004      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
      return;
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	e002      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
      return;
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_IRQHandler+0x63a>
    return;
 8003e40:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b02a      	add	sp, #168	@ 0xa8
 8003e46:	bdb0      	pop	{r4, r5, r7, pc}
 8003e48:	fffffeff 	.word	0xfffffeff
 8003e4c:	fffffedf 	.word	0xfffffedf
 8003e50:	effffffe 	.word	0xeffffffe

08003e54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e5c:	46c0      	nop			@ (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	000a      	movs	r2, r1
 8003e7e:	1cbb      	adds	r3, r7, #2
 8003e80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b002      	add	sp, #8
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e94:	231a      	movs	r3, #26
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4aa1      	ldr	r2, [pc, #644]	@ (8004140 <UART_SetConfig+0x2b4>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a9c      	ldr	r2, [pc, #624]	@ (8004144 <UART_SetConfig+0x2b8>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a93      	ldr	r2, [pc, #588]	@ (8004148 <UART_SetConfig+0x2bc>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	220f      	movs	r2, #15
 8003f10:	4393      	bics	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a89      	ldr	r2, [pc, #548]	@ (800414c <UART_SetConfig+0x2c0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d127      	bne.n	8003f7a <UART_SetConfig+0xee>
 8003f2a:	4b89      	ldr	r3, [pc, #548]	@ (8004150 <UART_SetConfig+0x2c4>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	2203      	movs	r2, #3
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d017      	beq.n	8003f66 <UART_SetConfig+0xda>
 8003f36:	d81b      	bhi.n	8003f70 <UART_SetConfig+0xe4>
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d00a      	beq.n	8003f52 <UART_SetConfig+0xc6>
 8003f3c:	d818      	bhi.n	8003f70 <UART_SetConfig+0xe4>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <UART_SetConfig+0xbc>
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d00a      	beq.n	8003f5c <UART_SetConfig+0xd0>
 8003f46:	e013      	b.n	8003f70 <UART_SetConfig+0xe4>
 8003f48:	231b      	movs	r3, #27
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e021      	b.n	8003f96 <UART_SetConfig+0x10a>
 8003f52:	231b      	movs	r3, #27
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	2202      	movs	r2, #2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e01c      	b.n	8003f96 <UART_SetConfig+0x10a>
 8003f5c:	231b      	movs	r3, #27
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2204      	movs	r2, #4
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e017      	b.n	8003f96 <UART_SetConfig+0x10a>
 8003f66:	231b      	movs	r3, #27
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e012      	b.n	8003f96 <UART_SetConfig+0x10a>
 8003f70:	231b      	movs	r3, #27
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2210      	movs	r2, #16
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e00d      	b.n	8003f96 <UART_SetConfig+0x10a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	@ (8004154 <UART_SetConfig+0x2c8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d104      	bne.n	8003f8e <UART_SetConfig+0x102>
 8003f84:	231b      	movs	r3, #27
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e003      	b.n	8003f96 <UART_SetConfig+0x10a>
 8003f8e:	231b      	movs	r3, #27
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2210      	movs	r2, #16
 8003f94:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d000      	beq.n	8003fa4 <UART_SetConfig+0x118>
 8003fa2:	e065      	b.n	8004070 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003fa4:	231b      	movs	r3, #27
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d015      	beq.n	8003fda <UART_SetConfig+0x14e>
 8003fae:	dc18      	bgt.n	8003fe2 <UART_SetConfig+0x156>
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d00d      	beq.n	8003fd0 <UART_SetConfig+0x144>
 8003fb4:	dc15      	bgt.n	8003fe2 <UART_SetConfig+0x156>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <UART_SetConfig+0x134>
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d005      	beq.n	8003fca <UART_SetConfig+0x13e>
 8003fbe:	e010      	b.n	8003fe2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fd ff98 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	617b      	str	r3, [r7, #20]
        break;
 8003fc8:	e012      	b.n	8003ff0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fca:	4b63      	ldr	r3, [pc, #396]	@ (8004158 <UART_SetConfig+0x2cc>)
 8003fcc:	617b      	str	r3, [r7, #20]
        break;
 8003fce:	e00f      	b.n	8003ff0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd0:	f7fd ff04 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	617b      	str	r3, [r7, #20]
        break;
 8003fd8:	e00a      	b.n	8003ff0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	617b      	str	r3, [r7, #20]
        break;
 8003fe0:	e006      	b.n	8003ff0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fe6:	231a      	movs	r3, #26
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
        break;
 8003fee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d100      	bne.n	8003ff8 <UART_SetConfig+0x16c>
 8003ff6:	e08d      	b.n	8004114 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ffc:	4b57      	ldr	r3, [pc, #348]	@ (800415c <UART_SetConfig+0x2d0>)
 8003ffe:	0052      	lsls	r2, r2, #1
 8004000:	5ad3      	ldrh	r3, [r2, r3]
 8004002:	0019      	movs	r1, r3
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f7fc f87b 	bl	8000100 <__udivsi3>
 800400a:	0003      	movs	r3, r0
 800400c:	005a      	lsls	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	18d2      	adds	r2, r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	0019      	movs	r1, r3
 800401c:	0010      	movs	r0, r2
 800401e:	f7fc f86f 	bl	8000100 <__udivsi3>
 8004022:	0003      	movs	r3, r0
 8004024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d91c      	bls.n	8004066 <UART_SetConfig+0x1da>
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	2380      	movs	r3, #128	@ 0x80
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	429a      	cmp	r2, r3
 8004034:	d217      	bcs.n	8004066 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	b29a      	uxth	r2, r3
 800403a:	200e      	movs	r0, #14
 800403c:	183b      	adds	r3, r7, r0
 800403e:	210f      	movs	r1, #15
 8004040:	438a      	bics	r2, r1
 8004042:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	2207      	movs	r2, #7
 800404c:	4013      	ands	r3, r2
 800404e:	b299      	uxth	r1, r3
 8004050:	183b      	adds	r3, r7, r0
 8004052:	183a      	adds	r2, r7, r0
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	183a      	adds	r2, r7, r0
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	e056      	b.n	8004114 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004066:	231a      	movs	r3, #26
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e051      	b.n	8004114 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004070:	231b      	movs	r3, #27
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b08      	cmp	r3, #8
 8004078:	d015      	beq.n	80040a6 <UART_SetConfig+0x21a>
 800407a:	dc18      	bgt.n	80040ae <UART_SetConfig+0x222>
 800407c:	2b04      	cmp	r3, #4
 800407e:	d00d      	beq.n	800409c <UART_SetConfig+0x210>
 8004080:	dc15      	bgt.n	80040ae <UART_SetConfig+0x222>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <UART_SetConfig+0x200>
 8004086:	2b02      	cmp	r3, #2
 8004088:	d005      	beq.n	8004096 <UART_SetConfig+0x20a>
 800408a:	e010      	b.n	80040ae <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fd ff32 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8004090:	0003      	movs	r3, r0
 8004092:	617b      	str	r3, [r7, #20]
        break;
 8004094:	e012      	b.n	80040bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004096:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <UART_SetConfig+0x2cc>)
 8004098:	617b      	str	r3, [r7, #20]
        break;
 800409a:	e00f      	b.n	80040bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409c:	f7fd fe9e 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 80040a0:	0003      	movs	r3, r0
 80040a2:	617b      	str	r3, [r7, #20]
        break;
 80040a4:	e00a      	b.n	80040bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	617b      	str	r3, [r7, #20]
        break;
 80040ac:	e006      	b.n	80040bc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040b2:	231a      	movs	r3, #26
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
        break;
 80040ba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040c6:	4b25      	ldr	r3, [pc, #148]	@ (800415c <UART_SetConfig+0x2d0>)
 80040c8:	0052      	lsls	r2, r2, #1
 80040ca:	5ad3      	ldrh	r3, [r2, r3]
 80040cc:	0019      	movs	r1, r3
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	f7fc f816 	bl	8000100 <__udivsi3>
 80040d4:	0003      	movs	r3, r0
 80040d6:	001a      	movs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	18d2      	adds	r2, r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	0019      	movs	r1, r3
 80040e6:	0010      	movs	r0, r2
 80040e8:	f7fc f80a 	bl	8000100 <__udivsi3>
 80040ec:	0003      	movs	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d90a      	bls.n	800410c <UART_SetConfig+0x280>
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	2380      	movs	r3, #128	@ 0x80
 80040fa:	025b      	lsls	r3, r3, #9
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d205      	bcs.n	800410c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e003      	b.n	8004114 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800410c:	231a      	movs	r3, #26
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	226a      	movs	r2, #106	@ 0x6a
 8004118:	2101      	movs	r1, #1
 800411a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2268      	movs	r2, #104	@ 0x68
 8004120:	2101      	movs	r1, #1
 8004122:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004130:	231a      	movs	r3, #26
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b008      	add	sp, #32
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	cfff69f3 	.word	0xcfff69f3
 8004144:	ffffcfff 	.word	0xffffcfff
 8004148:	11fff4ff 	.word	0x11fff4ff
 800414c:	40013800 	.word	0x40013800
 8004150:	40021000 	.word	0x40021000
 8004154:	40004400 	.word	0x40004400
 8004158:	00f42400 	.word	0x00f42400
 800415c:	08005724 	.word	0x08005724

08004160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	2208      	movs	r2, #8
 800416e:	4013      	ands	r3, r2
 8004170:	d00b      	beq.n	800418a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a4a      	ldr	r2, [pc, #296]	@ (80042a4 <UART_AdvFeatureConfig+0x144>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	2201      	movs	r2, #1
 8004190:	4013      	ands	r3, r2
 8004192:	d00b      	beq.n	80041ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a43      	ldr	r2, [pc, #268]	@ (80042a8 <UART_AdvFeatureConfig+0x148>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	2202      	movs	r2, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d00b      	beq.n	80041ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a3b      	ldr	r2, [pc, #236]	@ (80042ac <UART_AdvFeatureConfig+0x14c>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	2204      	movs	r2, #4
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a34      	ldr	r2, [pc, #208]	@ (80042b0 <UART_AdvFeatureConfig+0x150>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	2210      	movs	r2, #16
 80041f6:	4013      	ands	r3, r2
 80041f8:	d00b      	beq.n	8004212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a2c      	ldr	r2, [pc, #176]	@ (80042b4 <UART_AdvFeatureConfig+0x154>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004216:	2220      	movs	r2, #32
 8004218:	4013      	ands	r3, r2
 800421a:	d00b      	beq.n	8004234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4a25      	ldr	r2, [pc, #148]	@ (80042b8 <UART_AdvFeatureConfig+0x158>)
 8004224:	4013      	ands	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	2240      	movs	r2, #64	@ 0x40
 800423a:	4013      	ands	r3, r2
 800423c:	d01d      	beq.n	800427a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <UART_AdvFeatureConfig+0x15c>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	035b      	lsls	r3, r3, #13
 800425e:	429a      	cmp	r2, r3
 8004260:	d10b      	bne.n	800427a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <UART_AdvFeatureConfig+0x160>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	2280      	movs	r2, #128	@ 0x80
 8004280:	4013      	ands	r3, r2
 8004282:	d00b      	beq.n	800429c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a0e      	ldr	r2, [pc, #56]	@ (80042c4 <UART_AdvFeatureConfig+0x164>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }
}
 800429c:	46c0      	nop			@ (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	ffff7fff 	.word	0xffff7fff
 80042a8:	fffdffff 	.word	0xfffdffff
 80042ac:	fffeffff 	.word	0xfffeffff
 80042b0:	fffbffff 	.word	0xfffbffff
 80042b4:	ffffefff 	.word	0xffffefff
 80042b8:	ffffdfff 	.word	0xffffdfff
 80042bc:	ffefffff 	.word	0xffefffff
 80042c0:	ff9fffff 	.word	0xff9fffff
 80042c4:	fff7ffff 	.word	0xfff7ffff

080042c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b092      	sub	sp, #72	@ 0x48
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2290      	movs	r2, #144	@ 0x90
 80042d4:	2100      	movs	r1, #0
 80042d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d8:	f7fc fcfc 	bl	8000cd4 <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2208      	movs	r2, #8
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d12d      	bne.n	800434a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f0:	2280      	movs	r2, #128	@ 0x80
 80042f2:	0391      	lsls	r1, r2, #14
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4a47      	ldr	r2, [pc, #284]	@ (8004414 <UART_CheckIdleState+0x14c>)
 80042f8:	9200      	str	r2, [sp, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f000 f88e 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d022      	beq.n	800434a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004304:	f3ef 8310 	mrs	r3, PRIMASK
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800430c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800430e:	2301      	movs	r3, #1
 8004310:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2180      	movs	r1, #128	@ 0x80
 8004326:	438a      	bics	r2, r1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2288      	movs	r2, #136	@ 0x88
 800433a:	2120      	movs	r1, #32
 800433c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2284      	movs	r2, #132	@ 0x84
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e060      	b.n	800440c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2204      	movs	r2, #4
 8004352:	4013      	ands	r3, r2
 8004354:	2b04      	cmp	r3, #4
 8004356:	d146      	bne.n	80043e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	2280      	movs	r2, #128	@ 0x80
 800435c:	03d1      	lsls	r1, r2, #15
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <UART_CheckIdleState+0x14c>)
 8004362:	9200      	str	r2, [sp, #0]
 8004364:	2200      	movs	r2, #0
 8004366:	f000 f859 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d03b      	beq.n	80043e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436e:	f3ef 8310 	mrs	r3, PRIMASK
 8004372:	60fb      	str	r3, [r7, #12]
  return(result);
 8004374:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
 8004378:	2301      	movs	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4922      	ldr	r1, [pc, #136]	@ (8004418 <UART_CheckIdleState+0x150>)
 8004390:	400a      	ands	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f383 8810 	msr	PRIMASK, r3
}
 800439e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8310 	mrs	r3, PRIMASK
 80043a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80043a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	438a      	bics	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	228c      	movs	r2, #140	@ 0x8c
 80043d6:	2120      	movs	r1, #32
 80043d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2284      	movs	r2, #132	@ 0x84
 80043de:	2100      	movs	r1, #0
 80043e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e012      	b.n	800440c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2288      	movs	r2, #136	@ 0x88
 80043ea:	2120      	movs	r1, #32
 80043ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	228c      	movs	r2, #140	@ 0x8c
 80043f2:	2120      	movs	r1, #32
 80043f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2284      	movs	r2, #132	@ 0x84
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b010      	add	sp, #64	@ 0x40
 8004412:	bd80      	pop	{r7, pc}
 8004414:	01ffffff 	.word	0x01ffffff
 8004418:	fffffedf 	.word	0xfffffedf

0800441c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	e051      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3301      	adds	r3, #1
 8004432:	d04e      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004434:	f7fc fc4e 	bl	8000cd4 <HAL_GetTick>
 8004438:	0002      	movs	r2, r0
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e051      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2204      	movs	r2, #4
 8004456:	4013      	ands	r3, r2
 8004458:	d03b      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b80      	cmp	r3, #128	@ 0x80
 800445e:	d038      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d035      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2208      	movs	r2, #8
 800446e:	4013      	ands	r3, r2
 8004470:	2b08      	cmp	r3, #8
 8004472:	d111      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2208      	movs	r2, #8
 800447a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f960 	bl	8004744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2290      	movs	r2, #144	@ 0x90
 8004488:	2108      	movs	r1, #8
 800448a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2284      	movs	r2, #132	@ 0x84
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e02c      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	401a      	ands	r2, r3
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d112      	bne.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2280      	movs	r2, #128	@ 0x80
 80044b2:	0112      	lsls	r2, r2, #4
 80044b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f943 	bl	8004744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2290      	movs	r2, #144	@ 0x90
 80044c2:	2120      	movs	r1, #32
 80044c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2284      	movs	r2, #132	@ 0x84
 80044ca:	2100      	movs	r1, #0
 80044cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e00f      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	425a      	negs	r2, r3
 80044e2:	4153      	adcs	r3, r2
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	001a      	movs	r2, r3
 80044e8:	1dfb      	adds	r3, r7, #7
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d09e      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b098      	sub	sp, #96	@ 0x60
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	1dbb      	adds	r3, r7, #6
 8004508:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1dba      	adds	r2, r7, #6
 8004514:	215c      	movs	r1, #92	@ 0x5c
 8004516:	8812      	ldrh	r2, [r2, #0]
 8004518:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1dba      	adds	r2, r7, #6
 800451e:	215e      	movs	r1, #94	@ 0x5e
 8004520:	8812      	ldrh	r2, [r2, #0]
 8004522:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	015b      	lsls	r3, r3, #5
 8004532:	429a      	cmp	r2, r3
 8004534:	d10d      	bne.n	8004552 <UART_Start_Receive_IT+0x56>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <UART_Start_Receive_IT+0x4c>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2260      	movs	r2, #96	@ 0x60
 8004542:	497b      	ldr	r1, [pc, #492]	@ (8004730 <UART_Start_Receive_IT+0x234>)
 8004544:	5299      	strh	r1, [r3, r2]
 8004546:	e02e      	b.n	80045a6 <UART_Start_Receive_IT+0xaa>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2260      	movs	r2, #96	@ 0x60
 800454c:	21ff      	movs	r1, #255	@ 0xff
 800454e:	5299      	strh	r1, [r3, r2]
 8004550:	e029      	b.n	80045a6 <UART_Start_Receive_IT+0xaa>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <UART_Start_Receive_IT+0x7a>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <UART_Start_Receive_IT+0x70>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2260      	movs	r2, #96	@ 0x60
 8004566:	21ff      	movs	r1, #255	@ 0xff
 8004568:	5299      	strh	r1, [r3, r2]
 800456a:	e01c      	b.n	80045a6 <UART_Start_Receive_IT+0xaa>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2260      	movs	r2, #96	@ 0x60
 8004570:	217f      	movs	r1, #127	@ 0x7f
 8004572:	5299      	strh	r1, [r3, r2]
 8004574:	e017      	b.n	80045a6 <UART_Start_Receive_IT+0xaa>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	055b      	lsls	r3, r3, #21
 800457e:	429a      	cmp	r2, r3
 8004580:	d10d      	bne.n	800459e <UART_Start_Receive_IT+0xa2>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <UART_Start_Receive_IT+0x98>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2260      	movs	r2, #96	@ 0x60
 800458e:	217f      	movs	r1, #127	@ 0x7f
 8004590:	5299      	strh	r1, [r3, r2]
 8004592:	e008      	b.n	80045a6 <UART_Start_Receive_IT+0xaa>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2260      	movs	r2, #96	@ 0x60
 8004598:	213f      	movs	r1, #63	@ 0x3f
 800459a:	5299      	strh	r1, [r3, r2]
 800459c:	e003      	b.n	80045a6 <UART_Start_Receive_IT+0xaa>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2260      	movs	r2, #96	@ 0x60
 80045a2:	2100      	movs	r1, #0
 80045a4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2290      	movs	r2, #144	@ 0x90
 80045aa:	2100      	movs	r1, #0
 80045ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	228c      	movs	r2, #140	@ 0x8c
 80045b2:	2122      	movs	r1, #34	@ 0x22
 80045b4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ba:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80045bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045c0:	2301      	movs	r3, #1
 80045c2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c6:	f383 8810 	msr	PRIMASK, r3
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2101      	movs	r1, #1
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045de:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e2:	f383 8810 	msr	PRIMASK, r3
}
 80045e6:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	059b      	lsls	r3, r3, #22
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d150      	bne.n	8004696 <UART_Start_Receive_IT+0x19a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2268      	movs	r2, #104	@ 0x68
 80045f8:	5a9b      	ldrh	r3, [r3, r2]
 80045fa:	1dba      	adds	r2, r7, #6
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d349      	bcc.n	8004696 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	429a      	cmp	r2, r3
 800460c:	d107      	bne.n	800461e <UART_Start_Receive_IT+0x122>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4a46      	ldr	r2, [pc, #280]	@ (8004734 <UART_Start_Receive_IT+0x238>)
 800461a:	675a      	str	r2, [r3, #116]	@ 0x74
 800461c:	e002      	b.n	8004624 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a45      	ldr	r2, [pc, #276]	@ (8004738 <UART_Start_Receive_IT+0x23c>)
 8004622:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d019      	beq.n	8004660 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462c:	f3ef 8310 	mrs	r3, PRIMASK
 8004630:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004634:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004636:	2301      	movs	r3, #1
 8004638:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463c:	f383 8810 	msr	PRIMASK, r3
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2180      	movs	r1, #128	@ 0x80
 800464e:	0049      	lsls	r1, r1, #1
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004660:	f3ef 8310 	mrs	r3, PRIMASK
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004668:	657b      	str	r3, [r7, #84]	@ 0x54
 800466a:	2301      	movs	r3, #1
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	f383 8810 	msr	PRIMASK, r3
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2180      	movs	r1, #128	@ 0x80
 8004682:	0549      	lsls	r1, r1, #21
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	f383 8810 	msr	PRIMASK, r3
}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	e047      	b.n	8004726 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	2380      	movs	r3, #128	@ 0x80
 800469c:	015b      	lsls	r3, r3, #5
 800469e:	429a      	cmp	r2, r3
 80046a0:	d107      	bne.n	80046b2 <UART_Start_Receive_IT+0x1b6>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a23      	ldr	r2, [pc, #140]	@ (800473c <UART_Start_Receive_IT+0x240>)
 80046ae:	675a      	str	r2, [r3, #116]	@ 0x74
 80046b0:	e002      	b.n	80046b8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a22      	ldr	r2, [pc, #136]	@ (8004740 <UART_Start_Receive_IT+0x244>)
 80046b6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d019      	beq.n	80046f4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c0:	f3ef 8310 	mrs	r3, PRIMASK
 80046c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80046c6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80046c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ca:	2301      	movs	r3, #1
 80046cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	46c0      	nop			@ (mov r8, r8)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2190      	movs	r1, #144	@ 0x90
 80046e2:	0049      	lsls	r1, r1, #1
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	e018      	b.n	8004726 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f4:	f3ef 8310 	mrs	r3, PRIMASK
 80046f8:	613b      	str	r3, [r7, #16]
  return(result);
 80046fa:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f383 8810 	msr	PRIMASK, r3
}
 8004708:	46c0      	nop			@ (mov r8, r8)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2120      	movs	r1, #32
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800471c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b018      	add	sp, #96	@ 0x60
 800472e:	bd80      	pop	{r7, pc}
 8004730:	000001ff 	.word	0x000001ff
 8004734:	08005289 	.word	0x08005289
 8004738:	08004f59 	.word	0x08004f59
 800473c:	08004da1 	.word	0x08004da1
 8004740:	08004be9 	.word	0x08004be9

08004744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	@ 0x38
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474c:	f3ef 8310 	mrs	r3, PRIMASK
 8004750:	617b      	str	r3, [r7, #20]
  return(result);
 8004752:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f383 8810 	msr	PRIMASK, r3
}
 8004760:	46c0      	nop			@ (mov r8, r8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4926      	ldr	r1, [pc, #152]	@ (8004808 <UART_EndRxTransfer+0xc4>)
 800476e:	400a      	ands	r2, r1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477e:	f3ef 8310 	mrs	r3, PRIMASK
 8004782:	623b      	str	r3, [r7, #32]
  return(result);
 8004784:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004786:	633b      	str	r3, [r7, #48]	@ 0x30
 8004788:	2301      	movs	r3, #1
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	f383 8810 	msr	PRIMASK, r3
}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	491b      	ldr	r1, [pc, #108]	@ (800480c <UART_EndRxTransfer+0xc8>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047aa:	f383 8810 	msr	PRIMASK, r3
}
 80047ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d118      	bne.n	80047ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c2:	2301      	movs	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2110      	movs	r1, #16
 80047da:	438a      	bics	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	228c      	movs	r2, #140	@ 0x8c
 80047ee:	2120      	movs	r1, #32
 80047f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b00e      	add	sp, #56	@ 0x38
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	fffffedf 	.word	0xfffffedf
 800480c:	effffffe 	.word	0xeffffffe

08004810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	225e      	movs	r2, #94	@ 0x5e
 8004822:	2100      	movs	r1, #0
 8004824:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2256      	movs	r2, #86	@ 0x56
 800482a:	2100      	movs	r1, #0
 800482c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff fb17 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b004      	add	sp, #16
 800483c:	bd80      	pop	{r7, pc}

0800483e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b08a      	sub	sp, #40	@ 0x28
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2288      	movs	r2, #136	@ 0x88
 800484a:	589b      	ldr	r3, [r3, r2]
 800484c:	2b21      	cmp	r3, #33	@ 0x21
 800484e:	d14c      	bne.n	80048ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2256      	movs	r2, #86	@ 0x56
 8004854:	5a9b      	ldrh	r3, [r3, r2]
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d132      	bne.n	80048c2 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8310 	mrs	r3, PRIMASK
 8004860:	60bb      	str	r3, [r7, #8]
  return(result);
 8004862:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
 8004866:	2301      	movs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f383 8810 	msr	PRIMASK, r3
}
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	438a      	bics	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488e:	f3ef 8310 	mrs	r3, PRIMASK
 8004892:	617b      	str	r3, [r7, #20]
  return(result);
 8004894:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	2301      	movs	r3, #1
 800489a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f383 8810 	msr	PRIMASK, r3
}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2140      	movs	r1, #64	@ 0x40
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f383 8810 	msr	PRIMASK, r3
}
 80048be:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80048c0:	e013      	b.n	80048ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2256      	movs	r2, #86	@ 0x56
 80048dc:	5a9b      	ldrh	r3, [r3, r2]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b299      	uxth	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2256      	movs	r2, #86	@ 0x56
 80048e8:	5299      	strh	r1, [r3, r2]
}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b00a      	add	sp, #40	@ 0x28
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b08c      	sub	sp, #48	@ 0x30
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2288      	movs	r2, #136	@ 0x88
 80048fe:	589b      	ldr	r3, [r3, r2]
 8004900:	2b21      	cmp	r3, #33	@ 0x21
 8004902:	d151      	bne.n	80049a8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2256      	movs	r2, #86	@ 0x56
 8004908:	5a9b      	ldrh	r3, [r3, r2]
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d132      	bne.n	8004976 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	60fb      	str	r3, [r7, #12]
  return(result);
 8004916:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800491a:	2301      	movs	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2180      	movs	r1, #128	@ 0x80
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	61bb      	str	r3, [r7, #24]
  return(result);
 8004948:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
 800494c:	2301      	movs	r3, #1
 800494e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2140      	movs	r1, #64	@ 0x40
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004974:	e018      	b.n	80049a8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	001a      	movs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	05d2      	lsls	r2, r2, #23
 8004988:	0dd2      	lsrs	r2, r2, #23
 800498a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2256      	movs	r2, #86	@ 0x56
 800499a:	5a9b      	ldrh	r3, [r3, r2]
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b299      	uxth	r1, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2256      	movs	r2, #86	@ 0x56
 80049a6:	5299      	strh	r1, [r3, r2]
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b00c      	add	sp, #48	@ 0x30
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	@ 0x30
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2288      	movs	r2, #136	@ 0x88
 80049bc:	589b      	ldr	r3, [r3, r2]
 80049be:	2b21      	cmp	r3, #33	@ 0x21
 80049c0:	d165      	bne.n	8004a8e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80049c2:	232e      	movs	r3, #46	@ 0x2e
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	216a      	movs	r1, #106	@ 0x6a
 80049ca:	5a52      	ldrh	r2, [r2, r1]
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	e059      	b.n	8004a84 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2256      	movs	r2, #86	@ 0x56
 80049d4:	5a9b      	ldrh	r3, [r3, r2]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d133      	bne.n	8004a44 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049dc:	f3ef 8310 	mrs	r3, PRIMASK
 80049e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e6:	2301      	movs	r3, #1
 80049e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	46c0      	nop			@ (mov r8, r8)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4926      	ldr	r1, [pc, #152]	@ (8004a98 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80049fe:	400a      	ands	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f383 8810 	msr	PRIMASK, r3
}
 8004a0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a12:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a14:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2140      	movs	r1, #64	@ 0x40
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f383 8810 	msr	PRIMASK, r3
}
 8004a3e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004a40:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004a42:	e024      	b.n	8004a8e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	2280      	movs	r2, #128	@ 0x80
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a54:	781a      	ldrb	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2256      	movs	r2, #86	@ 0x56
 8004a6a:	5a9b      	ldrh	r3, [r3, r2]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b299      	uxth	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2256      	movs	r2, #86	@ 0x56
 8004a76:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a78:	212e      	movs	r1, #46	@ 0x2e
 8004a7a:	187b      	adds	r3, r7, r1
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	3a01      	subs	r2, #1
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	232e      	movs	r3, #46	@ 0x2e
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1a0      	bne.n	80049d0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b00c      	add	sp, #48	@ 0x30
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	ff7fffff 	.word	0xff7fffff

08004a9c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	@ 0x30
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2288      	movs	r2, #136	@ 0x88
 8004aa8:	589b      	ldr	r3, [r3, r2]
 8004aaa:	2b21      	cmp	r3, #33	@ 0x21
 8004aac:	d16a      	bne.n	8004b84 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004aae:	232e      	movs	r3, #46	@ 0x2e
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	216a      	movs	r1, #106	@ 0x6a
 8004ab6:	5a52      	ldrh	r2, [r2, r1]
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	e05e      	b.n	8004b7a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2256      	movs	r2, #86	@ 0x56
 8004ac0:	5a9b      	ldrh	r3, [r3, r2]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d133      	bne.n	8004b30 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ace:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4928      	ldr	r1, [pc, #160]	@ (8004b8c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afa:	f3ef 8310 	mrs	r3, PRIMASK
 8004afe:	617b      	str	r3, [r7, #20]
  return(result);
 8004b00:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	2301      	movs	r3, #1
 8004b06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f383 8810 	msr	PRIMASK, r3
}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2140      	movs	r1, #64	@ 0x40
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004b2c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004b2e:	e029      	b.n	8004b84 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2280      	movs	r2, #128	@ 0x80
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	001a      	movs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	05d2      	lsls	r2, r2, #23
 8004b4e:	0dd2      	lsrs	r2, r2, #23
 8004b50:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2256      	movs	r2, #86	@ 0x56
 8004b60:	5a9b      	ldrh	r3, [r3, r2]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b299      	uxth	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2256      	movs	r2, #86	@ 0x56
 8004b6c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b6e:	212e      	movs	r1, #46	@ 0x2e
 8004b70:	187b      	adds	r3, r7, r1
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	232e      	movs	r3, #46	@ 0x2e
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d19b      	bne.n	8004abc <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004b84:	46c0      	nop			@ (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b00c      	add	sp, #48	@ 0x30
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	ff7fffff 	.word	0xff7fffff

08004b90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b98:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f383 8810 	msr	PRIMASK, r3
}
 8004bac:	46c0      	nop			@ (mov r8, r8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2140      	movs	r1, #64	@ 0x40
 8004bba:	438a      	bics	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f383 8810 	msr	PRIMASK, r3
}
 8004bc8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2288      	movs	r2, #136	@ 0x88
 8004bce:	2120      	movs	r1, #32
 8004bd0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7ff f93a 	bl	8003e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be0:	46c0      	nop			@ (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b006      	add	sp, #24
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b094      	sub	sp, #80	@ 0x50
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bf0:	204e      	movs	r0, #78	@ 0x4e
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	2160      	movs	r1, #96	@ 0x60
 8004bf8:	5a52      	ldrh	r2, [r2, r1]
 8004bfa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	228c      	movs	r2, #140	@ 0x8c
 8004c00:	589b      	ldr	r3, [r3, r2]
 8004c02:	2b22      	cmp	r3, #34	@ 0x22
 8004c04:	d000      	beq.n	8004c08 <UART_RxISR_8BIT+0x20>
 8004c06:	e0ba      	b.n	8004d7e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c0e:	214c      	movs	r1, #76	@ 0x4c
 8004c10:	187b      	adds	r3, r7, r1
 8004c12:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	183b      	adds	r3, r7, r0
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b2d9      	uxtb	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c24:	400a      	ands	r2, r1
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	225e      	movs	r2, #94	@ 0x5e
 8004c38:	5a9b      	ldrh	r3, [r3, r2]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b299      	uxth	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	225e      	movs	r2, #94	@ 0x5e
 8004c44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	225e      	movs	r2, #94	@ 0x5e
 8004c4a:	5a9b      	ldrh	r3, [r3, r2]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d000      	beq.n	8004c54 <UART_RxISR_8BIT+0x6c>
 8004c52:	e09c      	b.n	8004d8e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c54:	f3ef 8310 	mrs	r3, PRIMASK
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5e:	2301      	movs	r3, #1
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	f383 8810 	msr	PRIMASK, r3
}
 8004c68:	46c0      	nop			@ (mov r8, r8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4948      	ldr	r1, [pc, #288]	@ (8004d98 <UART_RxISR_8BIT+0x1b0>)
 8004c76:	400a      	ands	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c86:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c90:	2301      	movs	r3, #1
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c96:	f383 8810 	msr	PRIMASK, r3
}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	438a      	bics	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	228c      	movs	r2, #140	@ 0x8c
 8004cbc:	2120      	movs	r1, #32
 8004cbe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	2380      	movs	r3, #128	@ 0x80
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cda:	f3ef 8310 	mrs	r3, PRIMASK
 8004cde:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f383 8810 	msr	PRIMASK, r3
}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4928      	ldr	r1, [pc, #160]	@ (8004d9c <UART_RxISR_8BIT+0x1b4>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d12f      	bne.n	8004d74 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d24:	2301      	movs	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f383 8810 	msr	PRIMASK, r3
}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2110      	movs	r1, #16
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f383 8810 	msr	PRIMASK, r3
}
 8004d4a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	2210      	movs	r2, #16
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d103      	bne.n	8004d62 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2210      	movs	r2, #16
 8004d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	225c      	movs	r2, #92	@ 0x5c
 8004d66:	5a9a      	ldrh	r2, [r3, r2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	0011      	movs	r1, r2
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff f881 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d72:	e00c      	b.n	8004d8e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fb fd58 	bl	800082c <HAL_UART_RxCpltCallback>
}
 8004d7c:	e007      	b.n	8004d8e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2108      	movs	r1, #8
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	619a      	str	r2, [r3, #24]
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b014      	add	sp, #80	@ 0x50
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	fffffedf 	.word	0xfffffedf
 8004d9c:	fbffffff 	.word	0xfbffffff

08004da0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b094      	sub	sp, #80	@ 0x50
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004da8:	204e      	movs	r0, #78	@ 0x4e
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	2160      	movs	r1, #96	@ 0x60
 8004db0:	5a52      	ldrh	r2, [r2, r1]
 8004db2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	228c      	movs	r2, #140	@ 0x8c
 8004db8:	589b      	ldr	r3, [r3, r2]
 8004dba:	2b22      	cmp	r3, #34	@ 0x22
 8004dbc:	d000      	beq.n	8004dc0 <UART_RxISR_16BIT+0x20>
 8004dbe:	e0ba      	b.n	8004f36 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dc6:	214c      	movs	r1, #76	@ 0x4c
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	183a      	adds	r2, r7, r0
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	8812      	ldrh	r2, [r2, #0]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	225e      	movs	r2, #94	@ 0x5e
 8004df0:	5a9b      	ldrh	r3, [r3, r2]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b299      	uxth	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	225e      	movs	r2, #94	@ 0x5e
 8004dfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	225e      	movs	r2, #94	@ 0x5e
 8004e02:	5a9b      	ldrh	r3, [r3, r2]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d000      	beq.n	8004e0c <UART_RxISR_16BIT+0x6c>
 8004e0a:	e09c      	b.n	8004f46 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e10:	623b      	str	r3, [r7, #32]
  return(result);
 8004e12:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e16:	2301      	movs	r3, #1
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	f383 8810 	msr	PRIMASK, r3
}
 8004e20:	46c0      	nop			@ (mov r8, r8)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4948      	ldr	r1, [pc, #288]	@ (8004f50 <UART_RxISR_16BIT+0x1b0>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	f383 8810 	msr	PRIMASK, r3
}
 8004e3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e48:	2301      	movs	r3, #1
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2101      	movs	r1, #1
 8004e60:	438a      	bics	r2, r1
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	228c      	movs	r2, #140	@ 0x8c
 8004e74:	2120      	movs	r1, #32
 8004e76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e92:	f3ef 8310 	mrs	r3, PRIMASK
 8004e96:	617b      	str	r3, [r7, #20]
  return(result);
 8004e98:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f383 8810 	msr	PRIMASK, r3
}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4928      	ldr	r1, [pc, #160]	@ (8004f54 <UART_RxISR_16BIT+0x1b4>)
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f383 8810 	msr	PRIMASK, r3
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d12f      	bne.n	8004f2c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004edc:	2301      	movs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	438a      	bics	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f383 8810 	msr	PRIMASK, r3
}
 8004f02:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d103      	bne.n	8004f1a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2210      	movs	r2, #16
 8004f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	225c      	movs	r2, #92	@ 0x5c
 8004f1e:	5a9a      	ldrh	r2, [r3, r2]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0011      	movs	r1, r2
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7fe ffa5 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f2a:	e00c      	b.n	8004f46 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fb fc7c 	bl	800082c <HAL_UART_RxCpltCallback>
}
 8004f34:	e007      	b.n	8004f46 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2108      	movs	r1, #8
 8004f42:	430a      	orrs	r2, r1
 8004f44:	619a      	str	r2, [r3, #24]
}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b014      	add	sp, #80	@ 0x50
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	fffffedf 	.word	0xfffffedf
 8004f54:	fbffffff 	.word	0xfbffffff

08004f58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b0a0      	sub	sp, #128	@ 0x80
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f60:	237a      	movs	r3, #122	@ 0x7a
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	2160      	movs	r1, #96	@ 0x60
 8004f68:	5a52      	ldrh	r2, [r2, r1]
 8004f6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	228c      	movs	r2, #140	@ 0x8c
 8004f88:	589b      	ldr	r3, [r3, r2]
 8004f8a:	2b22      	cmp	r3, #34	@ 0x22
 8004f8c:	d000      	beq.n	8004f90 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004f8e:	e165      	b.n	800525c <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f90:	236e      	movs	r3, #110	@ 0x6e
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	2168      	movs	r1, #104	@ 0x68
 8004f98:	5a52      	ldrh	r2, [r2, r1]
 8004f9a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f9c:	e10c      	b.n	80051b8 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa4:	216c      	movs	r1, #108	@ 0x6c
 8004fa6:	187b      	adds	r3, r7, r1
 8004fa8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	237a      	movs	r3, #122	@ 0x7a
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b2d9      	uxtb	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	225e      	movs	r2, #94	@ 0x5e
 8004fd0:	5a9b      	ldrh	r3, [r3, r2]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b299      	uxth	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	225e      	movs	r2, #94	@ 0x5e
 8004fdc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fe8:	2207      	movs	r2, #7
 8004fea:	4013      	ands	r3, r2
 8004fec:	d049      	beq.n	8005082 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d010      	beq.n	8005018 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004ff6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ff8:	2380      	movs	r3, #128	@ 0x80
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2201      	movs	r2, #1
 8005006:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2290      	movs	r2, #144	@ 0x90
 800500c:	589b      	ldr	r3, [r3, r2]
 800500e:	2201      	movs	r2, #1
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2190      	movs	r1, #144	@ 0x90
 8005016:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d00f      	beq.n	8005040 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005020:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
 8005026:	d00b      	beq.n	8005040 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2202      	movs	r2, #2
 800502e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2290      	movs	r2, #144	@ 0x90
 8005034:	589b      	ldr	r3, [r3, r2]
 8005036:	2204      	movs	r2, #4
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2190      	movs	r1, #144	@ 0x90
 800503e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005042:	2204      	movs	r2, #4
 8005044:	4013      	ands	r3, r2
 8005046:	d00f      	beq.n	8005068 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005048:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800504a:	2201      	movs	r2, #1
 800504c:	4013      	ands	r3, r2
 800504e:	d00b      	beq.n	8005068 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2204      	movs	r2, #4
 8005056:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2290      	movs	r2, #144	@ 0x90
 800505c:	589b      	ldr	r3, [r3, r2]
 800505e:	2202      	movs	r2, #2
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2190      	movs	r1, #144	@ 0x90
 8005066:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2290      	movs	r2, #144	@ 0x90
 800506c:	589b      	ldr	r3, [r3, r2]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0018      	movs	r0, r3
 8005076:	f7fe fef5 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2290      	movs	r2, #144	@ 0x90
 800507e:	2100      	movs	r1, #0
 8005080:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	225e      	movs	r2, #94	@ 0x5e
 8005086:	5a9b      	ldrh	r3, [r3, r2]
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d000      	beq.n	8005090 <UART_RxISR_8BIT_FIFOEN+0x138>
 800508e:	e093      	b.n	80051b8 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005090:	f3ef 8310 	mrs	r3, PRIMASK
 8005094:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800509a:	2301      	movs	r3, #1
 800509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a0:	f383 8810 	msr	PRIMASK, r3
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4970      	ldr	r1, [pc, #448]	@ (8005274 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80050b2:	400a      	ands	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050b8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c2:	f3ef 8310 	mrs	r3, PRIMASK
 80050c6:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80050c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80050cc:	2301      	movs	r3, #1
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4965      	ldr	r1, [pc, #404]	@ (8005278 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	228c      	movs	r2, #140	@ 0x8c
 80050f8:	2120      	movs	r1, #32
 80050fa:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	041b      	lsls	r3, r3, #16
 8005112:	4013      	ands	r3, r2
 8005114:	d018      	beq.n	8005148 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005116:	f3ef 8310 	mrs	r3, PRIMASK
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800511e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005120:	2301      	movs	r3, #1
 8005122:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	f383 8810 	msr	PRIMASK, r3
}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4951      	ldr	r1, [pc, #324]	@ (800527c <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005138:	400a      	ands	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800513e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005142:	f383 8810 	msr	PRIMASK, r3
}
 8005146:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d12f      	bne.n	80051b0 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005156:	f3ef 8310 	mrs	r3, PRIMASK
 800515a:	623b      	str	r3, [r7, #32]
  return(result);
 800515c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005160:	2301      	movs	r3, #1
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	f383 8810 	msr	PRIMASK, r3
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2110      	movs	r1, #16
 8005178:	438a      	bics	r2, r1
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	f383 8810 	msr	PRIMASK, r3
}
 8005186:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2210      	movs	r2, #16
 8005190:	4013      	ands	r3, r2
 8005192:	2b10      	cmp	r3, #16
 8005194:	d103      	bne.n	800519e <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2210      	movs	r2, #16
 800519c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	225c      	movs	r2, #92	@ 0x5c
 80051a2:	5a9a      	ldrh	r2, [r3, r2]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	0011      	movs	r1, r2
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7fe fe63 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
 80051ae:	e003      	b.n	80051b8 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7fb fb3a 	bl	800082c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051b8:	236e      	movs	r3, #110	@ 0x6e
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <UART_RxISR_8BIT_FIFOEN+0x274>
 80051c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051c4:	2220      	movs	r2, #32
 80051c6:	4013      	ands	r3, r2
 80051c8:	d000      	beq.n	80051cc <UART_RxISR_8BIT_FIFOEN+0x274>
 80051ca:	e6e8      	b.n	8004f9e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051cc:	205a      	movs	r0, #90	@ 0x5a
 80051ce:	183b      	adds	r3, r7, r0
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	215e      	movs	r1, #94	@ 0x5e
 80051d4:	5a52      	ldrh	r2, [r2, r1]
 80051d6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051d8:	0001      	movs	r1, r0
 80051da:	187b      	adds	r3, r7, r1
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d044      	beq.n	800526c <UART_RxISR_8BIT_FIFOEN+0x314>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2268      	movs	r2, #104	@ 0x68
 80051e6:	5a9b      	ldrh	r3, [r3, r2]
 80051e8:	187a      	adds	r2, r7, r1
 80051ea:	8812      	ldrh	r2, [r2, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d23d      	bcs.n	800526c <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f0:	f3ef 8310 	mrs	r3, PRIMASK
 80051f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80051f6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051fa:	2301      	movs	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f383 8810 	msr	PRIMASK, r3
}
 8005204:	46c0      	nop			@ (mov r8, r8)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	491b      	ldr	r1, [pc, #108]	@ (8005280 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005212:	400a      	ands	r2, r1
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f383 8810 	msr	PRIMASK, r3
}
 8005220:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005226:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005228:	f3ef 8310 	mrs	r3, PRIMASK
 800522c:	617b      	str	r3, [r7, #20]
  return(result);
 800522e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005230:	653b      	str	r3, [r7, #80]	@ 0x50
 8005232:	2301      	movs	r3, #1
 8005234:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f383 8810 	msr	PRIMASK, r3
}
 800523c:	46c0      	nop			@ (mov r8, r8)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2120      	movs	r1, #32
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f383 8810 	msr	PRIMASK, r3
}
 8005258:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800525a:	e007      	b.n	800526c <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2108      	movs	r1, #8
 8005268:	430a      	orrs	r2, r1
 800526a:	619a      	str	r2, [r3, #24]
}
 800526c:	46c0      	nop			@ (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b020      	add	sp, #128	@ 0x80
 8005272:	bd80      	pop	{r7, pc}
 8005274:	fffffeff 	.word	0xfffffeff
 8005278:	effffffe 	.word	0xeffffffe
 800527c:	fbffffff 	.word	0xfbffffff
 8005280:	efffffff 	.word	0xefffffff
 8005284:	08004be9 	.word	0x08004be9

08005288 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b0a2      	sub	sp, #136	@ 0x88
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005290:	2382      	movs	r3, #130	@ 0x82
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	2160      	movs	r1, #96	@ 0x60
 8005298:	5a52      	ldrh	r2, [r2, r1]
 800529a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2284      	movs	r2, #132	@ 0x84
 80052a4:	18ba      	adds	r2, r7, r2
 80052a6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	228c      	movs	r2, #140	@ 0x8c
 80052bc:	589b      	ldr	r3, [r3, r2]
 80052be:	2b22      	cmp	r3, #34	@ 0x22
 80052c0:	d000      	beq.n	80052c4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80052c2:	e16f      	b.n	80055a4 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80052c4:	2376      	movs	r3, #118	@ 0x76
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	2168      	movs	r1, #104	@ 0x68
 80052cc:	5a52      	ldrh	r2, [r2, r1]
 80052ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052d0:	e114      	b.n	80054fc <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052d8:	2174      	movs	r1, #116	@ 0x74
 80052da:	187b      	adds	r3, r7, r1
 80052dc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e2:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	2282      	movs	r2, #130	@ 0x82
 80052e8:	18ba      	adds	r2, r7, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	8812      	ldrh	r2, [r2, #0]
 80052ee:	4013      	ands	r3, r2
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	225e      	movs	r2, #94	@ 0x5e
 8005304:	5a9b      	ldrh	r3, [r3, r2]
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b299      	uxth	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	225e      	movs	r2, #94	@ 0x5e
 8005310:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	2184      	movs	r1, #132	@ 0x84
 800531a:	187a      	adds	r2, r7, r1
 800531c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800531e:	187b      	adds	r3, r7, r1
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2207      	movs	r2, #7
 8005324:	4013      	ands	r3, r2
 8005326:	d04e      	beq.n	80053c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005328:	187b      	adds	r3, r7, r1
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	d010      	beq.n	8005354 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005332:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005334:	2380      	movs	r3, #128	@ 0x80
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4013      	ands	r3, r2
 800533a:	d00b      	beq.n	8005354 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2201      	movs	r2, #1
 8005342:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2290      	movs	r2, #144	@ 0x90
 8005348:	589b      	ldr	r3, [r3, r2]
 800534a:	2201      	movs	r2, #1
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2190      	movs	r1, #144	@ 0x90
 8005352:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005354:	2384      	movs	r3, #132	@ 0x84
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2202      	movs	r2, #2
 800535c:	4013      	ands	r3, r2
 800535e:	d00f      	beq.n	8005380 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005362:	2201      	movs	r2, #1
 8005364:	4013      	ands	r3, r2
 8005366:	d00b      	beq.n	8005380 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2202      	movs	r2, #2
 800536e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2290      	movs	r2, #144	@ 0x90
 8005374:	589b      	ldr	r3, [r3, r2]
 8005376:	2204      	movs	r2, #4
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2190      	movs	r1, #144	@ 0x90
 800537e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005380:	2384      	movs	r3, #132	@ 0x84
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2204      	movs	r2, #4
 8005388:	4013      	ands	r3, r2
 800538a:	d00f      	beq.n	80053ac <UART_RxISR_16BIT_FIFOEN+0x124>
 800538c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800538e:	2201      	movs	r2, #1
 8005390:	4013      	ands	r3, r2
 8005392:	d00b      	beq.n	80053ac <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2204      	movs	r2, #4
 800539a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2290      	movs	r2, #144	@ 0x90
 80053a0:	589b      	ldr	r3, [r3, r2]
 80053a2:	2202      	movs	r2, #2
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2190      	movs	r1, #144	@ 0x90
 80053aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2290      	movs	r2, #144	@ 0x90
 80053b0:	589b      	ldr	r3, [r3, r2]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7fe fd53 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2290      	movs	r2, #144	@ 0x90
 80053c2:	2100      	movs	r1, #0
 80053c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	225e      	movs	r2, #94	@ 0x5e
 80053ca:	5a9b      	ldrh	r3, [r3, r2]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80053d2:	e093      	b.n	80054fc <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d4:	f3ef 8310 	mrs	r3, PRIMASK
 80053d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80053da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053de:	2301      	movs	r3, #1
 80053e0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4971      	ldr	r1, [pc, #452]	@ (80055bc <UART_RxISR_16BIT_FIFOEN+0x334>)
 80053f6:	400a      	ands	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053fc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005400:	f383 8810 	msr	PRIMASK, r3
}
 8005404:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800540c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800540e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005410:	2301      	movs	r3, #1
 8005412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4966      	ldr	r1, [pc, #408]	@ (80055c0 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005428:	400a      	ands	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800542e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	228c      	movs	r2, #140	@ 0x8c
 800543c:	2120      	movs	r1, #32
 800543e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	4013      	ands	r3, r2
 8005458:	d018      	beq.n	800548c <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005462:	667b      	str	r3, [r7, #100]	@ 0x64
 8005464:	2301      	movs	r3, #1
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4952      	ldr	r1, [pc, #328]	@ (80055c4 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 800547c:	400a      	ands	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005482:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d12f      	bne.n	80054f4 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549a:	f3ef 8310 	mrs	r3, PRIMASK
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80054a4:	2301      	movs	r3, #1
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2110      	movs	r1, #16
 80054bc:	438a      	bics	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	f383 8810 	msr	PRIMASK, r3
}
 80054ca:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	2210      	movs	r2, #16
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d103      	bne.n	80054e2 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2210      	movs	r2, #16
 80054e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	225c      	movs	r2, #92	@ 0x5c
 80054e6:	5a9a      	ldrh	r2, [r3, r2]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fe fcc1 	bl	8003e74 <HAL_UARTEx_RxEventCallback>
 80054f2:	e003      	b.n	80054fc <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fb f998 	bl	800082c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054fc:	2376      	movs	r3, #118	@ 0x76
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005506:	2384      	movs	r3, #132	@ 0x84
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2220      	movs	r2, #32
 800550e:	4013      	ands	r3, r2
 8005510:	d000      	beq.n	8005514 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005512:	e6de      	b.n	80052d2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005514:	205e      	movs	r0, #94	@ 0x5e
 8005516:	183b      	adds	r3, r7, r0
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	215e      	movs	r1, #94	@ 0x5e
 800551c:	5a52      	ldrh	r2, [r2, r1]
 800551e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005520:	0001      	movs	r1, r0
 8005522:	187b      	adds	r3, r7, r1
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d044      	beq.n	80055b4 <UART_RxISR_16BIT_FIFOEN+0x32c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2268      	movs	r2, #104	@ 0x68
 800552e:	5a9b      	ldrh	r3, [r3, r2]
 8005530:	187a      	adds	r2, r7, r1
 8005532:	8812      	ldrh	r2, [r2, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d23d      	bcs.n	80055b4 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005538:	f3ef 8310 	mrs	r3, PRIMASK
 800553c:	60fb      	str	r3, [r7, #12]
  return(result);
 800553e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005540:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005542:	2301      	movs	r3, #1
 8005544:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			@ (mov r8, r8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	491b      	ldr	r1, [pc, #108]	@ (80055c8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800555a:	400a      	ands	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005560:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a17      	ldr	r2, [pc, #92]	@ (80055cc <UART_RxISR_16BIT_FIFOEN+0x344>)
 800556e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005570:	f3ef 8310 	mrs	r3, PRIMASK
 8005574:	61bb      	str	r3, [r7, #24]
  return(result);
 8005576:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005578:	657b      	str	r3, [r7, #84]	@ 0x54
 800557a:	2301      	movs	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f383 8810 	msr	PRIMASK, r3
}
 8005584:	46c0      	nop			@ (mov r8, r8)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2120      	movs	r1, #32
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005598:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f383 8810 	msr	PRIMASK, r3
}
 80055a0:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055a2:	e007      	b.n	80055b4 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2108      	movs	r1, #8
 80055b0:	430a      	orrs	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b022      	add	sp, #136	@ 0x88
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	fffffeff 	.word	0xfffffeff
 80055c0:	effffffe 	.word	0xeffffffe
 80055c4:	fbffffff 	.word	0xfbffffff
 80055c8:	efffffff 	.word	0xefffffff
 80055cc:	08004da1 	.word	0x08004da1

080055d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d8:	46c0      	nop			@ (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}

08005600 <memset>:
 8005600:	0003      	movs	r3, r0
 8005602:	1882      	adds	r2, r0, r2
 8005604:	4293      	cmp	r3, r2
 8005606:	d100      	bne.n	800560a <memset+0xa>
 8005608:	4770      	bx	lr
 800560a:	7019      	strb	r1, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	e7f9      	b.n	8005604 <memset+0x4>

08005610 <__libc_init_array>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	2600      	movs	r6, #0
 8005614:	4c0c      	ldr	r4, [pc, #48]	@ (8005648 <__libc_init_array+0x38>)
 8005616:	4d0d      	ldr	r5, [pc, #52]	@ (800564c <__libc_init_array+0x3c>)
 8005618:	1b64      	subs	r4, r4, r5
 800561a:	10a4      	asrs	r4, r4, #2
 800561c:	42a6      	cmp	r6, r4
 800561e:	d109      	bne.n	8005634 <__libc_init_array+0x24>
 8005620:	2600      	movs	r6, #0
 8005622:	f000 f819 	bl	8005658 <_init>
 8005626:	4c0a      	ldr	r4, [pc, #40]	@ (8005650 <__libc_init_array+0x40>)
 8005628:	4d0a      	ldr	r5, [pc, #40]	@ (8005654 <__libc_init_array+0x44>)
 800562a:	1b64      	subs	r4, r4, r5
 800562c:	10a4      	asrs	r4, r4, #2
 800562e:	42a6      	cmp	r6, r4
 8005630:	d105      	bne.n	800563e <__libc_init_array+0x2e>
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	00b3      	lsls	r3, r6, #2
 8005636:	58eb      	ldr	r3, [r5, r3]
 8005638:	4798      	blx	r3
 800563a:	3601      	adds	r6, #1
 800563c:	e7ee      	b.n	800561c <__libc_init_array+0xc>
 800563e:	00b3      	lsls	r3, r6, #2
 8005640:	58eb      	ldr	r3, [r5, r3]
 8005642:	4798      	blx	r3
 8005644:	3601      	adds	r6, #1
 8005646:	e7f2      	b.n	800562e <__libc_init_array+0x1e>
 8005648:	0800573c 	.word	0x0800573c
 800564c:	0800573c 	.word	0x0800573c
 8005650:	08005740 	.word	0x08005740
 8005654:	0800573c 	.word	0x0800573c

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	46c0      	nop			@ (mov r8, r8)
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
